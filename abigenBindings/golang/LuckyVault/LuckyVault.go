// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package LuckyVault

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// LuckyVaultMetaData contains all meta data concerning the LuckyVault contract.
var LuckyVaultMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AdminWithdrawFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoReward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SendDepositTokenFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TooEarly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TooLate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminWithdrawSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"DepositSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"TradeSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawSuccessful\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTradeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTradeRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162003cb538038062003cb58339818101604052810190620000379190620008cd565b620000576200004b620003d060201b60201c565b620003d860201b60201c565b6000600260146101000a81548160ff021916908315150217905550620000966000801b6200008a620003d060201b60201c565b6200049e60201b60201c565b620000d77fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775620000cb620003d060201b60201c565b6200049e60201b60201c565b620001297f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775620004b460201b60201c565b60016003819055506200015d8573ffffffffffffffffffffffffffffffffffffffff166200051760201b620014ff1760201c565b62000194576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620001c08473ffffffffffffffffffffffffffffffffffffffff166200051760201b620014ff1760201c565b620001f7576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620002238373ffffffffffffffffffffffffffffffffffffffff166200051760201b620014ff1760201c565b6200025a576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b804210620002a157806040517f691e568200000000000000000000000000000000000000000000000000000000815260040162000298919062000960565b60405180910390fd5b84600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c06008819055506101f46009819055506019600a8190555080600b819055505050505050620009ef565b600033905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620004b082826200053a60201b60201c565b5050565b6000620004c7836200060860201b60201c565b905081600080858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6200055182826200062760201b620015221760201c565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758214806200058257506000801b82145b156200060457620005bf7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a826200062760201b620015221760201c565b6000801b8214156200060357620006027fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775826200062760201b620015221760201c565b5b5b5050565b6000806000838152602001908152602001600020600101549050919050565b6200063e82826200066f60201b620015561760201c565b6200066a81600160008581526020019081526020016000206200076060201b620016361790919060201c565b505050565b6200068182826200079860201b60201c565b6200075c57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555062000701620003d060201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600062000790836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6200080260201b60201c565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006200081683836200087c60201b60201c565b6200087157826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905062000876565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081519050620008b081620009bb565b92915050565b600081519050620008c781620009d5565b92915050565b600080600080600060a08688031215620008e657600080fd5b6000620008f6888289016200089f565b955050602062000909888289016200089f565b94505060406200091c888289016200089f565b93505060606200092f888289016200089f565b92505060806200094288828901620008b6565b9150509295509295909350565b6200095a81620009b1565b82525050565b60006020820190506200097760008301846200094f565b92915050565b60006200098a8262000991565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620009c6816200097d565b8114620009d257600080fd5b50565b620009e081620009b1565b8114620009ec57600080fd5b50565b6132b680620009ff6000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80638da5cb5b116100de578063ca15c87311610097578063e1254fba11610071578063e1254fba14610437578063e63ab1e914610467578063e8fcc06714610485578063f2fde38b146104a35761018e565b8063ca15c873146103cf578063d547741f146103ff578063df1dd8261461041b5761018e565b80638da5cb5b146102f95780639010d07c1461031757806391d14854146103475780639fcfe0e414610377578063a217fddf14610395578063b6b55f25146103b35761018e565b80633f4ba83a1161014b5780636f15f646116101255780636f15f646146102a9578063715018a6146102c757806375b238fc146102d15780638456cb59146102ef5761018e565b80633f4ba83a14610265578063487c35801461026f5780635c975abb1461028b5761018e565b806301ffc9a7146101935780631906ab9b146101c3578063248a9ca3146101e15780632e1a7d4d146102115780632f2ff15d1461022d57806336568abe14610249575b600080fd5b6101ad60048036038101906101a89190612812565b6104bf565b6040516101ba9190612be5565b60405180910390f35b6101cb610539565b6040516101d89190612d5d565b60405180910390f35b6101fb60048036038101906101f69190612771565b610543565b6040516102089190612c00565b60405180910390f35b61022b6004803603810190610226919061283b565b610562565b005b6102476004803603810190610242919061279a565b6107ef565b005b610263600480360381019061025e919061279a565b610810565b005b61026d610893565b005b6102896004803603810190610284919061270c565b6108c8565b005b610293610a6f565b6040516102a09190612be5565b60405180910390f35b6102b1610a86565b6040516102be9190612d5d565b60405180910390f35b6102cf610a90565b005b6102d9610b18565b6040516102e69190612c00565b60405180910390f35b6102f7610b3c565b005b610301610b71565b60405161030e9190612aee565b60405180910390f35b610331600480360381019061032c91906127d6565b610b9b565b60405161033e9190612aee565b60405180910390f35b610361600480360381019061035c919061279a565b610bca565b60405161036e9190612be5565b60405180910390f35b61037f610c34565b60405161038c9190612d5d565b60405180910390f35b61039d610c3e565b6040516103aa9190612c00565b60405180910390f35b6103cd60048036038101906103c8919061283b565b610c45565b005b6103e960048036038101906103e49190612771565b610f69565b6040516103f69190612d5d565b60405180910390f35b6104196004803603810190610414919061279a565b610f8d565b005b6104356004803603810190610430919061283b565b610fae565b005b610451600480360381019061044c91906126e3565b611384565b60405161045e9190612d5d565b60405180910390f35b61046f6113cd565b60405161047c9190612c00565b60405180910390f35b61048d6113f1565b60405161049a9190612d5d565b60405180910390f35b6104bd60048036038101906104b891906126e3565b6113fb565b005b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610532575061053182611666565b5b9050919050565b6000600b54905090565b6000806000838152602001908152602001600020600101549050919050565b61056a610a6f565b156105aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a190612c9d565b60405180910390fd5b60006105b46116e0565b905081600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561062f576040517fdb73cdf000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610638826116e8565b61068a82600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117d590919063ffffffff16565b600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82846040518363ffffffff1660e01b815260040161072a929190612b40565b602060405180830381600087803b15801561074457600080fd5b505af1158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190612748565b6107b2576040517f750b219c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f84e742a3ea03623687a5febaa797636d728230721d4b3d1405d19fbbc16298d981836040516107e3929190612b40565b60405180910390a15050565b6107f882610543565b610801816117eb565b61080b83836117ff565b505050565b6108186116e0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610885576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087c90612d3d565b60405180910390fd5b61088f82826118a3565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6108bd816117eb565b6108c5611947565b50565b6108d0610a6f565b15610910576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090790612c9d565b60405180910390fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561093a816117eb565b610943826116e8565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b81526004016109a0929190612b40565b602060405180830381600087803b1580156109ba57600080fd5b505af11580156109ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f29190612748565b610a28576040517fe146438900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f5f1e6e75f939066676897a7e8731d3286ac6abab221d260194e7ea956e2e2eed610a516116e0565b8484604051610a6293929190612b09565b60405180910390a1505050565b6000600260149054906101000a900460ff16905090565b6000600a54905090565b610a986116e0565b73ffffffffffffffffffffffffffffffffffffffff16610ab6610b71565b73ffffffffffffffffffffffffffffffffffffffff1614610b0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0390612cdd565b60405180910390fd5b610b1660006119e9565b565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610b66816117eb565b610b6e611aaf565b50565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610bc28260016000868152602001908152602001600020611b5290919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600854905090565b6000801b81565b60026003541415610c8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8290612d1d565b60405180910390fd5b6002600381905550600b544210610cdb57600b546040517f691e5682000000000000000000000000000000000000000000000000000000008152600401610cd29190612d5d565b60405180910390fd5b610ce3610a6f565b15610d23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1a90612c9d565b60405180910390fd5b6000610d2d6116e0565b90506000610d5e6509184e72a000610d50600a5486611b6c90919063ffffffff16565b611b8290919063ffffffff16565b90506000811415610d9b576040517f6e99268600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8330866040518463ffffffff1660e01b8152600401610dfa93929190612b09565b602060405180830381600087803b158015610e1457600080fd5b505af1158015610e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4c9190612748565b610e82576040517f79cacff100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e8c8282611b98565b610ede83600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cc990919063ffffffff16565b600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f61bb8b82654398e0bdd4e0d489b5e9104b6840211fd89f7264264c96589051fd828483604051610f5493929190612b69565b60405180910390a15050600160038190555050565b6000610f8660016000848152602001908152602001600020611cdf565b9050919050565b610f9682610543565b610f9f816117eb565b610fa983836118a3565b505050565b60026003541415610ff4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610feb90612d1d565b60405180910390fd5b6002600381905550611004610a6f565b15611044576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103b90612c9d565b60405180910390fd5b670de0b6b3a7640000811015611086576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006110906116e0565b905061109c8183611cf4565b60006110ca64174876e8006110bc60085486611b6c90919063ffffffff16565b611b8290919063ffffffff16565b90506110d5816116e8565b60006111046509184e72a0006110f660095485611b6c90919063ffffffff16565b611b8290919063ffffffff16565b90506000811415611141576040517f6e99268600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd84600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518463ffffffff1660e01b81526004016111c293929190612b09565b602060405180830381600087803b1580156111dc57600080fd5b505af11580156111f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112149190612748565b61124a576040517f2d8ef0cf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b81526004016112a7929190612b40565b602060405180830381600087803b1580156112c157600080fd5b505af11580156112d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f99190612748565b61132f576040517f46e95fd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113398382611b98565b7f333d31babb882d300a2175cd3cb272cf6c099241021c22af2699242f92f4ff4f8385848460405161136e9493929190612ba0565b60405180910390a1505050600160038190555050565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000600954905090565b6114036116e0565b73ffffffffffffffffffffffffffffffffffffffff16611421610b71565b73ffffffffffffffffffffffffffffffffffffffff1614611477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146e90612cdd565b60405180910390fd5b6114a17fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775826117ff565b6114ae6000801b826117ff565b6114df7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756114da610b71565b6118a3565b6114f36000801b6114ee610b71565b6118a3565b6114fc81611dac565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b61152c8282611556565b611551816001600085815260200190815260200160002061163690919063ffffffff16565b505050565b6115608282610bca565b61163257600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506115d76116e0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600061165e836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611ea4565b905092915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806116d957506116d882611f14565b5b9050919050565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016117459190612aee565b60206040518083038186803b15801561175d57600080fd5b505afa158015611771573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117959190612864565b9050818110156117d1576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600081836117e39190612e80565b905092915050565b6117fc816117f76116e0565b611f7e565b50565b6118098282611522565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582148061183957506000801b82145b1561189f576118687f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a82611522565b6000801b82141561189e5761189d7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582611522565b5b5b5050565b6118ad828261201b565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758214806118dd57506000801b82145b156119435761190c7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8261201b565b6000801b821415611942576119417fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582611522565b5b5b5050565b61194f610a6f565b61198e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198590612c5d565b60405180910390fd5b6000600260146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6119d26116e0565b6040516119df9190612aee565b60405180910390a1565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611ab7610a6f565b15611af7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aee90612c9d565b60405180910390fd5b6001600260146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b3b6116e0565b604051611b489190612aee565b60405180910390a1565b6000611b61836000018361204f565b60001c905092915050565b60008183611b7a9190612e26565b905092915050565b60008183611b909190612df5565b905092915050565b611ba0610a6f565b15611be0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd790612c9d565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401611c3d929190612b40565b602060405180830381600087803b158015611c5757600080fd5b505af1158015611c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8f9190612748565b611cc5576040517fd48c254700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60008183611cd79190612d9f565b905092915050565b6000611ced826000016120a0565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5b90612cbd565b60405180910390fd5b6000811415611da8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9f90612cfd565b60405180910390fd5b5050565b611db46116e0565b73ffffffffffffffffffffffffffffffffffffffff16611dd2610b71565b73ffffffffffffffffffffffffffffffffffffffff1614611e28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1f90612cdd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611e98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8f90612c7d565b60405180910390fd5b611ea1816119e9565b50565b6000611eb083836120b1565b611f09578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611f0e565b600090505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611f888282610bca565b61201757611fad8173ffffffffffffffffffffffffffffffffffffffff1660146120d4565b611fbb8360001c60206120d4565b604051602001611fcc929190612ab4565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200e9190612c1b565b60405180910390fd5b5050565b61202582826123ce565b61204a81600160008581526020019081526020016000206124af90919063ffffffff16565b505050565b600082600001828154811061208d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b6060600060028360026120e79190612e26565b6120f19190612d9f565b67ffffffffffffffff811115612130577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156121625781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106121c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061224a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261228a9190612e26565b6122949190612d9f565b90505b6001811115612380577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106122fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110612339577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061237990612f65565b9050612297565b50600084146123c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123bb90612c3d565b60405180910390fd5b8091505092915050565b6123d88282610bca565b156124ab57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506124506116e0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60006124d7836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6124df565b905092915050565b600080836001016000848152602001908152602001600020549050600081146126595760006001826125119190612e80565b90506000600186600001805490506125299190612e80565b90508181146125e4576000866000018281548110612570577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050808760000184815481106125ba577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061261e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061265f565b60009150505b92915050565b6000813590506126748161320d565b92915050565b60008151905061268981613224565b92915050565b60008135905061269e8161323b565b92915050565b6000813590506126b381613252565b92915050565b6000813590506126c881613269565b92915050565b6000815190506126dd81613269565b92915050565b6000602082840312156126f557600080fd5b600061270384828501612665565b91505092915050565b6000806040838503121561271f57600080fd5b600061272d85828601612665565b925050602061273e858286016126b9565b9150509250929050565b60006020828403121561275a57600080fd5b60006127688482850161267a565b91505092915050565b60006020828403121561278357600080fd5b60006127918482850161268f565b91505092915050565b600080604083850312156127ad57600080fd5b60006127bb8582860161268f565b92505060206127cc85828601612665565b9150509250929050565b600080604083850312156127e957600080fd5b60006127f78582860161268f565b9250506020612808858286016126b9565b9150509250929050565b60006020828403121561282457600080fd5b6000612832848285016126a4565b91505092915050565b60006020828403121561284d57600080fd5b600061285b848285016126b9565b91505092915050565b60006020828403121561287657600080fd5b6000612884848285016126ce565b91505092915050565b61289681612eb4565b82525050565b6128a581612ec6565b82525050565b6128b481612ed2565b82525050565b60006128c582612d78565b6128cf8185612d83565b93506128df818560208601612f32565b6128e881612fed565b840191505092915050565b60006128fe82612d78565b6129088185612d94565b9350612918818560208601612f32565b80840191505092915050565b6000612931602083612d83565b915061293c82612ffe565b602082019050919050565b6000612954601483612d83565b915061295f82613027565b602082019050919050565b6000612977602683612d83565b915061298282613050565b604082019050919050565b600061299a601083612d83565b91506129a58261309f565b602082019050919050565b60006129bd601383612d83565b91506129c8826130c8565b602082019050919050565b60006129e0602083612d83565b91506129eb826130f1565b602082019050919050565b6000612a03600783612d83565b9150612a0e8261311a565b602082019050919050565b6000612a26601783612d94565b9150612a3182613143565b601782019050919050565b6000612a49601f83612d83565b9150612a548261316c565b602082019050919050565b6000612a6c601183612d94565b9150612a7782613195565b601182019050919050565b6000612a8f602f83612d83565b9150612a9a826131be565b604082019050919050565b612aae81612f28565b82525050565b6000612abf82612a19565b9150612acb82856128f3565b9150612ad682612a5f565b9150612ae282846128f3565b91508190509392505050565b6000602082019050612b03600083018461288d565b92915050565b6000606082019050612b1e600083018661288d565b612b2b602083018561288d565b612b386040830184612aa5565b949350505050565b6000604082019050612b55600083018561288d565b612b626020830184612aa5565b9392505050565b6000606082019050612b7e600083018661288d565b612b8b6020830185612aa5565b612b986040830184612aa5565b949350505050565b6000608082019050612bb5600083018761288d565b612bc26020830186612aa5565b612bcf6040830185612aa5565b612bdc6060830184612aa5565b95945050505050565b6000602082019050612bfa600083018461289c565b92915050565b6000602082019050612c1560008301846128ab565b92915050565b60006020820190508181036000830152612c3581846128ba565b905092915050565b60006020820190508181036000830152612c5681612924565b9050919050565b60006020820190508181036000830152612c7681612947565b9050919050565b60006020820190508181036000830152612c968161296a565b9050919050565b60006020820190508181036000830152612cb68161298d565b9050919050565b60006020820190508181036000830152612cd6816129b0565b9050919050565b60006020820190508181036000830152612cf6816129d3565b9050919050565b60006020820190508181036000830152612d16816129f6565b9050919050565b60006020820190508181036000830152612d3681612a3c565b9050919050565b60006020820190508181036000830152612d5681612a82565b9050919050565b6000602082019050612d726000830184612aa5565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000612daa82612f28565b9150612db583612f28565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612dea57612de9612f8f565b5b828201905092915050565b6000612e0082612f28565b9150612e0b83612f28565b925082612e1b57612e1a612fbe565b5b828204905092915050565b6000612e3182612f28565b9150612e3c83612f28565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612e7557612e74612f8f565b5b828202905092915050565b6000612e8b82612f28565b9150612e9683612f28565b925082821015612ea957612ea8612f8f565b5b828203905092915050565b6000612ebf82612f08565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015612f50578082015181840152602081019050612f35565b83811115612f5f576000848401525b50505050565b6000612f7082612f28565b91506000821415612f8457612f83612f8f565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f496e76616c69642062656e656669636961727900000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f496e76616c696400000000000000000000000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b61321681612eb4565b811461322157600080fd5b50565b61322d81612ec6565b811461323857600080fd5b50565b61324481612ed2565b811461324f57600080fd5b50565b61325b81612edc565b811461326657600080fd5b50565b61327281612f28565b811461327d57600080fd5b5056fea2646970667358221220067e1ece036e5de9ea0a233c77d3ca9f38ae42bcbdb88d47f0d9dbe3363c31ba64736f6c63430008040033",
}

// LuckyVaultABI is the input ABI used to generate the binding from.
// Deprecated: Use LuckyVaultMetaData.ABI instead.
var LuckyVaultABI = LuckyVaultMetaData.ABI

// LuckyVaultBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LuckyVaultMetaData.Bin instead.
var LuckyVaultBin = LuckyVaultMetaData.Bin

// DeployLuckyVault deploys a new Ethereum contract, binding an instance of LuckyVault to it.
func DeployLuckyVault(auth *bind.TransactOpts, backend bind.ContractBackend, tradeToken common.Address, depositToken common.Address, rewardToken common.Address, receiver common.Address, endedAt *big.Int) (common.Address, *types.Transaction, *LuckyVault, error) {
	parsed, err := LuckyVaultMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LuckyVaultBin), backend, tradeToken, depositToken, rewardToken, receiver, endedAt)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LuckyVault{LuckyVaultCaller: LuckyVaultCaller{contract: contract}, LuckyVaultTransactor: LuckyVaultTransactor{contract: contract}, LuckyVaultFilterer: LuckyVaultFilterer{contract: contract}}, nil
}

// LuckyVault is an auto generated Go binding around an Ethereum contract.
type LuckyVault struct {
	LuckyVaultCaller     // Read-only binding to the contract
	LuckyVaultTransactor // Write-only binding to the contract
	LuckyVaultFilterer   // Log filterer for contract events
}

// LuckyVaultCaller is an auto generated read-only Go binding around an Ethereum contract.
type LuckyVaultCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LuckyVaultTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LuckyVaultTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LuckyVaultFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LuckyVaultFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LuckyVaultSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LuckyVaultSession struct {
	Contract     *LuckyVault       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LuckyVaultCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LuckyVaultCallerSession struct {
	Contract *LuckyVaultCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// LuckyVaultTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LuckyVaultTransactorSession struct {
	Contract     *LuckyVaultTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// LuckyVaultRaw is an auto generated low-level Go binding around an Ethereum contract.
type LuckyVaultRaw struct {
	Contract *LuckyVault // Generic contract binding to access the raw methods on
}

// LuckyVaultCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LuckyVaultCallerRaw struct {
	Contract *LuckyVaultCaller // Generic read-only contract binding to access the raw methods on
}

// LuckyVaultTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LuckyVaultTransactorRaw struct {
	Contract *LuckyVaultTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLuckyVault creates a new instance of LuckyVault, bound to a specific deployed contract.
func NewLuckyVault(address common.Address, backend bind.ContractBackend) (*LuckyVault, error) {
	contract, err := bindLuckyVault(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LuckyVault{LuckyVaultCaller: LuckyVaultCaller{contract: contract}, LuckyVaultTransactor: LuckyVaultTransactor{contract: contract}, LuckyVaultFilterer: LuckyVaultFilterer{contract: contract}}, nil
}

// NewLuckyVaultCaller creates a new read-only instance of LuckyVault, bound to a specific deployed contract.
func NewLuckyVaultCaller(address common.Address, caller bind.ContractCaller) (*LuckyVaultCaller, error) {
	contract, err := bindLuckyVault(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LuckyVaultCaller{contract: contract}, nil
}

// NewLuckyVaultTransactor creates a new write-only instance of LuckyVault, bound to a specific deployed contract.
func NewLuckyVaultTransactor(address common.Address, transactor bind.ContractTransactor) (*LuckyVaultTransactor, error) {
	contract, err := bindLuckyVault(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LuckyVaultTransactor{contract: contract}, nil
}

// NewLuckyVaultFilterer creates a new log filterer instance of LuckyVault, bound to a specific deployed contract.
func NewLuckyVaultFilterer(address common.Address, filterer bind.ContractFilterer) (*LuckyVaultFilterer, error) {
	contract, err := bindLuckyVault(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LuckyVaultFilterer{contract: contract}, nil
}

// bindLuckyVault binds a generic wrapper to an already deployed contract.
func bindLuckyVault(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LuckyVaultABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LuckyVault *LuckyVaultRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LuckyVault.Contract.LuckyVaultCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LuckyVault *LuckyVaultRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LuckyVault.Contract.LuckyVaultTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LuckyVault *LuckyVaultRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LuckyVault.Contract.LuckyVaultTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LuckyVault *LuckyVaultCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LuckyVault.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LuckyVault *LuckyVaultTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LuckyVault.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LuckyVault *LuckyVaultTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LuckyVault.Contract.contract.Transact(opts, method, params...)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_LuckyVault *LuckyVaultCaller) ADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LuckyVault.contract.Call(opts, &out, "ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_LuckyVault *LuckyVaultSession) ADMINROLE() ([32]byte, error) {
	return _LuckyVault.Contract.ADMINROLE(&_LuckyVault.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_LuckyVault *LuckyVaultCallerSession) ADMINROLE() ([32]byte, error) {
	return _LuckyVault.Contract.ADMINROLE(&_LuckyVault.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_LuckyVault *LuckyVaultCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LuckyVault.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_LuckyVault *LuckyVaultSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _LuckyVault.Contract.DEFAULTADMINROLE(&_LuckyVault.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_LuckyVault *LuckyVaultCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _LuckyVault.Contract.DEFAULTADMINROLE(&_LuckyVault.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_LuckyVault *LuckyVaultCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LuckyVault.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_LuckyVault *LuckyVaultSession) PAUSERROLE() ([32]byte, error) {
	return _LuckyVault.Contract.PAUSERROLE(&_LuckyVault.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_LuckyVault *LuckyVaultCallerSession) PAUSERROLE() ([32]byte, error) {
	return _LuckyVault.Contract.PAUSERROLE(&_LuckyVault.CallOpts)
}

// GetDeposit is a free data retrieval call binding the contract method 0xe1254fba.
//
// Solidity: function getDeposit(address owner) view returns(uint256)
func (_LuckyVault *LuckyVaultCaller) GetDeposit(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LuckyVault.contract.Call(opts, &out, "getDeposit", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDeposit is a free data retrieval call binding the contract method 0xe1254fba.
//
// Solidity: function getDeposit(address owner) view returns(uint256)
func (_LuckyVault *LuckyVaultSession) GetDeposit(owner common.Address) (*big.Int, error) {
	return _LuckyVault.Contract.GetDeposit(&_LuckyVault.CallOpts, owner)
}

// GetDeposit is a free data retrieval call binding the contract method 0xe1254fba.
//
// Solidity: function getDeposit(address owner) view returns(uint256)
func (_LuckyVault *LuckyVaultCallerSession) GetDeposit(owner common.Address) (*big.Int, error) {
	return _LuckyVault.Contract.GetDeposit(&_LuckyVault.CallOpts, owner)
}

// GetDepositRewardRate is a free data retrieval call binding the contract method 0x6f15f646.
//
// Solidity: function getDepositRewardRate() view returns(uint256)
func (_LuckyVault *LuckyVaultCaller) GetDepositRewardRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LuckyVault.contract.Call(opts, &out, "getDepositRewardRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDepositRewardRate is a free data retrieval call binding the contract method 0x6f15f646.
//
// Solidity: function getDepositRewardRate() view returns(uint256)
func (_LuckyVault *LuckyVaultSession) GetDepositRewardRate() (*big.Int, error) {
	return _LuckyVault.Contract.GetDepositRewardRate(&_LuckyVault.CallOpts)
}

// GetDepositRewardRate is a free data retrieval call binding the contract method 0x6f15f646.
//
// Solidity: function getDepositRewardRate() view returns(uint256)
func (_LuckyVault *LuckyVaultCallerSession) GetDepositRewardRate() (*big.Int, error) {
	return _LuckyVault.Contract.GetDepositRewardRate(&_LuckyVault.CallOpts)
}

// GetEndedAt is a free data retrieval call binding the contract method 0x1906ab9b.
//
// Solidity: function getEndedAt() view returns(uint256)
func (_LuckyVault *LuckyVaultCaller) GetEndedAt(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LuckyVault.contract.Call(opts, &out, "getEndedAt")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEndedAt is a free data retrieval call binding the contract method 0x1906ab9b.
//
// Solidity: function getEndedAt() view returns(uint256)
func (_LuckyVault *LuckyVaultSession) GetEndedAt() (*big.Int, error) {
	return _LuckyVault.Contract.GetEndedAt(&_LuckyVault.CallOpts)
}

// GetEndedAt is a free data retrieval call binding the contract method 0x1906ab9b.
//
// Solidity: function getEndedAt() view returns(uint256)
func (_LuckyVault *LuckyVaultCallerSession) GetEndedAt() (*big.Int, error) {
	return _LuckyVault.Contract.GetEndedAt(&_LuckyVault.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_LuckyVault *LuckyVaultCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _LuckyVault.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_LuckyVault *LuckyVaultSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _LuckyVault.Contract.GetRoleAdmin(&_LuckyVault.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_LuckyVault *LuckyVaultCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _LuckyVault.Contract.GetRoleAdmin(&_LuckyVault.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_LuckyVault *LuckyVaultCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _LuckyVault.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_LuckyVault *LuckyVaultSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _LuckyVault.Contract.GetRoleMember(&_LuckyVault.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_LuckyVault *LuckyVaultCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _LuckyVault.Contract.GetRoleMember(&_LuckyVault.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_LuckyVault *LuckyVaultCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _LuckyVault.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_LuckyVault *LuckyVaultSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _LuckyVault.Contract.GetRoleMemberCount(&_LuckyVault.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_LuckyVault *LuckyVaultCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _LuckyVault.Contract.GetRoleMemberCount(&_LuckyVault.CallOpts, role)
}

// GetTradeRate is a free data retrieval call binding the contract method 0x9fcfe0e4.
//
// Solidity: function getTradeRate() view returns(uint256)
func (_LuckyVault *LuckyVaultCaller) GetTradeRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LuckyVault.contract.Call(opts, &out, "getTradeRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTradeRate is a free data retrieval call binding the contract method 0x9fcfe0e4.
//
// Solidity: function getTradeRate() view returns(uint256)
func (_LuckyVault *LuckyVaultSession) GetTradeRate() (*big.Int, error) {
	return _LuckyVault.Contract.GetTradeRate(&_LuckyVault.CallOpts)
}

// GetTradeRate is a free data retrieval call binding the contract method 0x9fcfe0e4.
//
// Solidity: function getTradeRate() view returns(uint256)
func (_LuckyVault *LuckyVaultCallerSession) GetTradeRate() (*big.Int, error) {
	return _LuckyVault.Contract.GetTradeRate(&_LuckyVault.CallOpts)
}

// GetTradeRewardRate is a free data retrieval call binding the contract method 0xe8fcc067.
//
// Solidity: function getTradeRewardRate() view returns(uint256)
func (_LuckyVault *LuckyVaultCaller) GetTradeRewardRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LuckyVault.contract.Call(opts, &out, "getTradeRewardRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTradeRewardRate is a free data retrieval call binding the contract method 0xe8fcc067.
//
// Solidity: function getTradeRewardRate() view returns(uint256)
func (_LuckyVault *LuckyVaultSession) GetTradeRewardRate() (*big.Int, error) {
	return _LuckyVault.Contract.GetTradeRewardRate(&_LuckyVault.CallOpts)
}

// GetTradeRewardRate is a free data retrieval call binding the contract method 0xe8fcc067.
//
// Solidity: function getTradeRewardRate() view returns(uint256)
func (_LuckyVault *LuckyVaultCallerSession) GetTradeRewardRate() (*big.Int, error) {
	return _LuckyVault.Contract.GetTradeRewardRate(&_LuckyVault.CallOpts)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_LuckyVault *LuckyVaultCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _LuckyVault.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_LuckyVault *LuckyVaultSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _LuckyVault.Contract.HasRole(&_LuckyVault.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_LuckyVault *LuckyVaultCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _LuckyVault.Contract.HasRole(&_LuckyVault.CallOpts, role, account)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LuckyVault *LuckyVaultCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LuckyVault.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LuckyVault *LuckyVaultSession) Owner() (common.Address, error) {
	return _LuckyVault.Contract.Owner(&_LuckyVault.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LuckyVault *LuckyVaultCallerSession) Owner() (common.Address, error) {
	return _LuckyVault.Contract.Owner(&_LuckyVault.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LuckyVault *LuckyVaultCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _LuckyVault.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LuckyVault *LuckyVaultSession) Paused() (bool, error) {
	return _LuckyVault.Contract.Paused(&_LuckyVault.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LuckyVault *LuckyVaultCallerSession) Paused() (bool, error) {
	return _LuckyVault.Contract.Paused(&_LuckyVault.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_LuckyVault *LuckyVaultCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _LuckyVault.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_LuckyVault *LuckyVaultSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _LuckyVault.Contract.SupportsInterface(&_LuckyVault.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_LuckyVault *LuckyVaultCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _LuckyVault.Contract.SupportsInterface(&_LuckyVault.CallOpts, interfaceId)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns()
func (_LuckyVault *LuckyVaultTransactor) Deposit(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _LuckyVault.contract.Transact(opts, "deposit", amount)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns()
func (_LuckyVault *LuckyVaultSession) Deposit(amount *big.Int) (*types.Transaction, error) {
	return _LuckyVault.Contract.Deposit(&_LuckyVault.TransactOpts, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns()
func (_LuckyVault *LuckyVaultTransactorSession) Deposit(amount *big.Int) (*types.Transaction, error) {
	return _LuckyVault.Contract.Deposit(&_LuckyVault.TransactOpts, amount)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_LuckyVault *LuckyVaultTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LuckyVault.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_LuckyVault *LuckyVaultSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LuckyVault.Contract.GrantRole(&_LuckyVault.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_LuckyVault *LuckyVaultTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LuckyVault.Contract.GrantRole(&_LuckyVault.TransactOpts, role, account)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_LuckyVault *LuckyVaultTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LuckyVault.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_LuckyVault *LuckyVaultSession) Pause() (*types.Transaction, error) {
	return _LuckyVault.Contract.Pause(&_LuckyVault.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_LuckyVault *LuckyVaultTransactorSession) Pause() (*types.Transaction, error) {
	return _LuckyVault.Contract.Pause(&_LuckyVault.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LuckyVault *LuckyVaultTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LuckyVault.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LuckyVault *LuckyVaultSession) RenounceOwnership() (*types.Transaction, error) {
	return _LuckyVault.Contract.RenounceOwnership(&_LuckyVault.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LuckyVault *LuckyVaultTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _LuckyVault.Contract.RenounceOwnership(&_LuckyVault.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_LuckyVault *LuckyVaultTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LuckyVault.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_LuckyVault *LuckyVaultSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LuckyVault.Contract.RenounceRole(&_LuckyVault.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_LuckyVault *LuckyVaultTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LuckyVault.Contract.RenounceRole(&_LuckyVault.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_LuckyVault *LuckyVaultTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LuckyVault.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_LuckyVault *LuckyVaultSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LuckyVault.Contract.RevokeRole(&_LuckyVault.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_LuckyVault *LuckyVaultTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LuckyVault.Contract.RevokeRole(&_LuckyVault.TransactOpts, role, account)
}

// Trade is a paid mutator transaction binding the contract method 0xdf1dd826.
//
// Solidity: function trade(uint256 amount) returns()
func (_LuckyVault *LuckyVaultTransactor) Trade(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _LuckyVault.contract.Transact(opts, "trade", amount)
}

// Trade is a paid mutator transaction binding the contract method 0xdf1dd826.
//
// Solidity: function trade(uint256 amount) returns()
func (_LuckyVault *LuckyVaultSession) Trade(amount *big.Int) (*types.Transaction, error) {
	return _LuckyVault.Contract.Trade(&_LuckyVault.TransactOpts, amount)
}

// Trade is a paid mutator transaction binding the contract method 0xdf1dd826.
//
// Solidity: function trade(uint256 amount) returns()
func (_LuckyVault *LuckyVaultTransactorSession) Trade(amount *big.Int) (*types.Transaction, error) {
	return _LuckyVault.Contract.Trade(&_LuckyVault.TransactOpts, amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LuckyVault *LuckyVaultTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _LuckyVault.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LuckyVault *LuckyVaultSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LuckyVault.Contract.TransferOwnership(&_LuckyVault.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LuckyVault *LuckyVaultTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LuckyVault.Contract.TransferOwnership(&_LuckyVault.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_LuckyVault *LuckyVaultTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LuckyVault.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_LuckyVault *LuckyVaultSession) Unpause() (*types.Transaction, error) {
	return _LuckyVault.Contract.Unpause(&_LuckyVault.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_LuckyVault *LuckyVaultTransactorSession) Unpause() (*types.Transaction, error) {
	return _LuckyVault.Contract.Unpause(&_LuckyVault.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_LuckyVault *LuckyVaultTransactor) Withdraw(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _LuckyVault.contract.Transact(opts, "withdraw", amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_LuckyVault *LuckyVaultSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _LuckyVault.Contract.Withdraw(&_LuckyVault.TransactOpts, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_LuckyVault *LuckyVaultTransactorSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _LuckyVault.Contract.Withdraw(&_LuckyVault.TransactOpts, amount)
}

// WithdrawByAdmin is a paid mutator transaction binding the contract method 0x487c3580.
//
// Solidity: function withdrawByAdmin(address receiver, uint256 amount) returns()
func (_LuckyVault *LuckyVaultTransactor) WithdrawByAdmin(opts *bind.TransactOpts, receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LuckyVault.contract.Transact(opts, "withdrawByAdmin", receiver, amount)
}

// WithdrawByAdmin is a paid mutator transaction binding the contract method 0x487c3580.
//
// Solidity: function withdrawByAdmin(address receiver, uint256 amount) returns()
func (_LuckyVault *LuckyVaultSession) WithdrawByAdmin(receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LuckyVault.Contract.WithdrawByAdmin(&_LuckyVault.TransactOpts, receiver, amount)
}

// WithdrawByAdmin is a paid mutator transaction binding the contract method 0x487c3580.
//
// Solidity: function withdrawByAdmin(address receiver, uint256 amount) returns()
func (_LuckyVault *LuckyVaultTransactorSession) WithdrawByAdmin(receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LuckyVault.Contract.WithdrawByAdmin(&_LuckyVault.TransactOpts, receiver, amount)
}

// LuckyVaultAdminWithdrawSuccessfulIterator is returned from FilterAdminWithdrawSuccessful and is used to iterate over the raw logs and unpacked data for AdminWithdrawSuccessful events raised by the LuckyVault contract.
type LuckyVaultAdminWithdrawSuccessfulIterator struct {
	Event *LuckyVaultAdminWithdrawSuccessful // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LuckyVaultAdminWithdrawSuccessfulIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LuckyVaultAdminWithdrawSuccessful)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LuckyVaultAdminWithdrawSuccessful)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LuckyVaultAdminWithdrawSuccessfulIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LuckyVaultAdminWithdrawSuccessfulIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LuckyVaultAdminWithdrawSuccessful represents a AdminWithdrawSuccessful event raised by the LuckyVault contract.
type LuckyVaultAdminWithdrawSuccessful struct {
	Sender   common.Address
	Receiver common.Address
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterAdminWithdrawSuccessful is a free log retrieval operation binding the contract event 0x5f1e6e75f939066676897a7e8731d3286ac6abab221d260194e7ea956e2e2eed.
//
// Solidity: event AdminWithdrawSuccessful(address sender, address receiver, uint256 amount)
func (_LuckyVault *LuckyVaultFilterer) FilterAdminWithdrawSuccessful(opts *bind.FilterOpts) (*LuckyVaultAdminWithdrawSuccessfulIterator, error) {

	logs, sub, err := _LuckyVault.contract.FilterLogs(opts, "AdminWithdrawSuccessful")
	if err != nil {
		return nil, err
	}
	return &LuckyVaultAdminWithdrawSuccessfulIterator{contract: _LuckyVault.contract, event: "AdminWithdrawSuccessful", logs: logs, sub: sub}, nil
}

// WatchAdminWithdrawSuccessful is a free log subscription operation binding the contract event 0x5f1e6e75f939066676897a7e8731d3286ac6abab221d260194e7ea956e2e2eed.
//
// Solidity: event AdminWithdrawSuccessful(address sender, address receiver, uint256 amount)
func (_LuckyVault *LuckyVaultFilterer) WatchAdminWithdrawSuccessful(opts *bind.WatchOpts, sink chan<- *LuckyVaultAdminWithdrawSuccessful) (event.Subscription, error) {

	logs, sub, err := _LuckyVault.contract.WatchLogs(opts, "AdminWithdrawSuccessful")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LuckyVaultAdminWithdrawSuccessful)
				if err := _LuckyVault.contract.UnpackLog(event, "AdminWithdrawSuccessful", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminWithdrawSuccessful is a log parse operation binding the contract event 0x5f1e6e75f939066676897a7e8731d3286ac6abab221d260194e7ea956e2e2eed.
//
// Solidity: event AdminWithdrawSuccessful(address sender, address receiver, uint256 amount)
func (_LuckyVault *LuckyVaultFilterer) ParseAdminWithdrawSuccessful(log types.Log) (*LuckyVaultAdminWithdrawSuccessful, error) {
	event := new(LuckyVaultAdminWithdrawSuccessful)
	if err := _LuckyVault.contract.UnpackLog(event, "AdminWithdrawSuccessful", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LuckyVaultDepositSuccessfulIterator is returned from FilterDepositSuccessful and is used to iterate over the raw logs and unpacked data for DepositSuccessful events raised by the LuckyVault contract.
type LuckyVaultDepositSuccessfulIterator struct {
	Event *LuckyVaultDepositSuccessful // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LuckyVaultDepositSuccessfulIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LuckyVaultDepositSuccessful)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LuckyVaultDepositSuccessful)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LuckyVaultDepositSuccessfulIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LuckyVaultDepositSuccessfulIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LuckyVaultDepositSuccessful represents a DepositSuccessful event raised by the LuckyVault contract.
type LuckyVaultDepositSuccessful struct {
	Sender       common.Address
	Amount       *big.Int
	RewardAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDepositSuccessful is a free log retrieval operation binding the contract event 0x61bb8b82654398e0bdd4e0d489b5e9104b6840211fd89f7264264c96589051fd.
//
// Solidity: event DepositSuccessful(address sender, uint256 amount, uint256 rewardAmount)
func (_LuckyVault *LuckyVaultFilterer) FilterDepositSuccessful(opts *bind.FilterOpts) (*LuckyVaultDepositSuccessfulIterator, error) {

	logs, sub, err := _LuckyVault.contract.FilterLogs(opts, "DepositSuccessful")
	if err != nil {
		return nil, err
	}
	return &LuckyVaultDepositSuccessfulIterator{contract: _LuckyVault.contract, event: "DepositSuccessful", logs: logs, sub: sub}, nil
}

// WatchDepositSuccessful is a free log subscription operation binding the contract event 0x61bb8b82654398e0bdd4e0d489b5e9104b6840211fd89f7264264c96589051fd.
//
// Solidity: event DepositSuccessful(address sender, uint256 amount, uint256 rewardAmount)
func (_LuckyVault *LuckyVaultFilterer) WatchDepositSuccessful(opts *bind.WatchOpts, sink chan<- *LuckyVaultDepositSuccessful) (event.Subscription, error) {

	logs, sub, err := _LuckyVault.contract.WatchLogs(opts, "DepositSuccessful")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LuckyVaultDepositSuccessful)
				if err := _LuckyVault.contract.UnpackLog(event, "DepositSuccessful", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositSuccessful is a log parse operation binding the contract event 0x61bb8b82654398e0bdd4e0d489b5e9104b6840211fd89f7264264c96589051fd.
//
// Solidity: event DepositSuccessful(address sender, uint256 amount, uint256 rewardAmount)
func (_LuckyVault *LuckyVaultFilterer) ParseDepositSuccessful(log types.Log) (*LuckyVaultDepositSuccessful, error) {
	event := new(LuckyVaultDepositSuccessful)
	if err := _LuckyVault.contract.UnpackLog(event, "DepositSuccessful", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LuckyVaultOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the LuckyVault contract.
type LuckyVaultOwnershipTransferredIterator struct {
	Event *LuckyVaultOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LuckyVaultOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LuckyVaultOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LuckyVaultOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LuckyVaultOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LuckyVaultOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LuckyVaultOwnershipTransferred represents a OwnershipTransferred event raised by the LuckyVault contract.
type LuckyVaultOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LuckyVault *LuckyVaultFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*LuckyVaultOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LuckyVault.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &LuckyVaultOwnershipTransferredIterator{contract: _LuckyVault.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LuckyVault *LuckyVaultFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *LuckyVaultOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LuckyVault.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LuckyVaultOwnershipTransferred)
				if err := _LuckyVault.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LuckyVault *LuckyVaultFilterer) ParseOwnershipTransferred(log types.Log) (*LuckyVaultOwnershipTransferred, error) {
	event := new(LuckyVaultOwnershipTransferred)
	if err := _LuckyVault.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LuckyVaultPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the LuckyVault contract.
type LuckyVaultPausedIterator struct {
	Event *LuckyVaultPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LuckyVaultPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LuckyVaultPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LuckyVaultPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LuckyVaultPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LuckyVaultPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LuckyVaultPaused represents a Paused event raised by the LuckyVault contract.
type LuckyVaultPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_LuckyVault *LuckyVaultFilterer) FilterPaused(opts *bind.FilterOpts) (*LuckyVaultPausedIterator, error) {

	logs, sub, err := _LuckyVault.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &LuckyVaultPausedIterator{contract: _LuckyVault.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_LuckyVault *LuckyVaultFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *LuckyVaultPaused) (event.Subscription, error) {

	logs, sub, err := _LuckyVault.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LuckyVaultPaused)
				if err := _LuckyVault.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_LuckyVault *LuckyVaultFilterer) ParsePaused(log types.Log) (*LuckyVaultPaused, error) {
	event := new(LuckyVaultPaused)
	if err := _LuckyVault.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LuckyVaultRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the LuckyVault contract.
type LuckyVaultRoleAdminChangedIterator struct {
	Event *LuckyVaultRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LuckyVaultRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LuckyVaultRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LuckyVaultRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LuckyVaultRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LuckyVaultRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LuckyVaultRoleAdminChanged represents a RoleAdminChanged event raised by the LuckyVault contract.
type LuckyVaultRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_LuckyVault *LuckyVaultFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*LuckyVaultRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _LuckyVault.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &LuckyVaultRoleAdminChangedIterator{contract: _LuckyVault.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_LuckyVault *LuckyVaultFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *LuckyVaultRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _LuckyVault.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LuckyVaultRoleAdminChanged)
				if err := _LuckyVault.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_LuckyVault *LuckyVaultFilterer) ParseRoleAdminChanged(log types.Log) (*LuckyVaultRoleAdminChanged, error) {
	event := new(LuckyVaultRoleAdminChanged)
	if err := _LuckyVault.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LuckyVaultRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the LuckyVault contract.
type LuckyVaultRoleGrantedIterator struct {
	Event *LuckyVaultRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LuckyVaultRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LuckyVaultRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LuckyVaultRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LuckyVaultRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LuckyVaultRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LuckyVaultRoleGranted represents a RoleGranted event raised by the LuckyVault contract.
type LuckyVaultRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_LuckyVault *LuckyVaultFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*LuckyVaultRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _LuckyVault.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &LuckyVaultRoleGrantedIterator{contract: _LuckyVault.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_LuckyVault *LuckyVaultFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *LuckyVaultRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _LuckyVault.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LuckyVaultRoleGranted)
				if err := _LuckyVault.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_LuckyVault *LuckyVaultFilterer) ParseRoleGranted(log types.Log) (*LuckyVaultRoleGranted, error) {
	event := new(LuckyVaultRoleGranted)
	if err := _LuckyVault.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LuckyVaultRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the LuckyVault contract.
type LuckyVaultRoleRevokedIterator struct {
	Event *LuckyVaultRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LuckyVaultRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LuckyVaultRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LuckyVaultRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LuckyVaultRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LuckyVaultRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LuckyVaultRoleRevoked represents a RoleRevoked event raised by the LuckyVault contract.
type LuckyVaultRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_LuckyVault *LuckyVaultFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*LuckyVaultRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _LuckyVault.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &LuckyVaultRoleRevokedIterator{contract: _LuckyVault.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_LuckyVault *LuckyVaultFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *LuckyVaultRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _LuckyVault.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LuckyVaultRoleRevoked)
				if err := _LuckyVault.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_LuckyVault *LuckyVaultFilterer) ParseRoleRevoked(log types.Log) (*LuckyVaultRoleRevoked, error) {
	event := new(LuckyVaultRoleRevoked)
	if err := _LuckyVault.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LuckyVaultTradeSuccessfulIterator is returned from FilterTradeSuccessful and is used to iterate over the raw logs and unpacked data for TradeSuccessful events raised by the LuckyVault contract.
type LuckyVaultTradeSuccessfulIterator struct {
	Event *LuckyVaultTradeSuccessful // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LuckyVaultTradeSuccessfulIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LuckyVaultTradeSuccessful)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LuckyVaultTradeSuccessful)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LuckyVaultTradeSuccessfulIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LuckyVaultTradeSuccessfulIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LuckyVaultTradeSuccessful represents a TradeSuccessful event raised by the LuckyVault contract.
type LuckyVaultTradeSuccessful struct {
	Sender       common.Address
	Amount       *big.Int
	TradeAmount  *big.Int
	RewardAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterTradeSuccessful is a free log retrieval operation binding the contract event 0x333d31babb882d300a2175cd3cb272cf6c099241021c22af2699242f92f4ff4f.
//
// Solidity: event TradeSuccessful(address sender, uint256 amount, uint256 tradeAmount, uint256 rewardAmount)
func (_LuckyVault *LuckyVaultFilterer) FilterTradeSuccessful(opts *bind.FilterOpts) (*LuckyVaultTradeSuccessfulIterator, error) {

	logs, sub, err := _LuckyVault.contract.FilterLogs(opts, "TradeSuccessful")
	if err != nil {
		return nil, err
	}
	return &LuckyVaultTradeSuccessfulIterator{contract: _LuckyVault.contract, event: "TradeSuccessful", logs: logs, sub: sub}, nil
}

// WatchTradeSuccessful is a free log subscription operation binding the contract event 0x333d31babb882d300a2175cd3cb272cf6c099241021c22af2699242f92f4ff4f.
//
// Solidity: event TradeSuccessful(address sender, uint256 amount, uint256 tradeAmount, uint256 rewardAmount)
func (_LuckyVault *LuckyVaultFilterer) WatchTradeSuccessful(opts *bind.WatchOpts, sink chan<- *LuckyVaultTradeSuccessful) (event.Subscription, error) {

	logs, sub, err := _LuckyVault.contract.WatchLogs(opts, "TradeSuccessful")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LuckyVaultTradeSuccessful)
				if err := _LuckyVault.contract.UnpackLog(event, "TradeSuccessful", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTradeSuccessful is a log parse operation binding the contract event 0x333d31babb882d300a2175cd3cb272cf6c099241021c22af2699242f92f4ff4f.
//
// Solidity: event TradeSuccessful(address sender, uint256 amount, uint256 tradeAmount, uint256 rewardAmount)
func (_LuckyVault *LuckyVaultFilterer) ParseTradeSuccessful(log types.Log) (*LuckyVaultTradeSuccessful, error) {
	event := new(LuckyVaultTradeSuccessful)
	if err := _LuckyVault.contract.UnpackLog(event, "TradeSuccessful", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LuckyVaultUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the LuckyVault contract.
type LuckyVaultUnpausedIterator struct {
	Event *LuckyVaultUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LuckyVaultUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LuckyVaultUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LuckyVaultUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LuckyVaultUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LuckyVaultUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LuckyVaultUnpaused represents a Unpaused event raised by the LuckyVault contract.
type LuckyVaultUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_LuckyVault *LuckyVaultFilterer) FilterUnpaused(opts *bind.FilterOpts) (*LuckyVaultUnpausedIterator, error) {

	logs, sub, err := _LuckyVault.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &LuckyVaultUnpausedIterator{contract: _LuckyVault.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_LuckyVault *LuckyVaultFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *LuckyVaultUnpaused) (event.Subscription, error) {

	logs, sub, err := _LuckyVault.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LuckyVaultUnpaused)
				if err := _LuckyVault.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_LuckyVault *LuckyVaultFilterer) ParseUnpaused(log types.Log) (*LuckyVaultUnpaused, error) {
	event := new(LuckyVaultUnpaused)
	if err := _LuckyVault.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LuckyVaultWithdrawSuccessfulIterator is returned from FilterWithdrawSuccessful and is used to iterate over the raw logs and unpacked data for WithdrawSuccessful events raised by the LuckyVault contract.
type LuckyVaultWithdrawSuccessfulIterator struct {
	Event *LuckyVaultWithdrawSuccessful // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LuckyVaultWithdrawSuccessfulIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LuckyVaultWithdrawSuccessful)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LuckyVaultWithdrawSuccessful)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LuckyVaultWithdrawSuccessfulIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LuckyVaultWithdrawSuccessfulIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LuckyVaultWithdrawSuccessful represents a WithdrawSuccessful event raised by the LuckyVault contract.
type LuckyVaultWithdrawSuccessful struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdrawSuccessful is a free log retrieval operation binding the contract event 0x84e742a3ea03623687a5febaa797636d728230721d4b3d1405d19fbbc16298d9.
//
// Solidity: event WithdrawSuccessful(address sender, uint256 amount)
func (_LuckyVault *LuckyVaultFilterer) FilterWithdrawSuccessful(opts *bind.FilterOpts) (*LuckyVaultWithdrawSuccessfulIterator, error) {

	logs, sub, err := _LuckyVault.contract.FilterLogs(opts, "WithdrawSuccessful")
	if err != nil {
		return nil, err
	}
	return &LuckyVaultWithdrawSuccessfulIterator{contract: _LuckyVault.contract, event: "WithdrawSuccessful", logs: logs, sub: sub}, nil
}

// WatchWithdrawSuccessful is a free log subscription operation binding the contract event 0x84e742a3ea03623687a5febaa797636d728230721d4b3d1405d19fbbc16298d9.
//
// Solidity: event WithdrawSuccessful(address sender, uint256 amount)
func (_LuckyVault *LuckyVaultFilterer) WatchWithdrawSuccessful(opts *bind.WatchOpts, sink chan<- *LuckyVaultWithdrawSuccessful) (event.Subscription, error) {

	logs, sub, err := _LuckyVault.contract.WatchLogs(opts, "WithdrawSuccessful")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LuckyVaultWithdrawSuccessful)
				if err := _LuckyVault.contract.UnpackLog(event, "WithdrawSuccessful", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawSuccessful is a log parse operation binding the contract event 0x84e742a3ea03623687a5febaa797636d728230721d4b3d1405d19fbbc16298d9.
//
// Solidity: event WithdrawSuccessful(address sender, uint256 amount)
func (_LuckyVault *LuckyVaultFilterer) ParseWithdrawSuccessful(log types.Log) (*LuckyVaultWithdrawSuccessful, error) {
	event := new(LuckyVaultWithdrawSuccessful)
	if err := _LuckyVault.contract.UnpackLog(event, "WithdrawSuccessful", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
