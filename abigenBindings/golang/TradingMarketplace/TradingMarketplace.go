// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package TradingMarketplace

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TradingMarketplaceMetaData contains all meta data concerning the TradingMarketplace contract.
var TradingMarketplaceMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_acceptedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketplaceStorage\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ownerCutPerMillion\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExpiredTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradingExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unavailable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"ChangedOwnerCutPerMillion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"publicationFee\",\"type\":\"uint256\"}],\"name\":\"ChangedPublicationFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_marketplaceStorage\",\"type\":\"address\"}],\"name\":\"MarketplaceStorageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"TradingCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tradingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"}],\"name\":\"TradingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"TradingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CANCEL_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721_Interface\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptedToken\",\"outputs\":[{\"internalType\":\"contractIBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplaceStorage\",\"outputs\":[{\"internalType\":\"contractIMarketplaceStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStageDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerCutPerMillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicationFeeInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficary\",\"type\":\"address\"}],\"name\":\"setBeneficary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setMinStageDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ownerCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"setOwnerCutPerMillion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicationFee\",\"type\":\"uint256\"}],\"name\":\"setPublicationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketplaceStorage\",\"type\":\"address\"}],\"name\":\"updateStorageAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"}],\"name\":\"createTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nftAsset\",\"type\":\"bytes32\"}],\"name\":\"cancelTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"executeTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620059ab380380620059ab8339818101604052810190620000379190620013ef565b838383838180620000698173ffffffffffffffffffffffffffffffffffffffff166200042760201b620011e31760201c565b620000ab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a29062001678565b60405180910390fd5b600081905082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506000600260146101000a81548160ff0219169083151502179055506200012f620001236200044a60201b60201c565b620004fd60201b60201c565b6200014f620001436200044a60201b60201c565b620005c360201b60201c565b6200017b8473ffffffffffffffffffffffffffffffffffffffff166200042760201b620011e31760201c565b620001b2576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620002586000801b6200024c6200044a60201b60201c565b6200078a60201b60201c565b620002997fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756200028d6200044a60201b60201c565b6200078a60201b60201c565b620002da7f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d7620002ce6200044a60201b60201c565b6200078a60201b60201c565b6200031b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6200030f6200044a60201b60201c565b6200078a60201b60201c565b6200036d7f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d77fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775620007a060201b60201c565b620003bf7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775620007a060201b60201c565b620003d0816200080360201b60201c565b600160088190555082600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050505062001a2c565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415620004f657600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff818301511692505050620004fa565b3390505b90565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620005d36200044a60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620005f9620008b860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000652576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000649906200169a565b60405180910390fd5b620006847f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d7826200078a60201b60201c565b620006b67f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a826200078a60201b60201c565b620006cb6000801b826200078a60201b60201c565b6200070c7f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d762000700620008b860201b60201c565b620008e260201b60201c565b6200074d7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a62000741620008b860201b60201c565b620008e260201b60201c565b620007716000801b62000765620008b860201b60201c565b620008e260201b60201c565b62000787816200091b60201b620012061760201c565b50565b6200079c828262000a3160201b60201c565b5050565b6000620007b38362000a7960201b60201c565b905081600080858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775620008358162000a9860201b60201c565b620f4240821062000872576040517f7e0d5ce600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816006819055507ffa406a120a9e7f2b332bfb7a43d3bf1c3f079262202907a6b69c94b2821a02c6600654604051620008ac9190620016bc565b60405180910390a15050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b620008f38262000a7960201b60201c565b620009048162000a9860201b60201c565b62000916838362000abc60201b60201c565b505050565b6200092b6200044a60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1662000951620008b860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620009aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009a1906200169a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000a1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a149062001656565b60405180910390fd5b62000a2e81620004fd60201b60201c565b50565b62000a48828262000b0460201b620012fe1760201c565b62000a74816001600085815260200190815260200160002062000bf560201b620013de1790919060201c565b505050565b6000806000838152602001908152602001600020600101549050919050565b62000ab98162000aad6200044a60201b60201c565b62000c2d60201b60201c565b50565b62000ad3828262000cf160201b6200140e1760201c565b62000aff816001600085815260200190815260200160002062000de360201b620014ef1790919060201c565b505050565b62000b16828262000e1b60201b60201c565b62000bf157600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555062000b966200044a60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600062000c25836000018373ffffffffffffffffffffffffffffffffffffffff1660001b62000e8560201b60201c565b905092915050565b62000c3f828262000e1b60201b60201c565b62000ced5762000c728173ffffffffffffffffffffffffffffffffffffffff16601462000eff60201b6200151f1760201c565b62000c8d8360001c602062000eff60201b6200151f1760201c565b60405160200162000ca0929190620015ce565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000ce4919062001610565b60405180910390fd5b5050565b62000d03828262000e1b60201b60201c565b1562000ddf57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555062000d846200044a60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600062000e13836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6200120e60201b60201c565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600062000e9983836200139e60201b60201c565b62000ef457826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905062000ef9565b600090505b92915050565b60606000600283600262000f1491906200175d565b62000f20919062001700565b67ffffffffffffffff81111562000f60577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801562000f935781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811062000ff2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106200107d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002620010bf91906200175d565b620010cb919062001700565b90505b6001811115620011bd577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811062001135577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b82828151811062001173577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080620011b5906200186d565b9050620010ce565b506000841462001204576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620011fb9062001634565b60405180910390fd5b8091505092915050565b6000808360010160008481526020019081526020016000205490506000811462001392576000600182620012439190620017be565b90506000600186600001805490506200125d9190620017be565b90508181146200131b576000866000018281548110620012a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110620012f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548062001356577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505062001398565b60009150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081519050620013d281620019f8565b92915050565b600081519050620013e98162001a12565b92915050565b600080600080608085870312156200140657600080fd5b60006200141687828801620013c1565b94505060206200142987828801620013c1565b93505060406200143c87828801620013c1565b92505060606200144f87828801620013d8565b91505092959194509250565b60006200146882620016d9565b620014748185620016e4565b93506200148681856020860162001837565b6200149181620018cb565b840191505092915050565b6000620014a982620016d9565b620014b58185620016f5565b9350620014c781856020860162001837565b80840191505092915050565b6000620014e2602083620016e4565b9150620014ef82620018dc565b602082019050919050565b600062001509602683620016e4565b9150620015168262001905565b604082019050919050565b600062001530601083620016e4565b91506200153d8262001954565b602082019050919050565b600062001557602083620016e4565b915062001564826200197d565b602082019050919050565b60006200157e601783620016f5565b91506200158b82620019a6565b601782019050919050565b6000620015a5601183620016f5565b9150620015b282620019cf565b601182019050919050565b620015c8816200182d565b82525050565b6000620015db826200156f565b9150620015e982856200149c565b9150620015f68262001596565b91506200160482846200149c565b91508190509392505050565b600060208201905081810360008301526200162c81846200145b565b905092915050565b600060208201905081810360008301526200164f81620014d3565b9050919050565b600060208201905081810360008301526200167181620014fa565b9050919050565b60006020820190508181036000830152620016938162001521565b9050919050565b60006020820190508181036000830152620016b58162001548565b9050919050565b6000602082019050620016d36000830184620015bd565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006200170d826200182d565b91506200171a836200182d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200175257620017516200189c565b5b828201905092915050565b60006200176a826200182d565b915062001777836200182d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620017b357620017b26200189c565b5b828202905092915050565b6000620017cb826200182d565b9150620017d8836200182d565b925082821015620017ee57620017ed6200189c565b5b828203905092915050565b600062001806826200180d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620018575780820151818401526020810190506200183a565b8381111562001867576000848401525b50505050565b60006200187a826200182d565b915060008214156200189157620018906200189c565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c696420636f6e747261637400000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b62001a0381620017f9565b811462001a0f57600080fd5b50565b62001a1d816200182d565b811462001a2957600080fd5b50565b613f6f8062001a3c6000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c80638456cb5911610130578063af8996f1116100b8578063e47d60601161007c578063e47d606014610606578063e4997dc514610636578063e63ab1e914610652578063f2fde38b14610670578063f60218841461068c57610227565b8063af8996f114610562578063b42cf9291461057e578063ca15c8731461059c578063cbfda1c5146105cc578063d547741f146105ea57610227565b806391d14854116100ff57806391d14854146104bc57806392980534146104ec578063a01f79d414610508578063a217fddf14610526578063ae4f11981461054457610227565b80638456cb5914610448578063889e2129146104525780638da5cb5b1461046e5780639010d07c1461048c57610227565b806336568abe116101b357806349f613b01161018257806349f613b0146103b657806359bf1abe146103d25780635c975abb14610402578063715018a61461042057806375b238fc1461042a57610227565b806336568abe146103545780633f4ba83a14610370578063451c3d801461037a57806346b3aec61461039857610227565b806313c27ca7116101fa57806313c27ca7146102b057806319dad16d146102ce578063248a9ca3146102ea5780632b4c32be1461031a5780632f2ff15d1461033857610227565b806301ffc9a71461022c5780630d2a919a1461025c5780630db3cc05146102785780630ecb93c014610294575b600080fd5b6102466004803603810190610241919061332a565b6106a8565b6040516102539190613788565b60405180910390f35b61027660048036038101906102719190613289565b610722565b005b610292600480360381019061028d919061315c565b610776565b005b6102ae60048036038101906102a9919061315c565b6107e5565b005b6102b86108f3565b6040516102c591906137a3565b60405180910390f35b6102e860048036038101906102e3919061337c565b610917565b005b61030460048036038101906102ff9190613289565b6109c1565b60405161031191906137a3565b60405180910390f35b6103226109e0565b60405161032f9190613856565b60405180910390f35b610352600480360381019061034d91906132b2565b6109eb565b005b61036e600480360381019061036991906132b2565b610a0c565b005b610378610a8f565b005b610382610ac4565b60405161038f9190613871565b60405180910390f35b6103a0610aea565b6040516103ad919061388c565b60405180910390f35b6103d060048036038101906103cb91906131ae565b610b10565b005b6103ec60048036038101906103e7919061315c565b610b69565b6040516103f99190613788565b60405180910390f35b61040a610bbf565b6040516104179190613788565b60405180910390f35b610428610bd6565b005b610432610c5e565b60405161043f91906137a3565b60405180910390f35b610450610c82565b005b61046c6004803603810190610467919061315c565b610cb7565b005b610476610cee565b6040516104839190613683565b60405180910390f35b6104a660048036038101906104a191906132ee565b610d18565b6040516104b39190613683565b60405180910390f35b6104d660048036038101906104d191906132b2565b610d47565b6040516104e39190613788565b60405180910390f35b610506600480360381019061050191906131fd565b610db1565b005b610510610e0b565b60405161051d9190613989565b60405180910390f35b61052e610e11565b60405161053b91906137a3565b60405180910390f35b61054c610e18565b6040516105599190613989565b60405180910390f35b61057c6004803603810190610577919061337c565b610e1e565b005b610586610e8c565b6040516105939190613989565b60405180910390f35b6105b660048036038101906105b19190613289565b610e92565b6040516105c39190613989565b60405180910390f35b6105d4610eb6565b6040516105e19190613683565b60405180910390f35b61060460048036038101906105ff91906132b2565b610edc565b005b610620600480360381019061061b919061315c565b610efd565b60405161062d9190613788565b60405180910390f35b610650600480360381019061064b919061315c565b610f1d565b005b61065a61102b565b60405161066791906137a3565b60405180910390f35b61068a6004803603810190610685919061315c565b61104f565b005b6106a660048036038101906106a1919061337c565b6111ae565b005b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061071b575061071a82611819565b5b9050919050565b61072a610bbf565b1561076a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076190613929565b60405180910390fd5b61077381611893565b50565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756107a081611b01565b81600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6107ed611b15565b73ffffffffffffffffffffffffffffffffffffffff1661080b610cee565b73ffffffffffffffffffffffffffffffffffffffff1614610861576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085890613949565b60405180910390fd5b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc816040516108e89190613683565b60405180910390a150565b7f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d781565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561094181611b01565b620f4240821061097d576040517f7e0d5ce600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816006819055507ffa406a120a9e7f2b332bfb7a43d3bf1c3f079262202907a6b69c94b2821a02c66006546040516109b59190613989565b60405180910390a15050565b6000806000838152602001908152602001600020600101549050919050565b6380ac58cd60e01b81565b6109f4826109c1565b6109fd81611b01565b610a078383611bc6565b505050565b610a14611b15565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7890613969565b60405180910390fd5b610a8b8282611bfa565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610ab981611b01565b610ac1611c2e565b50565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610b18610bbf565b15610b58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4f90613929565b60405180910390fd5b610b63838383611cd0565b50505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600260149054906101000a900460ff16905090565b610bde611b15565b73ffffffffffffffffffffffffffffffffffffffff16610bfc610cee565b73ffffffffffffffffffffffffffffffffffffffff1614610c52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4990613949565b60405180910390fd5b610c5c60006122ff565b565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610cac81611b01565b610cb46123c5565b50565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610ce181611b01565b610cea82612468565b5050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610d3f82600160008681526020019081526020016000206124e390919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610db9610bbf565b15610df9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df090613929565b60405180910390fd5b610e05848484846124fd565b50505050565b60065481565b6000801b81565b60075481565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610e4881611b01565b816007819055507fe7fa8737293f41b5dfa0d5c3e552860a06275bed7015581b083c7be7003308ba600754604051610e809190613989565b60405180910390a15050565b60085481565b6000610eaf60016000848152602001908152602001600020612bd1565b9050919050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610ee5826109c1565b610eee81611b01565b610ef88383611bfa565b505050565b60046020528060005260406000206000915054906101000a900460ff1681565b610f25611b15565b73ffffffffffffffffffffffffffffffffffffffff16610f43610cee565b73ffffffffffffffffffffffffffffffffffffffff1614610f99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9090613949565b60405180910390fd5b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c816040516110209190613683565b60405180910390a150565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b611057611b15565b73ffffffffffffffffffffffffffffffffffffffff16611075610cee565b73ffffffffffffffffffffffffffffffffffffffff16146110cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c290613949565b60405180910390fd5b6110f57f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d782612be6565b61111f7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a82612be6565b61112c6000801b82612be6565b61115d7f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d7611158610cee565b610edc565b61118e7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a611189610cee565b610edc565b6111a26000801b61119d610cee565b610edc565b6111ab81611206565b50565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756111d881611b01565b816008819055505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b61120e611b15565b73ffffffffffffffffffffffffffffffffffffffff1661122c610cee565b73ffffffffffffffffffffffffffffffffffffffff1614611282576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127990613949565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156112f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e990613909565b60405180910390fd5b6112fb816122ff565b50565b6113088282610d47565b6113da57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061137f611b15565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000611406836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612bf4565b905092915050565b6114188282610d47565b156114eb57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611490611b15565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000611517836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612c64565b905092915050565b6060600060028360026115329190613a77565b61153c91906139f0565b67ffffffffffffffff81111561157b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115ad5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061160b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611695577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026116d59190613a77565b6116df91906139f0565b90505b60018111156117cb577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611747577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110611784577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806117c490613bfe565b90506116e2565b506000841461180f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611806906138c9565b60405180910390fd5b8091505092915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061188c575061188b82612dea565b5b9050919050565b600061189d611b15565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c85b44b846040518263ffffffff1660e01b81526004016118fc91906137a3565b60a06040518083038186803b15801561191457600080fd5b505afa158015611928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194c9190613353565b90506000816000015190506000801b811415611994576040517fafdd489000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff1614806119ff57506119fe7f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d76119f9611b15565b610d47565b5b611a35576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c38836b8856040518263ffffffff1660e01b8152600401611a9091906137a3565b600060405180830381600087803b158015611aaa57600080fd5b505af1158015611abe573d6000803e3d6000fd5b505050507f559020ef5970f017b414f50b16b6cacd96c9bbb8fd863b9d71ab3d3222d781fa8382604051611af392919061375f565b60405180910390a150505050565b611b1281611b0d611b15565b612e54565b50565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611bbf57600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff818301511692505050611bc3565b3390505b90565b611bd082826112fe565b611bf581600160008581526020019081526020016000206113de90919063ffffffff16565b505050565b611c04828261140e565b611c2981600160008581526020019081526020016000206114ef90919063ffffffff16565b505050565b611c36610bbf565b611c75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6c906138e9565b60405180910390fd5b6000600260146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611cb9611b15565b604051611cc69190613683565b60405180910390a1565b611cd8612fce565b60008484604051602001611ced9291906135be565b6040516020818303038152906040528051906020012090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c85b44b836040518263ffffffff1660e01b8152600401611d6291906137a3565b60a06040518083038186803b158015611d7a57600080fd5b505afa158015611d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db29190613353565b90506000801b81600001511415611df5576040517fafdd489000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000816020015190506000611e08611b15565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e70576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85836060015114611eac576040517ebfc92100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8260800151421115611eea576040517fd2142a8800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008890508073ffffffffffffffffffffffffffffffffffffffff16636352211e896040518263ffffffff1660e01b8152600401611f289190613989565b60206040518083038186803b158015611f4057600080fd5b505afa158015611f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f789190613185565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611fdc576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000846000015190506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c38836b8886040518263ffffffff1660e01b815260040161204291906137a3565b600060405180830381600087803b15801561205c57600080fd5b505af1158015612070573d6000803e3d6000fd5b5050505060006006541115612180576120a9620f424061209b6006548c612ef190919063ffffffff16565b612f0790919063ffffffff16565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd85600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b815260040161212c939291906136c7565b602060405180830381600087803b15801561214657600080fd5b505af115801561215a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217e9190613260565b505b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd85876121d3858e612f1d90919063ffffffff16565b6040518463ffffffff1660e01b81526004016121f1939291906136c7565b602060405180830381600087803b15801561220b57600080fd5b505af115801561221f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122439190613260565b50508173ffffffffffffffffffffffffffffffffffffffff166342842e0e85858c6040518463ffffffff1660e01b8152600401612282939291906136c7565b600060405180830381600087803b15801561229c57600080fd5b505af11580156122b0573d6000803e3d6000fd5b505050507f5cb1fd7912ab2064b667d5d47f54a6a7e64fab88792e1859853ac3c6a3dd9f638184866040516122e7939291906137be565b60405180910390a18496505050505050509392505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6123cd610bbf565b1561240d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240490613929565b60405180910390fd5b6001600260146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612451611b15565b60405161245e9190613683565b60405180910390a1565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f19e07a962d0e1cab8b7d4be06b77a7225ca7ebb744994cb6546fdd815590dc9d816040516124d89190613683565b60405180910390a150565b60006124f28360000183612f33565b60001c905092915050565b8361251d8173ffffffffffffffffffffffffffffffffffffffff166111e3565b612553576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166301ffc9a76380ac58cd60e01b6040518263ffffffff1660e01b81526004016125939190613856565b60206040518083038186803b1580156125ab57600080fd5b505afa1580156125bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e39190613260565b6125ec57600080fd5b60006125f6611b15565b9050600086905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e886040518263ffffffff1660e01b81526004016126389190613989565b60206040518083038186803b15801561265057600080fd5b505afa158015612664573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126889190613185565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158061280b57503073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663081812fc896040518263ffffffff1660e01b81526004016127109190613989565b60206040518083038186803b15801561272857600080fd5b505afa15801561273c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127609190613185565b73ffffffffffffffffffffffffffffffffffffffff16148061280957508173ffffffffffffffffffffffffffffffffffffffff1663e985e9c582306040518363ffffffff1660e01b81526004016127b892919061369e565b60206040518083038186803b1580156127d057600080fd5b505afa1580156127e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128089190613260565b5b155b15612842576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600086141561287c576040517ebfc92100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61289160085442612f8490919063ffffffff16565b8510156128ca576040517fea52bd4700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600088886040516020016128df9291906135be565b604051602081830303815290604052805190602001209050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630a7f8977826040518263ffffffff1660e01b815260040161295291906137a3565b60206040518083038186803b15801561296a57600080fd5b505afa15801561297e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a29190613260565b6129d8576040517fa3b8915f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600042838a8c8b6040516020016129f3959493929190613624565b604051602081830303815290604052805190602001209050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635dba78a6848c8c858d8d6040518763ffffffff1660e01b8152600401612a70969594939291906136fe565b600060405180830381600087803b158015612a8a57600080fd5b505af1158015612a9e573d6000803e3d6000fd5b5050505060006007541115612b8457600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd86600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007546040518463ffffffff1660e01b8152600401612b30939291906136c7565b602060405180830381600087803b158015612b4a57600080fd5b505af1158015612b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b829190613260565b505b7f80d7cd14a57c43d79381c3567166d2e66efc27aa3d0dca4b41e7a3fd736569c6818a858d8c8c604051612bbd969594939291906137f5565b60405180910390a150505050505050505050565b6000612bdf82600001612f9a565b9050919050565b612bf08282611bc6565b5050565b6000612c008383612fab565b612c59578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612c5e565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114612dde576000600182612c969190613ad1565b9050600060018660000180549050612cae9190613ad1565b9050818114612d69576000866000018281548110612cf5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110612d3f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612da3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612de4565b60009150505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b612e5e8282610d47565b612eed57612e838173ffffffffffffffffffffffffffffffffffffffff16601461151f565b612e918360001c602061151f565b604051602001612ea29291906135ea565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ee491906138a7565b60405180910390fd5b5050565b60008183612eff9190613a77565b905092915050565b60008183612f159190613a46565b905092915050565b60008183612f2b9190613ad1565b905092915050565b6000826000018281548110612f71577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b60008183612f9291906139f0565b905092915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b60008135905061303b81613ec6565b92915050565b60008151905061305081613ec6565b92915050565b60008151905061306581613edd565b92915050565b60008135905061307a81613ef4565b92915050565b60008151905061308f81613ef4565b92915050565b6000813590506130a481613f0b565b92915050565b600060a082840312156130bc57600080fd5b6130c660a06139a4565b905060006130d684828501613080565b60008301525060206130ea84828501613041565b60208301525060406130fe84828501613041565b604083015250606061311284828501613147565b606083015250608061312684828501613147565b60808301525092915050565b60008135905061314181613f22565b92915050565b60008151905061315681613f22565b92915050565b60006020828403121561316e57600080fd5b600061317c8482850161302c565b91505092915050565b60006020828403121561319757600080fd5b60006131a584828501613041565b91505092915050565b6000806000606084860312156131c357600080fd5b60006131d18682870161302c565b93505060206131e286828701613132565b92505060406131f386828701613132565b9150509250925092565b6000806000806080858703121561321357600080fd5b60006132218782880161302c565b945050602061323287828801613132565b935050604061324387828801613132565b925050606061325487828801613132565b91505092959194509250565b60006020828403121561327257600080fd5b600061328084828501613056565b91505092915050565b60006020828403121561329b57600080fd5b60006132a98482850161306b565b91505092915050565b600080604083850312156132c557600080fd5b60006132d38582860161306b565b92505060206132e48582860161302c565b9150509250929050565b6000806040838503121561330157600080fd5b600061330f8582860161306b565b925050602061332085828601613132565b9150509250929050565b60006020828403121561333c57600080fd5b600061334a84828501613095565b91505092915050565b600060a0828403121561336557600080fd5b6000613373848285016130aa565b91505092915050565b60006020828403121561338e57600080fd5b600061339c84828501613132565b91505092915050565b6133ae81613b05565b82525050565b6133c56133c082613b05565b613c59565b82525050565b6133d481613b17565b82525050565b6133e381613b23565b82525050565b6133f281613b2d565b82525050565b61340181613b83565b82525050565b61341081613ba7565b82525050565b6000613421826139c9565b61342b81856139d4565b935061343b818560208601613bcb565b61344481613d14565b840191505092915050565b600061345a826139c9565b61346481856139e5565b9350613474818560208601613bcb565b80840191505092915050565b600061348d6020836139d4565b915061349882613d32565b602082019050919050565b60006134b06014836139d4565b91506134bb82613d5b565b602082019050919050565b60006134d36026836139d4565b91506134de82613d84565b604082019050919050565b60006134f66010836139d4565b915061350182613dd3565b602082019050919050565b60006135196020836139d4565b915061352482613dfc565b602082019050919050565b600061353c6017836139e5565b915061354782613e25565b601782019050919050565b600061355f6011836139e5565b915061356a82613e4e565b601182019050919050565b6000613582602f836139d4565b915061358d82613e77565b604082019050919050565b6135a181613b79565b82525050565b6135b86135b382613b79565b613c7d565b82525050565b60006135ca82856133b4565b6014820191506135da82846135a7565b6020820191508190509392505050565b60006135f58261352f565b9150613601828561344f565b915061360c82613552565b9150613618828461344f565b91508190509392505050565b600061363082886135a7565b60208201915061364082876133b4565b60148201915061365082866135a7565b60208201915061366082856133b4565b60148201915061367082846135a7565b6020820191508190509695505050505050565b600060208201905061369860008301846133a5565b92915050565b60006040820190506136b360008301856133a5565b6136c060208301846133a5565b9392505050565b60006060820190506136dc60008301866133a5565b6136e960208301856133a5565b6136f66040830184613598565b949350505050565b600060c08201905061371360008301896133a5565b61372060208301886133a5565b61372d6040830187613598565b61373a60608301866133da565b6137476080830185613598565b61375460a0830184613598565b979650505050505050565b600060408201905061377460008301856133a5565b61378160208301846133da565b9392505050565b600060208201905061379d60008301846133cb565b92915050565b60006020820190506137b860008301846133da565b92915050565b60006060820190506137d360008301866133da565b6137e060208301856133a5565b6137ed60408301846133a5565b949350505050565b600060c08201905061380a60008301896133da565b6138176020830188613598565b61382460408301876133a5565b61383160608301866133a5565b61383e6080830185613598565b61384b60a0830184613598565b979650505050505050565b600060208201905061386b60008301846133e9565b92915050565b600060208201905061388660008301846133f8565b92915050565b60006020820190506138a16000830184613407565b92915050565b600060208201905081810360008301526138c18184613416565b905092915050565b600060208201905081810360008301526138e281613480565b9050919050565b60006020820190508181036000830152613902816134a3565b9050919050565b60006020820190508181036000830152613922816134c6565b9050919050565b60006020820190508181036000830152613942816134e9565b9050919050565b600060208201905081810360008301526139628161350c565b9050919050565b6000602082019050818103600083015261398281613575565b9050919050565b600060208201905061399e6000830184613598565b92915050565b60006139ae6139bf565b90506139ba8282613c28565b919050565b6000604051905090565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006139fb82613b79565b9150613a0683613b79565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613a3b57613a3a613c87565b5b828201905092915050565b6000613a5182613b79565b9150613a5c83613b79565b925082613a6c57613a6b613cb6565b5b828204905092915050565b6000613a8282613b79565b9150613a8d83613b79565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613ac657613ac5613c87565b5b828202905092915050565b6000613adc82613b79565b9150613ae783613b79565b925082821015613afa57613af9613c87565b5b828203905092915050565b6000613b1082613b59565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613b8e82613b95565b9050919050565b6000613ba082613b59565b9050919050565b6000613bb282613bb9565b9050919050565b6000613bc482613b59565b9050919050565b60005b83811015613be9578082015181840152602081019050613bce565b83811115613bf8576000848401525b50505050565b6000613c0982613b79565b91506000821415613c1d57613c1c613c87565b5b600182039050919050565b613c3182613d14565b810181811067ffffffffffffffff82111715613c5057613c4f613ce5565b5b80604052505050565b6000613c6482613c6b565b9050919050565b6000613c7682613d25565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b613ecf81613b05565b8114613eda57600080fd5b50565b613ee681613b17565b8114613ef157600080fd5b50565b613efd81613b23565b8114613f0857600080fd5b50565b613f1481613b2d565b8114613f1f57600080fd5b50565b613f2b81613b79565b8114613f3657600080fd5b5056fea264697066735822122056f108613199c93fa704ae5cb35cd1b46319ec32e88e871538ee42464df4e56164736f6c63430008040033",
}

// TradingMarketplaceABI is the input ABI used to generate the binding from.
// Deprecated: Use TradingMarketplaceMetaData.ABI instead.
var TradingMarketplaceABI = TradingMarketplaceMetaData.ABI

// TradingMarketplaceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TradingMarketplaceMetaData.Bin instead.
var TradingMarketplaceBin = TradingMarketplaceMetaData.Bin

// DeployTradingMarketplace deploys a new Ethereum contract, binding an instance of TradingMarketplace to it.
func DeployTradingMarketplace(auth *bind.TransactOpts, backend bind.ContractBackend, _acceptedToken common.Address, _beneficary common.Address, _marketplaceStorage common.Address, _ownerCutPerMillion *big.Int) (common.Address, *types.Transaction, *TradingMarketplace, error) {
	parsed, err := TradingMarketplaceMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TradingMarketplaceBin), backend, _acceptedToken, _beneficary, _marketplaceStorage, _ownerCutPerMillion)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TradingMarketplace{TradingMarketplaceCaller: TradingMarketplaceCaller{contract: contract}, TradingMarketplaceTransactor: TradingMarketplaceTransactor{contract: contract}, TradingMarketplaceFilterer: TradingMarketplaceFilterer{contract: contract}}, nil
}

// TradingMarketplace is an auto generated Go binding around an Ethereum contract.
type TradingMarketplace struct {
	TradingMarketplaceCaller     // Read-only binding to the contract
	TradingMarketplaceTransactor // Write-only binding to the contract
	TradingMarketplaceFilterer   // Log filterer for contract events
}

// TradingMarketplaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type TradingMarketplaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TradingMarketplaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TradingMarketplaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TradingMarketplaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TradingMarketplaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TradingMarketplaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TradingMarketplaceSession struct {
	Contract     *TradingMarketplace // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// TradingMarketplaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TradingMarketplaceCallerSession struct {
	Contract *TradingMarketplaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// TradingMarketplaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TradingMarketplaceTransactorSession struct {
	Contract     *TradingMarketplaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// TradingMarketplaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type TradingMarketplaceRaw struct {
	Contract *TradingMarketplace // Generic contract binding to access the raw methods on
}

// TradingMarketplaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TradingMarketplaceCallerRaw struct {
	Contract *TradingMarketplaceCaller // Generic read-only contract binding to access the raw methods on
}

// TradingMarketplaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TradingMarketplaceTransactorRaw struct {
	Contract *TradingMarketplaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTradingMarketplace creates a new instance of TradingMarketplace, bound to a specific deployed contract.
func NewTradingMarketplace(address common.Address, backend bind.ContractBackend) (*TradingMarketplace, error) {
	contract, err := bindTradingMarketplace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TradingMarketplace{TradingMarketplaceCaller: TradingMarketplaceCaller{contract: contract}, TradingMarketplaceTransactor: TradingMarketplaceTransactor{contract: contract}, TradingMarketplaceFilterer: TradingMarketplaceFilterer{contract: contract}}, nil
}

// NewTradingMarketplaceCaller creates a new read-only instance of TradingMarketplace, bound to a specific deployed contract.
func NewTradingMarketplaceCaller(address common.Address, caller bind.ContractCaller) (*TradingMarketplaceCaller, error) {
	contract, err := bindTradingMarketplace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TradingMarketplaceCaller{contract: contract}, nil
}

// NewTradingMarketplaceTransactor creates a new write-only instance of TradingMarketplace, bound to a specific deployed contract.
func NewTradingMarketplaceTransactor(address common.Address, transactor bind.ContractTransactor) (*TradingMarketplaceTransactor, error) {
	contract, err := bindTradingMarketplace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TradingMarketplaceTransactor{contract: contract}, nil
}

// NewTradingMarketplaceFilterer creates a new log filterer instance of TradingMarketplace, bound to a specific deployed contract.
func NewTradingMarketplaceFilterer(address common.Address, filterer bind.ContractFilterer) (*TradingMarketplaceFilterer, error) {
	contract, err := bindTradingMarketplace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TradingMarketplaceFilterer{contract: contract}, nil
}

// bindTradingMarketplace binds a generic wrapper to an already deployed contract.
func bindTradingMarketplace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TradingMarketplaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TradingMarketplace *TradingMarketplaceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TradingMarketplace.Contract.TradingMarketplaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TradingMarketplace *TradingMarketplaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.TradingMarketplaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TradingMarketplace *TradingMarketplaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.TradingMarketplaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TradingMarketplace *TradingMarketplaceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TradingMarketplace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TradingMarketplace *TradingMarketplaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TradingMarketplace *TradingMarketplaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.contract.Transact(opts, method, params...)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_TradingMarketplace *TradingMarketplaceCaller) ADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _TradingMarketplace.contract.Call(opts, &out, "ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_TradingMarketplace *TradingMarketplaceSession) ADMINROLE() ([32]byte, error) {
	return _TradingMarketplace.Contract.ADMINROLE(&_TradingMarketplace.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_TradingMarketplace *TradingMarketplaceCallerSession) ADMINROLE() ([32]byte, error) {
	return _TradingMarketplace.Contract.ADMINROLE(&_TradingMarketplace.CallOpts)
}

// CANCELROLE is a free data retrieval call binding the contract method 0x13c27ca7.
//
// Solidity: function CANCEL_ROLE() view returns(bytes32)
func (_TradingMarketplace *TradingMarketplaceCaller) CANCELROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _TradingMarketplace.contract.Call(opts, &out, "CANCEL_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CANCELROLE is a free data retrieval call binding the contract method 0x13c27ca7.
//
// Solidity: function CANCEL_ROLE() view returns(bytes32)
func (_TradingMarketplace *TradingMarketplaceSession) CANCELROLE() ([32]byte, error) {
	return _TradingMarketplace.Contract.CANCELROLE(&_TradingMarketplace.CallOpts)
}

// CANCELROLE is a free data retrieval call binding the contract method 0x13c27ca7.
//
// Solidity: function CANCEL_ROLE() view returns(bytes32)
func (_TradingMarketplace *TradingMarketplaceCallerSession) CANCELROLE() ([32]byte, error) {
	return _TradingMarketplace.Contract.CANCELROLE(&_TradingMarketplace.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_TradingMarketplace *TradingMarketplaceCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _TradingMarketplace.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_TradingMarketplace *TradingMarketplaceSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _TradingMarketplace.Contract.DEFAULTADMINROLE(&_TradingMarketplace.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_TradingMarketplace *TradingMarketplaceCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _TradingMarketplace.Contract.DEFAULTADMINROLE(&_TradingMarketplace.CallOpts)
}

// ERC721Interface is a free data retrieval call binding the contract method 0x2b4c32be.
//
// Solidity: function ERC721_Interface() view returns(bytes4)
func (_TradingMarketplace *TradingMarketplaceCaller) ERC721Interface(opts *bind.CallOpts) ([4]byte, error) {
	var out []interface{}
	err := _TradingMarketplace.contract.Call(opts, &out, "ERC721_Interface")

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// ERC721Interface is a free data retrieval call binding the contract method 0x2b4c32be.
//
// Solidity: function ERC721_Interface() view returns(bytes4)
func (_TradingMarketplace *TradingMarketplaceSession) ERC721Interface() ([4]byte, error) {
	return _TradingMarketplace.Contract.ERC721Interface(&_TradingMarketplace.CallOpts)
}

// ERC721Interface is a free data retrieval call binding the contract method 0x2b4c32be.
//
// Solidity: function ERC721_Interface() view returns(bytes4)
func (_TradingMarketplace *TradingMarketplaceCallerSession) ERC721Interface() ([4]byte, error) {
	return _TradingMarketplace.Contract.ERC721Interface(&_TradingMarketplace.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_TradingMarketplace *TradingMarketplaceCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _TradingMarketplace.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_TradingMarketplace *TradingMarketplaceSession) PAUSERROLE() ([32]byte, error) {
	return _TradingMarketplace.Contract.PAUSERROLE(&_TradingMarketplace.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_TradingMarketplace *TradingMarketplaceCallerSession) PAUSERROLE() ([32]byte, error) {
	return _TradingMarketplace.Contract.PAUSERROLE(&_TradingMarketplace.CallOpts)
}

// AcceptedToken is a free data retrieval call binding the contract method 0x451c3d80.
//
// Solidity: function acceptedToken() view returns(address)
func (_TradingMarketplace *TradingMarketplaceCaller) AcceptedToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TradingMarketplace.contract.Call(opts, &out, "acceptedToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AcceptedToken is a free data retrieval call binding the contract method 0x451c3d80.
//
// Solidity: function acceptedToken() view returns(address)
func (_TradingMarketplace *TradingMarketplaceSession) AcceptedToken() (common.Address, error) {
	return _TradingMarketplace.Contract.AcceptedToken(&_TradingMarketplace.CallOpts)
}

// AcceptedToken is a free data retrieval call binding the contract method 0x451c3d80.
//
// Solidity: function acceptedToken() view returns(address)
func (_TradingMarketplace *TradingMarketplaceCallerSession) AcceptedToken() (common.Address, error) {
	return _TradingMarketplace.Contract.AcceptedToken(&_TradingMarketplace.CallOpts)
}

// Beneficary is a free data retrieval call binding the contract method 0xcbfda1c5.
//
// Solidity: function beneficary() view returns(address)
func (_TradingMarketplace *TradingMarketplaceCaller) Beneficary(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TradingMarketplace.contract.Call(opts, &out, "beneficary")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Beneficary is a free data retrieval call binding the contract method 0xcbfda1c5.
//
// Solidity: function beneficary() view returns(address)
func (_TradingMarketplace *TradingMarketplaceSession) Beneficary() (common.Address, error) {
	return _TradingMarketplace.Contract.Beneficary(&_TradingMarketplace.CallOpts)
}

// Beneficary is a free data retrieval call binding the contract method 0xcbfda1c5.
//
// Solidity: function beneficary() view returns(address)
func (_TradingMarketplace *TradingMarketplaceCallerSession) Beneficary() (common.Address, error) {
	return _TradingMarketplace.Contract.Beneficary(&_TradingMarketplace.CallOpts)
}

// GetBlackListStatus is a free data retrieval call binding the contract method 0x59bf1abe.
//
// Solidity: function getBlackListStatus(address _maker) view returns(bool)
func (_TradingMarketplace *TradingMarketplaceCaller) GetBlackListStatus(opts *bind.CallOpts, _maker common.Address) (bool, error) {
	var out []interface{}
	err := _TradingMarketplace.contract.Call(opts, &out, "getBlackListStatus", _maker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetBlackListStatus is a free data retrieval call binding the contract method 0x59bf1abe.
//
// Solidity: function getBlackListStatus(address _maker) view returns(bool)
func (_TradingMarketplace *TradingMarketplaceSession) GetBlackListStatus(_maker common.Address) (bool, error) {
	return _TradingMarketplace.Contract.GetBlackListStatus(&_TradingMarketplace.CallOpts, _maker)
}

// GetBlackListStatus is a free data retrieval call binding the contract method 0x59bf1abe.
//
// Solidity: function getBlackListStatus(address _maker) view returns(bool)
func (_TradingMarketplace *TradingMarketplaceCallerSession) GetBlackListStatus(_maker common.Address) (bool, error) {
	return _TradingMarketplace.Contract.GetBlackListStatus(&_TradingMarketplace.CallOpts, _maker)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_TradingMarketplace *TradingMarketplaceCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _TradingMarketplace.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_TradingMarketplace *TradingMarketplaceSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _TradingMarketplace.Contract.GetRoleAdmin(&_TradingMarketplace.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_TradingMarketplace *TradingMarketplaceCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _TradingMarketplace.Contract.GetRoleAdmin(&_TradingMarketplace.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_TradingMarketplace *TradingMarketplaceCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TradingMarketplace.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_TradingMarketplace *TradingMarketplaceSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _TradingMarketplace.Contract.GetRoleMember(&_TradingMarketplace.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_TradingMarketplace *TradingMarketplaceCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _TradingMarketplace.Contract.GetRoleMember(&_TradingMarketplace.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_TradingMarketplace *TradingMarketplaceCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _TradingMarketplace.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_TradingMarketplace *TradingMarketplaceSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _TradingMarketplace.Contract.GetRoleMemberCount(&_TradingMarketplace.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_TradingMarketplace *TradingMarketplaceCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _TradingMarketplace.Contract.GetRoleMemberCount(&_TradingMarketplace.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_TradingMarketplace *TradingMarketplaceCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _TradingMarketplace.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_TradingMarketplace *TradingMarketplaceSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _TradingMarketplace.Contract.HasRole(&_TradingMarketplace.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_TradingMarketplace *TradingMarketplaceCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _TradingMarketplace.Contract.HasRole(&_TradingMarketplace.CallOpts, role, account)
}

// IsBlackListed is a free data retrieval call binding the contract method 0xe47d6060.
//
// Solidity: function isBlackListed(address ) view returns(bool)
func (_TradingMarketplace *TradingMarketplaceCaller) IsBlackListed(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _TradingMarketplace.contract.Call(opts, &out, "isBlackListed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBlackListed is a free data retrieval call binding the contract method 0xe47d6060.
//
// Solidity: function isBlackListed(address ) view returns(bool)
func (_TradingMarketplace *TradingMarketplaceSession) IsBlackListed(arg0 common.Address) (bool, error) {
	return _TradingMarketplace.Contract.IsBlackListed(&_TradingMarketplace.CallOpts, arg0)
}

// IsBlackListed is a free data retrieval call binding the contract method 0xe47d6060.
//
// Solidity: function isBlackListed(address ) view returns(bool)
func (_TradingMarketplace *TradingMarketplaceCallerSession) IsBlackListed(arg0 common.Address) (bool, error) {
	return _TradingMarketplace.Contract.IsBlackListed(&_TradingMarketplace.CallOpts, arg0)
}

// MarketplaceStorage is a free data retrieval call binding the contract method 0x46b3aec6.
//
// Solidity: function marketplaceStorage() view returns(address)
func (_TradingMarketplace *TradingMarketplaceCaller) MarketplaceStorage(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TradingMarketplace.contract.Call(opts, &out, "marketplaceStorage")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MarketplaceStorage is a free data retrieval call binding the contract method 0x46b3aec6.
//
// Solidity: function marketplaceStorage() view returns(address)
func (_TradingMarketplace *TradingMarketplaceSession) MarketplaceStorage() (common.Address, error) {
	return _TradingMarketplace.Contract.MarketplaceStorage(&_TradingMarketplace.CallOpts)
}

// MarketplaceStorage is a free data retrieval call binding the contract method 0x46b3aec6.
//
// Solidity: function marketplaceStorage() view returns(address)
func (_TradingMarketplace *TradingMarketplaceCallerSession) MarketplaceStorage() (common.Address, error) {
	return _TradingMarketplace.Contract.MarketplaceStorage(&_TradingMarketplace.CallOpts)
}

// MinStageDuration is a free data retrieval call binding the contract method 0xb42cf929.
//
// Solidity: function minStageDuration() view returns(uint256)
func (_TradingMarketplace *TradingMarketplaceCaller) MinStageDuration(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TradingMarketplace.contract.Call(opts, &out, "minStageDuration")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinStageDuration is a free data retrieval call binding the contract method 0xb42cf929.
//
// Solidity: function minStageDuration() view returns(uint256)
func (_TradingMarketplace *TradingMarketplaceSession) MinStageDuration() (*big.Int, error) {
	return _TradingMarketplace.Contract.MinStageDuration(&_TradingMarketplace.CallOpts)
}

// MinStageDuration is a free data retrieval call binding the contract method 0xb42cf929.
//
// Solidity: function minStageDuration() view returns(uint256)
func (_TradingMarketplace *TradingMarketplaceCallerSession) MinStageDuration() (*big.Int, error) {
	return _TradingMarketplace.Contract.MinStageDuration(&_TradingMarketplace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TradingMarketplace *TradingMarketplaceCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TradingMarketplace.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TradingMarketplace *TradingMarketplaceSession) Owner() (common.Address, error) {
	return _TradingMarketplace.Contract.Owner(&_TradingMarketplace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TradingMarketplace *TradingMarketplaceCallerSession) Owner() (common.Address, error) {
	return _TradingMarketplace.Contract.Owner(&_TradingMarketplace.CallOpts)
}

// OwnerCutPerMillion is a free data retrieval call binding the contract method 0xa01f79d4.
//
// Solidity: function ownerCutPerMillion() view returns(uint256)
func (_TradingMarketplace *TradingMarketplaceCaller) OwnerCutPerMillion(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TradingMarketplace.contract.Call(opts, &out, "ownerCutPerMillion")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// OwnerCutPerMillion is a free data retrieval call binding the contract method 0xa01f79d4.
//
// Solidity: function ownerCutPerMillion() view returns(uint256)
func (_TradingMarketplace *TradingMarketplaceSession) OwnerCutPerMillion() (*big.Int, error) {
	return _TradingMarketplace.Contract.OwnerCutPerMillion(&_TradingMarketplace.CallOpts)
}

// OwnerCutPerMillion is a free data retrieval call binding the contract method 0xa01f79d4.
//
// Solidity: function ownerCutPerMillion() view returns(uint256)
func (_TradingMarketplace *TradingMarketplaceCallerSession) OwnerCutPerMillion() (*big.Int, error) {
	return _TradingMarketplace.Contract.OwnerCutPerMillion(&_TradingMarketplace.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_TradingMarketplace *TradingMarketplaceCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _TradingMarketplace.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_TradingMarketplace *TradingMarketplaceSession) Paused() (bool, error) {
	return _TradingMarketplace.Contract.Paused(&_TradingMarketplace.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_TradingMarketplace *TradingMarketplaceCallerSession) Paused() (bool, error) {
	return _TradingMarketplace.Contract.Paused(&_TradingMarketplace.CallOpts)
}

// PublicationFeeInWei is a free data retrieval call binding the contract method 0xae4f1198.
//
// Solidity: function publicationFeeInWei() view returns(uint256)
func (_TradingMarketplace *TradingMarketplaceCaller) PublicationFeeInWei(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TradingMarketplace.contract.Call(opts, &out, "publicationFeeInWei")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PublicationFeeInWei is a free data retrieval call binding the contract method 0xae4f1198.
//
// Solidity: function publicationFeeInWei() view returns(uint256)
func (_TradingMarketplace *TradingMarketplaceSession) PublicationFeeInWei() (*big.Int, error) {
	return _TradingMarketplace.Contract.PublicationFeeInWei(&_TradingMarketplace.CallOpts)
}

// PublicationFeeInWei is a free data retrieval call binding the contract method 0xae4f1198.
//
// Solidity: function publicationFeeInWei() view returns(uint256)
func (_TradingMarketplace *TradingMarketplaceCallerSession) PublicationFeeInWei() (*big.Int, error) {
	return _TradingMarketplace.Contract.PublicationFeeInWei(&_TradingMarketplace.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TradingMarketplace *TradingMarketplaceCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _TradingMarketplace.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TradingMarketplace *TradingMarketplaceSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TradingMarketplace.Contract.SupportsInterface(&_TradingMarketplace.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TradingMarketplace *TradingMarketplaceCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TradingMarketplace.Contract.SupportsInterface(&_TradingMarketplace.CallOpts, interfaceId)
}

// AddBlackList is a paid mutator transaction binding the contract method 0x0ecb93c0.
//
// Solidity: function addBlackList(address _evilUser) returns()
func (_TradingMarketplace *TradingMarketplaceTransactor) AddBlackList(opts *bind.TransactOpts, _evilUser common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.contract.Transact(opts, "addBlackList", _evilUser)
}

// AddBlackList is a paid mutator transaction binding the contract method 0x0ecb93c0.
//
// Solidity: function addBlackList(address _evilUser) returns()
func (_TradingMarketplace *TradingMarketplaceSession) AddBlackList(_evilUser common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.AddBlackList(&_TradingMarketplace.TransactOpts, _evilUser)
}

// AddBlackList is a paid mutator transaction binding the contract method 0x0ecb93c0.
//
// Solidity: function addBlackList(address _evilUser) returns()
func (_TradingMarketplace *TradingMarketplaceTransactorSession) AddBlackList(_evilUser common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.AddBlackList(&_TradingMarketplace.TransactOpts, _evilUser)
}

// CancelTrading is a paid mutator transaction binding the contract method 0x0d2a919a.
//
// Solidity: function cancelTrading(bytes32 nftAsset) returns()
func (_TradingMarketplace *TradingMarketplaceTransactor) CancelTrading(opts *bind.TransactOpts, nftAsset [32]byte) (*types.Transaction, error) {
	return _TradingMarketplace.contract.Transact(opts, "cancelTrading", nftAsset)
}

// CancelTrading is a paid mutator transaction binding the contract method 0x0d2a919a.
//
// Solidity: function cancelTrading(bytes32 nftAsset) returns()
func (_TradingMarketplace *TradingMarketplaceSession) CancelTrading(nftAsset [32]byte) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.CancelTrading(&_TradingMarketplace.TransactOpts, nftAsset)
}

// CancelTrading is a paid mutator transaction binding the contract method 0x0d2a919a.
//
// Solidity: function cancelTrading(bytes32 nftAsset) returns()
func (_TradingMarketplace *TradingMarketplaceTransactorSession) CancelTrading(nftAsset [32]byte) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.CancelTrading(&_TradingMarketplace.TransactOpts, nftAsset)
}

// CreateTrading is a paid mutator transaction binding the contract method 0x92980534.
//
// Solidity: function createTrading(address nftAddress, uint256 assetId, uint256 priceInWei, uint256 expiredAt) returns()
func (_TradingMarketplace *TradingMarketplaceTransactor) CreateTrading(opts *bind.TransactOpts, nftAddress common.Address, assetId *big.Int, priceInWei *big.Int, expiredAt *big.Int) (*types.Transaction, error) {
	return _TradingMarketplace.contract.Transact(opts, "createTrading", nftAddress, assetId, priceInWei, expiredAt)
}

// CreateTrading is a paid mutator transaction binding the contract method 0x92980534.
//
// Solidity: function createTrading(address nftAddress, uint256 assetId, uint256 priceInWei, uint256 expiredAt) returns()
func (_TradingMarketplace *TradingMarketplaceSession) CreateTrading(nftAddress common.Address, assetId *big.Int, priceInWei *big.Int, expiredAt *big.Int) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.CreateTrading(&_TradingMarketplace.TransactOpts, nftAddress, assetId, priceInWei, expiredAt)
}

// CreateTrading is a paid mutator transaction binding the contract method 0x92980534.
//
// Solidity: function createTrading(address nftAddress, uint256 assetId, uint256 priceInWei, uint256 expiredAt) returns()
func (_TradingMarketplace *TradingMarketplaceTransactorSession) CreateTrading(nftAddress common.Address, assetId *big.Int, priceInWei *big.Int, expiredAt *big.Int) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.CreateTrading(&_TradingMarketplace.TransactOpts, nftAddress, assetId, priceInWei, expiredAt)
}

// ExecuteTrading is a paid mutator transaction binding the contract method 0x49f613b0.
//
// Solidity: function executeTrading(address nftAddress, uint256 assetId, uint256 price) returns()
func (_TradingMarketplace *TradingMarketplaceTransactor) ExecuteTrading(opts *bind.TransactOpts, nftAddress common.Address, assetId *big.Int, price *big.Int) (*types.Transaction, error) {
	return _TradingMarketplace.contract.Transact(opts, "executeTrading", nftAddress, assetId, price)
}

// ExecuteTrading is a paid mutator transaction binding the contract method 0x49f613b0.
//
// Solidity: function executeTrading(address nftAddress, uint256 assetId, uint256 price) returns()
func (_TradingMarketplace *TradingMarketplaceSession) ExecuteTrading(nftAddress common.Address, assetId *big.Int, price *big.Int) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.ExecuteTrading(&_TradingMarketplace.TransactOpts, nftAddress, assetId, price)
}

// ExecuteTrading is a paid mutator transaction binding the contract method 0x49f613b0.
//
// Solidity: function executeTrading(address nftAddress, uint256 assetId, uint256 price) returns()
func (_TradingMarketplace *TradingMarketplaceTransactorSession) ExecuteTrading(nftAddress common.Address, assetId *big.Int, price *big.Int) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.ExecuteTrading(&_TradingMarketplace.TransactOpts, nftAddress, assetId, price)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_TradingMarketplace *TradingMarketplaceTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_TradingMarketplace *TradingMarketplaceSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.GrantRole(&_TradingMarketplace.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_TradingMarketplace *TradingMarketplaceTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.GrantRole(&_TradingMarketplace.TransactOpts, role, account)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_TradingMarketplace *TradingMarketplaceTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TradingMarketplace.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_TradingMarketplace *TradingMarketplaceSession) Pause() (*types.Transaction, error) {
	return _TradingMarketplace.Contract.Pause(&_TradingMarketplace.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_TradingMarketplace *TradingMarketplaceTransactorSession) Pause() (*types.Transaction, error) {
	return _TradingMarketplace.Contract.Pause(&_TradingMarketplace.TransactOpts)
}

// RemoveBlackList is a paid mutator transaction binding the contract method 0xe4997dc5.
//
// Solidity: function removeBlackList(address _clearedUser) returns()
func (_TradingMarketplace *TradingMarketplaceTransactor) RemoveBlackList(opts *bind.TransactOpts, _clearedUser common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.contract.Transact(opts, "removeBlackList", _clearedUser)
}

// RemoveBlackList is a paid mutator transaction binding the contract method 0xe4997dc5.
//
// Solidity: function removeBlackList(address _clearedUser) returns()
func (_TradingMarketplace *TradingMarketplaceSession) RemoveBlackList(_clearedUser common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.RemoveBlackList(&_TradingMarketplace.TransactOpts, _clearedUser)
}

// RemoveBlackList is a paid mutator transaction binding the contract method 0xe4997dc5.
//
// Solidity: function removeBlackList(address _clearedUser) returns()
func (_TradingMarketplace *TradingMarketplaceTransactorSession) RemoveBlackList(_clearedUser common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.RemoveBlackList(&_TradingMarketplace.TransactOpts, _clearedUser)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TradingMarketplace *TradingMarketplaceTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TradingMarketplace.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TradingMarketplace *TradingMarketplaceSession) RenounceOwnership() (*types.Transaction, error) {
	return _TradingMarketplace.Contract.RenounceOwnership(&_TradingMarketplace.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TradingMarketplace *TradingMarketplaceTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TradingMarketplace.Contract.RenounceOwnership(&_TradingMarketplace.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_TradingMarketplace *TradingMarketplaceTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_TradingMarketplace *TradingMarketplaceSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.RenounceRole(&_TradingMarketplace.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_TradingMarketplace *TradingMarketplaceTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.RenounceRole(&_TradingMarketplace.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_TradingMarketplace *TradingMarketplaceTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_TradingMarketplace *TradingMarketplaceSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.RevokeRole(&_TradingMarketplace.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_TradingMarketplace *TradingMarketplaceTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.RevokeRole(&_TradingMarketplace.TransactOpts, role, account)
}

// SetBeneficary is a paid mutator transaction binding the contract method 0x0db3cc05.
//
// Solidity: function setBeneficary(address _beneficary) returns()
func (_TradingMarketplace *TradingMarketplaceTransactor) SetBeneficary(opts *bind.TransactOpts, _beneficary common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.contract.Transact(opts, "setBeneficary", _beneficary)
}

// SetBeneficary is a paid mutator transaction binding the contract method 0x0db3cc05.
//
// Solidity: function setBeneficary(address _beneficary) returns()
func (_TradingMarketplace *TradingMarketplaceSession) SetBeneficary(_beneficary common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.SetBeneficary(&_TradingMarketplace.TransactOpts, _beneficary)
}

// SetBeneficary is a paid mutator transaction binding the contract method 0x0db3cc05.
//
// Solidity: function setBeneficary(address _beneficary) returns()
func (_TradingMarketplace *TradingMarketplaceTransactorSession) SetBeneficary(_beneficary common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.SetBeneficary(&_TradingMarketplace.TransactOpts, _beneficary)
}

// SetMinStageDuration is a paid mutator transaction binding the contract method 0xf6021884.
//
// Solidity: function setMinStageDuration(uint256 duration) returns()
func (_TradingMarketplace *TradingMarketplaceTransactor) SetMinStageDuration(opts *bind.TransactOpts, duration *big.Int) (*types.Transaction, error) {
	return _TradingMarketplace.contract.Transact(opts, "setMinStageDuration", duration)
}

// SetMinStageDuration is a paid mutator transaction binding the contract method 0xf6021884.
//
// Solidity: function setMinStageDuration(uint256 duration) returns()
func (_TradingMarketplace *TradingMarketplaceSession) SetMinStageDuration(duration *big.Int) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.SetMinStageDuration(&_TradingMarketplace.TransactOpts, duration)
}

// SetMinStageDuration is a paid mutator transaction binding the contract method 0xf6021884.
//
// Solidity: function setMinStageDuration(uint256 duration) returns()
func (_TradingMarketplace *TradingMarketplaceTransactorSession) SetMinStageDuration(duration *big.Int) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.SetMinStageDuration(&_TradingMarketplace.TransactOpts, duration)
}

// SetOwnerCutPerMillion is a paid mutator transaction binding the contract method 0x19dad16d.
//
// Solidity: function setOwnerCutPerMillion(uint256 _ownerCutPerMillion) returns()
func (_TradingMarketplace *TradingMarketplaceTransactor) SetOwnerCutPerMillion(opts *bind.TransactOpts, _ownerCutPerMillion *big.Int) (*types.Transaction, error) {
	return _TradingMarketplace.contract.Transact(opts, "setOwnerCutPerMillion", _ownerCutPerMillion)
}

// SetOwnerCutPerMillion is a paid mutator transaction binding the contract method 0x19dad16d.
//
// Solidity: function setOwnerCutPerMillion(uint256 _ownerCutPerMillion) returns()
func (_TradingMarketplace *TradingMarketplaceSession) SetOwnerCutPerMillion(_ownerCutPerMillion *big.Int) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.SetOwnerCutPerMillion(&_TradingMarketplace.TransactOpts, _ownerCutPerMillion)
}

// SetOwnerCutPerMillion is a paid mutator transaction binding the contract method 0x19dad16d.
//
// Solidity: function setOwnerCutPerMillion(uint256 _ownerCutPerMillion) returns()
func (_TradingMarketplace *TradingMarketplaceTransactorSession) SetOwnerCutPerMillion(_ownerCutPerMillion *big.Int) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.SetOwnerCutPerMillion(&_TradingMarketplace.TransactOpts, _ownerCutPerMillion)
}

// SetPublicationFee is a paid mutator transaction binding the contract method 0xaf8996f1.
//
// Solidity: function setPublicationFee(uint256 _publicationFee) returns()
func (_TradingMarketplace *TradingMarketplaceTransactor) SetPublicationFee(opts *bind.TransactOpts, _publicationFee *big.Int) (*types.Transaction, error) {
	return _TradingMarketplace.contract.Transact(opts, "setPublicationFee", _publicationFee)
}

// SetPublicationFee is a paid mutator transaction binding the contract method 0xaf8996f1.
//
// Solidity: function setPublicationFee(uint256 _publicationFee) returns()
func (_TradingMarketplace *TradingMarketplaceSession) SetPublicationFee(_publicationFee *big.Int) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.SetPublicationFee(&_TradingMarketplace.TransactOpts, _publicationFee)
}

// SetPublicationFee is a paid mutator transaction binding the contract method 0xaf8996f1.
//
// Solidity: function setPublicationFee(uint256 _publicationFee) returns()
func (_TradingMarketplace *TradingMarketplaceTransactorSession) SetPublicationFee(_publicationFee *big.Int) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.SetPublicationFee(&_TradingMarketplace.TransactOpts, _publicationFee)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TradingMarketplace *TradingMarketplaceTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TradingMarketplace *TradingMarketplaceSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.TransferOwnership(&_TradingMarketplace.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TradingMarketplace *TradingMarketplaceTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.TransferOwnership(&_TradingMarketplace.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_TradingMarketplace *TradingMarketplaceTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TradingMarketplace.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_TradingMarketplace *TradingMarketplaceSession) Unpause() (*types.Transaction, error) {
	return _TradingMarketplace.Contract.Unpause(&_TradingMarketplace.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_TradingMarketplace *TradingMarketplaceTransactorSession) Unpause() (*types.Transaction, error) {
	return _TradingMarketplace.Contract.Unpause(&_TradingMarketplace.TransactOpts)
}

// UpdateStorageAddress is a paid mutator transaction binding the contract method 0x889e2129.
//
// Solidity: function updateStorageAddress(address _marketplaceStorage) returns()
func (_TradingMarketplace *TradingMarketplaceTransactor) UpdateStorageAddress(opts *bind.TransactOpts, _marketplaceStorage common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.contract.Transact(opts, "updateStorageAddress", _marketplaceStorage)
}

// UpdateStorageAddress is a paid mutator transaction binding the contract method 0x889e2129.
//
// Solidity: function updateStorageAddress(address _marketplaceStorage) returns()
func (_TradingMarketplace *TradingMarketplaceSession) UpdateStorageAddress(_marketplaceStorage common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.UpdateStorageAddress(&_TradingMarketplace.TransactOpts, _marketplaceStorage)
}

// UpdateStorageAddress is a paid mutator transaction binding the contract method 0x889e2129.
//
// Solidity: function updateStorageAddress(address _marketplaceStorage) returns()
func (_TradingMarketplace *TradingMarketplaceTransactorSession) UpdateStorageAddress(_marketplaceStorage common.Address) (*types.Transaction, error) {
	return _TradingMarketplace.Contract.UpdateStorageAddress(&_TradingMarketplace.TransactOpts, _marketplaceStorage)
}

// TradingMarketplaceAddedBlackListIterator is returned from FilterAddedBlackList and is used to iterate over the raw logs and unpacked data for AddedBlackList events raised by the TradingMarketplace contract.
type TradingMarketplaceAddedBlackListIterator struct {
	Event *TradingMarketplaceAddedBlackList // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TradingMarketplaceAddedBlackListIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TradingMarketplaceAddedBlackList)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TradingMarketplaceAddedBlackList)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TradingMarketplaceAddedBlackListIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TradingMarketplaceAddedBlackListIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TradingMarketplaceAddedBlackList represents a AddedBlackList event raised by the TradingMarketplace contract.
type TradingMarketplaceAddedBlackList struct {
	User common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAddedBlackList is a free log retrieval operation binding the contract event 0x42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc.
//
// Solidity: event AddedBlackList(address _user)
func (_TradingMarketplace *TradingMarketplaceFilterer) FilterAddedBlackList(opts *bind.FilterOpts) (*TradingMarketplaceAddedBlackListIterator, error) {

	logs, sub, err := _TradingMarketplace.contract.FilterLogs(opts, "AddedBlackList")
	if err != nil {
		return nil, err
	}
	return &TradingMarketplaceAddedBlackListIterator{contract: _TradingMarketplace.contract, event: "AddedBlackList", logs: logs, sub: sub}, nil
}

// WatchAddedBlackList is a free log subscription operation binding the contract event 0x42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc.
//
// Solidity: event AddedBlackList(address _user)
func (_TradingMarketplace *TradingMarketplaceFilterer) WatchAddedBlackList(opts *bind.WatchOpts, sink chan<- *TradingMarketplaceAddedBlackList) (event.Subscription, error) {

	logs, sub, err := _TradingMarketplace.contract.WatchLogs(opts, "AddedBlackList")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TradingMarketplaceAddedBlackList)
				if err := _TradingMarketplace.contract.UnpackLog(event, "AddedBlackList", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddedBlackList is a log parse operation binding the contract event 0x42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc.
//
// Solidity: event AddedBlackList(address _user)
func (_TradingMarketplace *TradingMarketplaceFilterer) ParseAddedBlackList(log types.Log) (*TradingMarketplaceAddedBlackList, error) {
	event := new(TradingMarketplaceAddedBlackList)
	if err := _TradingMarketplace.contract.UnpackLog(event, "AddedBlackList", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TradingMarketplaceChangedOwnerCutPerMillionIterator is returned from FilterChangedOwnerCutPerMillion and is used to iterate over the raw logs and unpacked data for ChangedOwnerCutPerMillion events raised by the TradingMarketplace contract.
type TradingMarketplaceChangedOwnerCutPerMillionIterator struct {
	Event *TradingMarketplaceChangedOwnerCutPerMillion // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TradingMarketplaceChangedOwnerCutPerMillionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TradingMarketplaceChangedOwnerCutPerMillion)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TradingMarketplaceChangedOwnerCutPerMillion)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TradingMarketplaceChangedOwnerCutPerMillionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TradingMarketplaceChangedOwnerCutPerMillionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TradingMarketplaceChangedOwnerCutPerMillion represents a ChangedOwnerCutPerMillion event raised by the TradingMarketplace contract.
type TradingMarketplaceChangedOwnerCutPerMillion struct {
	OwnerCutPerMillion *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterChangedOwnerCutPerMillion is a free log retrieval operation binding the contract event 0xfa406a120a9e7f2b332bfb7a43d3bf1c3f079262202907a6b69c94b2821a02c6.
//
// Solidity: event ChangedOwnerCutPerMillion(uint256 ownerCutPerMillion)
func (_TradingMarketplace *TradingMarketplaceFilterer) FilterChangedOwnerCutPerMillion(opts *bind.FilterOpts) (*TradingMarketplaceChangedOwnerCutPerMillionIterator, error) {

	logs, sub, err := _TradingMarketplace.contract.FilterLogs(opts, "ChangedOwnerCutPerMillion")
	if err != nil {
		return nil, err
	}
	return &TradingMarketplaceChangedOwnerCutPerMillionIterator{contract: _TradingMarketplace.contract, event: "ChangedOwnerCutPerMillion", logs: logs, sub: sub}, nil
}

// WatchChangedOwnerCutPerMillion is a free log subscription operation binding the contract event 0xfa406a120a9e7f2b332bfb7a43d3bf1c3f079262202907a6b69c94b2821a02c6.
//
// Solidity: event ChangedOwnerCutPerMillion(uint256 ownerCutPerMillion)
func (_TradingMarketplace *TradingMarketplaceFilterer) WatchChangedOwnerCutPerMillion(opts *bind.WatchOpts, sink chan<- *TradingMarketplaceChangedOwnerCutPerMillion) (event.Subscription, error) {

	logs, sub, err := _TradingMarketplace.contract.WatchLogs(opts, "ChangedOwnerCutPerMillion")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TradingMarketplaceChangedOwnerCutPerMillion)
				if err := _TradingMarketplace.contract.UnpackLog(event, "ChangedOwnerCutPerMillion", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangedOwnerCutPerMillion is a log parse operation binding the contract event 0xfa406a120a9e7f2b332bfb7a43d3bf1c3f079262202907a6b69c94b2821a02c6.
//
// Solidity: event ChangedOwnerCutPerMillion(uint256 ownerCutPerMillion)
func (_TradingMarketplace *TradingMarketplaceFilterer) ParseChangedOwnerCutPerMillion(log types.Log) (*TradingMarketplaceChangedOwnerCutPerMillion, error) {
	event := new(TradingMarketplaceChangedOwnerCutPerMillion)
	if err := _TradingMarketplace.contract.UnpackLog(event, "ChangedOwnerCutPerMillion", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TradingMarketplaceChangedPublicationFeeIterator is returned from FilterChangedPublicationFee and is used to iterate over the raw logs and unpacked data for ChangedPublicationFee events raised by the TradingMarketplace contract.
type TradingMarketplaceChangedPublicationFeeIterator struct {
	Event *TradingMarketplaceChangedPublicationFee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TradingMarketplaceChangedPublicationFeeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TradingMarketplaceChangedPublicationFee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TradingMarketplaceChangedPublicationFee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TradingMarketplaceChangedPublicationFeeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TradingMarketplaceChangedPublicationFeeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TradingMarketplaceChangedPublicationFee represents a ChangedPublicationFee event raised by the TradingMarketplace contract.
type TradingMarketplaceChangedPublicationFee struct {
	PublicationFee *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterChangedPublicationFee is a free log retrieval operation binding the contract event 0xe7fa8737293f41b5dfa0d5c3e552860a06275bed7015581b083c7be7003308ba.
//
// Solidity: event ChangedPublicationFee(uint256 publicationFee)
func (_TradingMarketplace *TradingMarketplaceFilterer) FilterChangedPublicationFee(opts *bind.FilterOpts) (*TradingMarketplaceChangedPublicationFeeIterator, error) {

	logs, sub, err := _TradingMarketplace.contract.FilterLogs(opts, "ChangedPublicationFee")
	if err != nil {
		return nil, err
	}
	return &TradingMarketplaceChangedPublicationFeeIterator{contract: _TradingMarketplace.contract, event: "ChangedPublicationFee", logs: logs, sub: sub}, nil
}

// WatchChangedPublicationFee is a free log subscription operation binding the contract event 0xe7fa8737293f41b5dfa0d5c3e552860a06275bed7015581b083c7be7003308ba.
//
// Solidity: event ChangedPublicationFee(uint256 publicationFee)
func (_TradingMarketplace *TradingMarketplaceFilterer) WatchChangedPublicationFee(opts *bind.WatchOpts, sink chan<- *TradingMarketplaceChangedPublicationFee) (event.Subscription, error) {

	logs, sub, err := _TradingMarketplace.contract.WatchLogs(opts, "ChangedPublicationFee")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TradingMarketplaceChangedPublicationFee)
				if err := _TradingMarketplace.contract.UnpackLog(event, "ChangedPublicationFee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangedPublicationFee is a log parse operation binding the contract event 0xe7fa8737293f41b5dfa0d5c3e552860a06275bed7015581b083c7be7003308ba.
//
// Solidity: event ChangedPublicationFee(uint256 publicationFee)
func (_TradingMarketplace *TradingMarketplaceFilterer) ParseChangedPublicationFee(log types.Log) (*TradingMarketplaceChangedPublicationFee, error) {
	event := new(TradingMarketplaceChangedPublicationFee)
	if err := _TradingMarketplace.contract.UnpackLog(event, "ChangedPublicationFee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TradingMarketplaceMarketplaceStorageUpdatedIterator is returned from FilterMarketplaceStorageUpdated and is used to iterate over the raw logs and unpacked data for MarketplaceStorageUpdated events raised by the TradingMarketplace contract.
type TradingMarketplaceMarketplaceStorageUpdatedIterator struct {
	Event *TradingMarketplaceMarketplaceStorageUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TradingMarketplaceMarketplaceStorageUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TradingMarketplaceMarketplaceStorageUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TradingMarketplaceMarketplaceStorageUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TradingMarketplaceMarketplaceStorageUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TradingMarketplaceMarketplaceStorageUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TradingMarketplaceMarketplaceStorageUpdated represents a MarketplaceStorageUpdated event raised by the TradingMarketplace contract.
type TradingMarketplaceMarketplaceStorageUpdated struct {
	MarketplaceStorage common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterMarketplaceStorageUpdated is a free log retrieval operation binding the contract event 0x19e07a962d0e1cab8b7d4be06b77a7225ca7ebb744994cb6546fdd815590dc9d.
//
// Solidity: event MarketplaceStorageUpdated(address _marketplaceStorage)
func (_TradingMarketplace *TradingMarketplaceFilterer) FilterMarketplaceStorageUpdated(opts *bind.FilterOpts) (*TradingMarketplaceMarketplaceStorageUpdatedIterator, error) {

	logs, sub, err := _TradingMarketplace.contract.FilterLogs(opts, "MarketplaceStorageUpdated")
	if err != nil {
		return nil, err
	}
	return &TradingMarketplaceMarketplaceStorageUpdatedIterator{contract: _TradingMarketplace.contract, event: "MarketplaceStorageUpdated", logs: logs, sub: sub}, nil
}

// WatchMarketplaceStorageUpdated is a free log subscription operation binding the contract event 0x19e07a962d0e1cab8b7d4be06b77a7225ca7ebb744994cb6546fdd815590dc9d.
//
// Solidity: event MarketplaceStorageUpdated(address _marketplaceStorage)
func (_TradingMarketplace *TradingMarketplaceFilterer) WatchMarketplaceStorageUpdated(opts *bind.WatchOpts, sink chan<- *TradingMarketplaceMarketplaceStorageUpdated) (event.Subscription, error) {

	logs, sub, err := _TradingMarketplace.contract.WatchLogs(opts, "MarketplaceStorageUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TradingMarketplaceMarketplaceStorageUpdated)
				if err := _TradingMarketplace.contract.UnpackLog(event, "MarketplaceStorageUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMarketplaceStorageUpdated is a log parse operation binding the contract event 0x19e07a962d0e1cab8b7d4be06b77a7225ca7ebb744994cb6546fdd815590dc9d.
//
// Solidity: event MarketplaceStorageUpdated(address _marketplaceStorage)
func (_TradingMarketplace *TradingMarketplaceFilterer) ParseMarketplaceStorageUpdated(log types.Log) (*TradingMarketplaceMarketplaceStorageUpdated, error) {
	event := new(TradingMarketplaceMarketplaceStorageUpdated)
	if err := _TradingMarketplace.contract.UnpackLog(event, "MarketplaceStorageUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TradingMarketplaceOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TradingMarketplace contract.
type TradingMarketplaceOwnershipTransferredIterator struct {
	Event *TradingMarketplaceOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TradingMarketplaceOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TradingMarketplaceOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TradingMarketplaceOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TradingMarketplaceOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TradingMarketplaceOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TradingMarketplaceOwnershipTransferred represents a OwnershipTransferred event raised by the TradingMarketplace contract.
type TradingMarketplaceOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TradingMarketplace *TradingMarketplaceFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TradingMarketplaceOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TradingMarketplace.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TradingMarketplaceOwnershipTransferredIterator{contract: _TradingMarketplace.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TradingMarketplace *TradingMarketplaceFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TradingMarketplaceOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TradingMarketplace.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TradingMarketplaceOwnershipTransferred)
				if err := _TradingMarketplace.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TradingMarketplace *TradingMarketplaceFilterer) ParseOwnershipTransferred(log types.Log) (*TradingMarketplaceOwnershipTransferred, error) {
	event := new(TradingMarketplaceOwnershipTransferred)
	if err := _TradingMarketplace.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TradingMarketplacePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the TradingMarketplace contract.
type TradingMarketplacePausedIterator struct {
	Event *TradingMarketplacePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TradingMarketplacePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TradingMarketplacePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TradingMarketplacePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TradingMarketplacePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TradingMarketplacePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TradingMarketplacePaused represents a Paused event raised by the TradingMarketplace contract.
type TradingMarketplacePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_TradingMarketplace *TradingMarketplaceFilterer) FilterPaused(opts *bind.FilterOpts) (*TradingMarketplacePausedIterator, error) {

	logs, sub, err := _TradingMarketplace.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &TradingMarketplacePausedIterator{contract: _TradingMarketplace.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_TradingMarketplace *TradingMarketplaceFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *TradingMarketplacePaused) (event.Subscription, error) {

	logs, sub, err := _TradingMarketplace.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TradingMarketplacePaused)
				if err := _TradingMarketplace.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_TradingMarketplace *TradingMarketplaceFilterer) ParsePaused(log types.Log) (*TradingMarketplacePaused, error) {
	event := new(TradingMarketplacePaused)
	if err := _TradingMarketplace.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TradingMarketplaceRemovedBlackListIterator is returned from FilterRemovedBlackList and is used to iterate over the raw logs and unpacked data for RemovedBlackList events raised by the TradingMarketplace contract.
type TradingMarketplaceRemovedBlackListIterator struct {
	Event *TradingMarketplaceRemovedBlackList // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TradingMarketplaceRemovedBlackListIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TradingMarketplaceRemovedBlackList)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TradingMarketplaceRemovedBlackList)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TradingMarketplaceRemovedBlackListIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TradingMarketplaceRemovedBlackListIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TradingMarketplaceRemovedBlackList represents a RemovedBlackList event raised by the TradingMarketplace contract.
type TradingMarketplaceRemovedBlackList struct {
	User common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRemovedBlackList is a free log retrieval operation binding the contract event 0xd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c.
//
// Solidity: event RemovedBlackList(address _user)
func (_TradingMarketplace *TradingMarketplaceFilterer) FilterRemovedBlackList(opts *bind.FilterOpts) (*TradingMarketplaceRemovedBlackListIterator, error) {

	logs, sub, err := _TradingMarketplace.contract.FilterLogs(opts, "RemovedBlackList")
	if err != nil {
		return nil, err
	}
	return &TradingMarketplaceRemovedBlackListIterator{contract: _TradingMarketplace.contract, event: "RemovedBlackList", logs: logs, sub: sub}, nil
}

// WatchRemovedBlackList is a free log subscription operation binding the contract event 0xd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c.
//
// Solidity: event RemovedBlackList(address _user)
func (_TradingMarketplace *TradingMarketplaceFilterer) WatchRemovedBlackList(opts *bind.WatchOpts, sink chan<- *TradingMarketplaceRemovedBlackList) (event.Subscription, error) {

	logs, sub, err := _TradingMarketplace.contract.WatchLogs(opts, "RemovedBlackList")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TradingMarketplaceRemovedBlackList)
				if err := _TradingMarketplace.contract.UnpackLog(event, "RemovedBlackList", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemovedBlackList is a log parse operation binding the contract event 0xd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c.
//
// Solidity: event RemovedBlackList(address _user)
func (_TradingMarketplace *TradingMarketplaceFilterer) ParseRemovedBlackList(log types.Log) (*TradingMarketplaceRemovedBlackList, error) {
	event := new(TradingMarketplaceRemovedBlackList)
	if err := _TradingMarketplace.contract.UnpackLog(event, "RemovedBlackList", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TradingMarketplaceRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the TradingMarketplace contract.
type TradingMarketplaceRoleAdminChangedIterator struct {
	Event *TradingMarketplaceRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TradingMarketplaceRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TradingMarketplaceRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TradingMarketplaceRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TradingMarketplaceRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TradingMarketplaceRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TradingMarketplaceRoleAdminChanged represents a RoleAdminChanged event raised by the TradingMarketplace contract.
type TradingMarketplaceRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_TradingMarketplace *TradingMarketplaceFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*TradingMarketplaceRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _TradingMarketplace.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &TradingMarketplaceRoleAdminChangedIterator{contract: _TradingMarketplace.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_TradingMarketplace *TradingMarketplaceFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *TradingMarketplaceRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _TradingMarketplace.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TradingMarketplaceRoleAdminChanged)
				if err := _TradingMarketplace.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_TradingMarketplace *TradingMarketplaceFilterer) ParseRoleAdminChanged(log types.Log) (*TradingMarketplaceRoleAdminChanged, error) {
	event := new(TradingMarketplaceRoleAdminChanged)
	if err := _TradingMarketplace.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TradingMarketplaceRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the TradingMarketplace contract.
type TradingMarketplaceRoleGrantedIterator struct {
	Event *TradingMarketplaceRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TradingMarketplaceRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TradingMarketplaceRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TradingMarketplaceRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TradingMarketplaceRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TradingMarketplaceRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TradingMarketplaceRoleGranted represents a RoleGranted event raised by the TradingMarketplace contract.
type TradingMarketplaceRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_TradingMarketplace *TradingMarketplaceFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*TradingMarketplaceRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _TradingMarketplace.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &TradingMarketplaceRoleGrantedIterator{contract: _TradingMarketplace.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_TradingMarketplace *TradingMarketplaceFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *TradingMarketplaceRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _TradingMarketplace.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TradingMarketplaceRoleGranted)
				if err := _TradingMarketplace.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_TradingMarketplace *TradingMarketplaceFilterer) ParseRoleGranted(log types.Log) (*TradingMarketplaceRoleGranted, error) {
	event := new(TradingMarketplaceRoleGranted)
	if err := _TradingMarketplace.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TradingMarketplaceRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the TradingMarketplace contract.
type TradingMarketplaceRoleRevokedIterator struct {
	Event *TradingMarketplaceRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TradingMarketplaceRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TradingMarketplaceRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TradingMarketplaceRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TradingMarketplaceRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TradingMarketplaceRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TradingMarketplaceRoleRevoked represents a RoleRevoked event raised by the TradingMarketplace contract.
type TradingMarketplaceRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_TradingMarketplace *TradingMarketplaceFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*TradingMarketplaceRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _TradingMarketplace.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &TradingMarketplaceRoleRevokedIterator{contract: _TradingMarketplace.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_TradingMarketplace *TradingMarketplaceFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *TradingMarketplaceRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _TradingMarketplace.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TradingMarketplaceRoleRevoked)
				if err := _TradingMarketplace.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_TradingMarketplace *TradingMarketplaceFilterer) ParseRoleRevoked(log types.Log) (*TradingMarketplaceRoleRevoked, error) {
	event := new(TradingMarketplaceRoleRevoked)
	if err := _TradingMarketplace.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TradingMarketplaceTradingCancelledIterator is returned from FilterTradingCancelled and is used to iterate over the raw logs and unpacked data for TradingCancelled events raised by the TradingMarketplace contract.
type TradingMarketplaceTradingCancelledIterator struct {
	Event *TradingMarketplaceTradingCancelled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TradingMarketplaceTradingCancelledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TradingMarketplaceTradingCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TradingMarketplaceTradingCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TradingMarketplaceTradingCancelledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TradingMarketplaceTradingCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TradingMarketplaceTradingCancelled represents a TradingCancelled event raised by the TradingMarketplace contract.
type TradingMarketplaceTradingCancelled struct {
	Who common.Address
	Id  [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTradingCancelled is a free log retrieval operation binding the contract event 0x559020ef5970f017b414f50b16b6cacd96c9bbb8fd863b9d71ab3d3222d781fa.
//
// Solidity: event TradingCancelled(address who, bytes32 id)
func (_TradingMarketplace *TradingMarketplaceFilterer) FilterTradingCancelled(opts *bind.FilterOpts) (*TradingMarketplaceTradingCancelledIterator, error) {

	logs, sub, err := _TradingMarketplace.contract.FilterLogs(opts, "TradingCancelled")
	if err != nil {
		return nil, err
	}
	return &TradingMarketplaceTradingCancelledIterator{contract: _TradingMarketplace.contract, event: "TradingCancelled", logs: logs, sub: sub}, nil
}

// WatchTradingCancelled is a free log subscription operation binding the contract event 0x559020ef5970f017b414f50b16b6cacd96c9bbb8fd863b9d71ab3d3222d781fa.
//
// Solidity: event TradingCancelled(address who, bytes32 id)
func (_TradingMarketplace *TradingMarketplaceFilterer) WatchTradingCancelled(opts *bind.WatchOpts, sink chan<- *TradingMarketplaceTradingCancelled) (event.Subscription, error) {

	logs, sub, err := _TradingMarketplace.contract.WatchLogs(opts, "TradingCancelled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TradingMarketplaceTradingCancelled)
				if err := _TradingMarketplace.contract.UnpackLog(event, "TradingCancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTradingCancelled is a log parse operation binding the contract event 0x559020ef5970f017b414f50b16b6cacd96c9bbb8fd863b9d71ab3d3222d781fa.
//
// Solidity: event TradingCancelled(address who, bytes32 id)
func (_TradingMarketplace *TradingMarketplaceFilterer) ParseTradingCancelled(log types.Log) (*TradingMarketplaceTradingCancelled, error) {
	event := new(TradingMarketplaceTradingCancelled)
	if err := _TradingMarketplace.contract.UnpackLog(event, "TradingCancelled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TradingMarketplaceTradingCreatedIterator is returned from FilterTradingCreated and is used to iterate over the raw logs and unpacked data for TradingCreated events raised by the TradingMarketplace contract.
type TradingMarketplaceTradingCreatedIterator struct {
	Event *TradingMarketplaceTradingCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TradingMarketplaceTradingCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TradingMarketplaceTradingCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TradingMarketplaceTradingCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TradingMarketplaceTradingCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TradingMarketplaceTradingCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TradingMarketplaceTradingCreated represents a TradingCreated event raised by the TradingMarketplace contract.
type TradingMarketplaceTradingCreated struct {
	TradingId  [32]byte
	AssetId    *big.Int
	Seller     common.Address
	NftAddress common.Address
	PriceInWei *big.Int
	ExpiredAt  *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTradingCreated is a free log retrieval operation binding the contract event 0x80d7cd14a57c43d79381c3567166d2e66efc27aa3d0dca4b41e7a3fd736569c6.
//
// Solidity: event TradingCreated(bytes32 tradingId, uint256 assetId, address seller, address nftAddress, uint256 priceInWei, uint256 expiredAt)
func (_TradingMarketplace *TradingMarketplaceFilterer) FilterTradingCreated(opts *bind.FilterOpts) (*TradingMarketplaceTradingCreatedIterator, error) {

	logs, sub, err := _TradingMarketplace.contract.FilterLogs(opts, "TradingCreated")
	if err != nil {
		return nil, err
	}
	return &TradingMarketplaceTradingCreatedIterator{contract: _TradingMarketplace.contract, event: "TradingCreated", logs: logs, sub: sub}, nil
}

// WatchTradingCreated is a free log subscription operation binding the contract event 0x80d7cd14a57c43d79381c3567166d2e66efc27aa3d0dca4b41e7a3fd736569c6.
//
// Solidity: event TradingCreated(bytes32 tradingId, uint256 assetId, address seller, address nftAddress, uint256 priceInWei, uint256 expiredAt)
func (_TradingMarketplace *TradingMarketplaceFilterer) WatchTradingCreated(opts *bind.WatchOpts, sink chan<- *TradingMarketplaceTradingCreated) (event.Subscription, error) {

	logs, sub, err := _TradingMarketplace.contract.WatchLogs(opts, "TradingCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TradingMarketplaceTradingCreated)
				if err := _TradingMarketplace.contract.UnpackLog(event, "TradingCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTradingCreated is a log parse operation binding the contract event 0x80d7cd14a57c43d79381c3567166d2e66efc27aa3d0dca4b41e7a3fd736569c6.
//
// Solidity: event TradingCreated(bytes32 tradingId, uint256 assetId, address seller, address nftAddress, uint256 priceInWei, uint256 expiredAt)
func (_TradingMarketplace *TradingMarketplaceFilterer) ParseTradingCreated(log types.Log) (*TradingMarketplaceTradingCreated, error) {
	event := new(TradingMarketplaceTradingCreated)
	if err := _TradingMarketplace.contract.UnpackLog(event, "TradingCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TradingMarketplaceTradingSuccessfulIterator is returned from FilterTradingSuccessful and is used to iterate over the raw logs and unpacked data for TradingSuccessful events raised by the TradingMarketplace contract.
type TradingMarketplaceTradingSuccessfulIterator struct {
	Event *TradingMarketplaceTradingSuccessful // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TradingMarketplaceTradingSuccessfulIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TradingMarketplaceTradingSuccessful)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TradingMarketplaceTradingSuccessful)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TradingMarketplaceTradingSuccessfulIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TradingMarketplaceTradingSuccessfulIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TradingMarketplaceTradingSuccessful represents a TradingSuccessful event raised by the TradingMarketplace contract.
type TradingMarketplaceTradingSuccessful struct {
	Id     [32]byte
	Buyer  common.Address
	Seller common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTradingSuccessful is a free log retrieval operation binding the contract event 0x5cb1fd7912ab2064b667d5d47f54a6a7e64fab88792e1859853ac3c6a3dd9f63.
//
// Solidity: event TradingSuccessful(bytes32 id, address buyer, address seller)
func (_TradingMarketplace *TradingMarketplaceFilterer) FilterTradingSuccessful(opts *bind.FilterOpts) (*TradingMarketplaceTradingSuccessfulIterator, error) {

	logs, sub, err := _TradingMarketplace.contract.FilterLogs(opts, "TradingSuccessful")
	if err != nil {
		return nil, err
	}
	return &TradingMarketplaceTradingSuccessfulIterator{contract: _TradingMarketplace.contract, event: "TradingSuccessful", logs: logs, sub: sub}, nil
}

// WatchTradingSuccessful is a free log subscription operation binding the contract event 0x5cb1fd7912ab2064b667d5d47f54a6a7e64fab88792e1859853ac3c6a3dd9f63.
//
// Solidity: event TradingSuccessful(bytes32 id, address buyer, address seller)
func (_TradingMarketplace *TradingMarketplaceFilterer) WatchTradingSuccessful(opts *bind.WatchOpts, sink chan<- *TradingMarketplaceTradingSuccessful) (event.Subscription, error) {

	logs, sub, err := _TradingMarketplace.contract.WatchLogs(opts, "TradingSuccessful")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TradingMarketplaceTradingSuccessful)
				if err := _TradingMarketplace.contract.UnpackLog(event, "TradingSuccessful", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTradingSuccessful is a log parse operation binding the contract event 0x5cb1fd7912ab2064b667d5d47f54a6a7e64fab88792e1859853ac3c6a3dd9f63.
//
// Solidity: event TradingSuccessful(bytes32 id, address buyer, address seller)
func (_TradingMarketplace *TradingMarketplaceFilterer) ParseTradingSuccessful(log types.Log) (*TradingMarketplaceTradingSuccessful, error) {
	event := new(TradingMarketplaceTradingSuccessful)
	if err := _TradingMarketplace.contract.UnpackLog(event, "TradingSuccessful", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TradingMarketplaceUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the TradingMarketplace contract.
type TradingMarketplaceUnpausedIterator struct {
	Event *TradingMarketplaceUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TradingMarketplaceUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TradingMarketplaceUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TradingMarketplaceUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TradingMarketplaceUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TradingMarketplaceUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TradingMarketplaceUnpaused represents a Unpaused event raised by the TradingMarketplace contract.
type TradingMarketplaceUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_TradingMarketplace *TradingMarketplaceFilterer) FilterUnpaused(opts *bind.FilterOpts) (*TradingMarketplaceUnpausedIterator, error) {

	logs, sub, err := _TradingMarketplace.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &TradingMarketplaceUnpausedIterator{contract: _TradingMarketplace.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_TradingMarketplace *TradingMarketplaceFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *TradingMarketplaceUnpaused) (event.Subscription, error) {

	logs, sub, err := _TradingMarketplace.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TradingMarketplaceUnpaused)
				if err := _TradingMarketplace.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_TradingMarketplace *TradingMarketplaceFilterer) ParseUnpaused(log types.Log) (*TradingMarketplaceUnpaused, error) {
	event := new(TradingMarketplaceUnpaused)
	if err := _TradingMarketplace.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
