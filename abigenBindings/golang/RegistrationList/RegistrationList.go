// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package RegistrationList

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// RegistrationListMetaData contains all meta data concerning the RegistrationList contract.
var RegistrationListMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nlggt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"raceReward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"raceList\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadySelected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotNLGGTHolder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RaceNotExisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardIsExisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardIsNotExisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardNotExistedOrReceived\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TooEarly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TooLate\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nlggt\",\"type\":\"address\"}],\"name\":\"NlggtUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"ParticipantsSelected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"race\",\"type\":\"address\"}],\"name\":\"RaceListUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"}],\"name\":\"RandomInProgress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftRewardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes1\",\"name\":\"resultIndex\",\"type\":\"bytes1\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftRewardId\",\"type\":\"uint256\"}],\"name\":\"RewardReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftRewardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes1\",\"name\":\"resultIndex\",\"type\":\"bytes1\"}],\"name\":\"RewardRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"}],\"name\":\"selectParticipant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nftRewardId\",\"type\":\"uint256\"},{\"internalType\":\"bytes1\",\"name\":\"resultIndex\",\"type\":\"bytes1\"}],\"name\":\"addRewardByTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nftRewardId\",\"type\":\"uint256\"},{\"internalType\":\"bytes1\",\"name\":\"resultIndex\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"addRewardByMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"receiveReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"raceList\",\"type\":\"address\"}],\"name\":\"updateRaceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nlggt\",\"type\":\"address\"}],\"name\":\"updateNlggtAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"}],\"name\":\"selectedParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"selectedParticipant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"}],\"name\":\"totalRegister\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nftRewardId\",\"type\":\"uint256\"},{\"internalType\":\"bytes1\",\"name\":\"resultIndex\",\"type\":\"bytes1\"}],\"name\":\"removeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b506040516200550f3803806200550f8339818101604052810190620000379190620008cf565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050506200009062000084620003cb60201b60201c565b620003d360201b60201c565b6000600260146101000a81548160ff021916908315150217905550620000cf6000801b620000c3620003cb60201b60201c565b6200049960201b60201c565b620001107fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177562000104620003cb60201b60201c565b6200049960201b60201c565b620001627f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775620004af60201b60201c565b6200018e8573ffffffffffffffffffffffffffffffffffffffff166200051260201b6200279a1760201c565b620001c5576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620001f18373ffffffffffffffffffffffffffffffffffffffff166200051260201b6200279a1760201c565b62000228576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620002548473ffffffffffffffffffffffffffffffffffffffff166200051260201b6200279a1760201c565b6200028b576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060078190555081600860006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505050505062000a05565b600033905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620004ab82826200052560201b60201c565b5050565b6000620004c283620005f360201b60201c565b905081600080858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b600080823b905060008111915050919050565b6200053c82826200061260201b620027ad1760201c565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758214806200056d57506000801b82145b15620005ef57620005aa7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a826200061260201b620027ad1760201c565b6000801b821415620005ee57620005ed7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775826200061260201b620027ad1760201c565b5b5b5050565b6000806000838152602001908152602001600020600101549050919050565b6200062982826200065a60201b620027e11760201c565b6200065581600160008581526020019081526020016000206200074b60201b620028c11790919060201c565b505050565b6200066c82826200078360201b60201c565b6200074757600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620006ec620003cb60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006200077b836000018373ffffffffffffffffffffffffffffffffffffffff1660001b620007ed60201b60201c565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006200080183836200086760201b60201c565b6200085c57826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905062000861565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000815190506200089b81620009b7565b92915050565b600081519050620008b281620009d1565b92915050565b600081519050620008c981620009eb565b92915050565b60008060008060008060c08789031215620008e957600080fd5b6000620008f989828a016200088a565b96505060206200090c89828a016200088a565b95505060406200091f89828a016200088a565b94505060606200093289828a016200088a565b93505060806200094589828a01620008b8565b92505060a06200095889828a01620008a1565b9150509295509295509295565b6000620009728262000983565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b620009c28162000965565b8114620009ce57600080fd5b50565b620009dc8162000979565b8114620009e857600080fd5b50565b620009f681620009a3565b811462000a0257600080fd5b50565b60805160601c614ae462000a2b60003960008181610fd201526110260152614ae46000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80637d0f79b711610104578063a217fddf116100a2578063d6641f0611610071578063d6641f0614610551578063d7c499381461056d578063e63ab1e914610589578063f2fde38b146105a7576101da565b8063a217fddf146104b7578063be7cb219146104d5578063ca15c87314610505578063d547741f14610535576101da565b80638456cb59116100de5780638456cb591461042f5780638da5cb5b146104395780639010d07c1461045757806391d1485414610487576101da565b80637d0f79b7146103b357806381357309146103e357806381a2deb4146103ff576101da565b80632965d8091161017c5780635c975abb1161014b5780635c975abb146103515780636bef76da1461036f578063715018a61461038b57806375b238fc14610395576101da565b80632965d809146102f35780632f2ff15d1461030f57806336568abe1461032b5780633f4ba83a14610347576101da565b8063150b7a02116101b8578063150b7a021461025b5780631a0fc7151461028b5780631fe543e3146102a7578063248a9ca3146102c3576101da565b806301ffc9a7146101df5780630506f9ef1461020f5780630fa445f51461023f575b600080fd5b6101f960048036038101906101f49190613c45565b6105c3565b604051610206919061419a565b60405180910390f35b61022960048036038101906102249190613ada565b61063d565b6040516102369190614156565b60405180910390f35b61025960048036038101906102549190613b7b565b61082b565b005b61027560048036038101906102709190613a5a565b610b7c565b6040516102829190614291565b60405180910390f35b6102a560048036038101906102a09190613b3f565b610baa565b005b6102c160048036038101906102bc9190613cc0565b610fd0565b005b6102dd60048036038101906102d89190613ada565b611090565b6040516102ea91906141b5565b60405180910390f35b61030d60048036038101906103089190613d14565b6110af565b005b61032960048036038101906103249190613b03565b611507565b005b61034560048036038101906103409190613b03565b611530565b005b61034f6115b3565b005b6103596115f0565b604051610366919061419a565b60405180910390f35b61038960048036038101906103849190613bca565b611607565b005b610393611952565b005b61039d6119da565b6040516103aa91906141b5565b60405180910390f35b6103cd60048036038101906103c89190613ada565b6119fe565b6040516103da919061438e565b60405180910390f35b6103fd60048036038101906103f89190613b7b565b611cec565b005b61041960048036038101906104149190613b3f565b61203d565b604051610426919061409d565b60405180910390f35b610437612170565b005b6104416121ad565b60405161044e919061409d565b60405180910390f35b610471600480360381019061046c9190613b3f565b6121d7565b60405161047e919061409d565b60405180910390f35b6104a1600480360381019061049c9190613b03565b612206565b6040516104ae919061419a565b60405180910390f35b6104bf612270565b6040516104cc91906141b5565b60405180910390f35b6104ef60048036038101906104ea9190613ada565b612277565b6040516104fc9190614178565b60405180910390f35b61051f600480360381019061051a9190613ada565b612439565b60405161052c919061438e565b60405180910390f35b61054f600480360381019061054a9190613b03565b61245d565b005b61056b60048036038101906105669190613a31565b612486565b005b61058760048036038101906105829190613a31565b61257c565b005b610591612672565b60405161059e91906141b5565b60405180910390f35b6105c160048036038101906105bc9190613a31565b612696565b005b60007faabba0b3000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106365750610635826128f1565b5b9050919050565b60606000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f70125db846040518263ffffffff1660e01b815260040161069c91906141b5565b60c06040518083038186803b1580156106b457600080fd5b505afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec9190613c6e565b90506000816040015167ffffffffffffffff811115610734577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156107625781602001602082028036833780820191505090505b5090506000600b600086815260200190815260200160002054146108215760005b826040015181101561081f57610799858261203d565b8282815181106107d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806108179061478f565b915050610783565b505b8092505050919050565b6108336115f0565b15610873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086a9061432e565b60405180910390fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756108a5816108a061296b565b612973565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f70125db866040518263ffffffff1660e01b815260040161090291906141b5565b60c06040518083038186803b15801561091a57600080fd5b505afa15801561092e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109529190613c6e565b9050600081606001511415610993576040517fe2a9931a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600d60008781526020019081526020016000206000857effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205414610a34576040517fa8c58c3f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e30610a7b61296b565b876040518463ffffffff1660e01b8152600401610a9a939291906140e1565b600060405180830381600087803b158015610ab457600080fd5b505af1158015610ac8573d6000803e3d6000fd5b505050506000600d60008781526020019081526020016000206000857effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055507fddda89b96dee97fe43f9803c50584f6dd667bedc8b02a7c75407e6906bf31ead858585604051610b6d939291906141d0565b60405180910390a15050505050565b60007f150b7a023d4804d13e8c85fb27262cb750cf6ba9f9dd3bb30d90f482ceeb4b1f905095945050505050565b610bb26115f0565b15610bf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be99061432e565b60405180910390fd5b6000610bfe838361203d565b9050610c0861296b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c6c576040517fddb5de5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f70125db856040518263ffffffff1660e01b8152600401610cc991906141b5565b60c06040518083038186803b158015610ce157600080fd5b505afa158015610cf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d199190613c6e565b9050600081606001511415610d5a576040517fe2a9931a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d678160800151612a10565b6000600d600086815260200190815260200160002060008360a001518660208110610dbb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205490506000811415610e4f576040517f370a7f9100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600d600087815260200190815260200160002060008460a001518760208110610ea3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002081905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3085846040518463ffffffff1660e01b8152600401610f5c939291906140e1565b600060405180830381600087803b158015610f7657600080fd5b505af1158015610f8a573d6000803e3d6000fd5b505050507fe2ece170b35ae79cbe45ffdaf4931b8bc45056da5d3e9aa4aea67fcdf307929a858583604051610fc193929190614207565b60405180910390a15050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461108257337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016110799291906140b8565b60405180910390fd5b61108c8282612a57565b5050565b6000806000838152602001908152602001600020600101549050919050565b6110b76115f0565b156110f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ee9061432e565b60405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a0823161113f61296b565b6040518263ffffffff1660e01b815260040161115b919061409d565b60206040518083038186803b15801561117357600080fd5b505afa158015611187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ab9190613c97565b14156111e3576040517f729c95c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f70125db836040518263ffffffff1660e01b815260040161124091906141b5565b60c06040518083038186803b15801561125857600080fd5b505afa15801561126c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112909190613c6e565b90506000816060015114156112d1576040517fe2a9931a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060400151831061130e576040517f1258e44300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a6000838152602001908152602001600020600061132b61296b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156113aa576040517f3a81d6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113b78160600151612a10565b6113c48160800151612b5b565b6001600a600084815260200190815260200160002060006113e361296b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060096000838152602001908152602001600020600084815260200190815260200160002061146061296b565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd62c7bd2779dc6ebe426bed623399b1fc1d190c063eadefcffffb1efe6f253ef836114ea61296b565b846040516114fa939291906143a9565b60405180910390a1505050565b61151082611090565b6115218161151c61296b565b612973565b61152b8383612ba2565b505050565b61153861296b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146115a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159c9061436e565b60405180910390fd5b6115af8282612c46565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6115e5816115e061296b565b612973565b6115ed612cea565b50565b6000600260149054906101000a900460ff16905090565b61160f6115f0565b1561164f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116469061432e565b60405180910390fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756116818161167c61296b565b612973565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f70125db876040518263ffffffff1660e01b81526004016116de91906141b5565b60c06040518083038186803b1580156116f657600080fd5b505afa15801561170a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172e9190613c6e565b905060008160600151141561176f576040517fe2a9931a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600d60008881526020019081526020016000206000867effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205414611811576040517f4fd9511700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d3fc98643087866040518463ffffffff1660e01b815260040161187093929190614118565b600060405180830381600087803b15801561188a57600080fd5b505af115801561189e573d6000803e3d6000fd5b5050505084600d60008881526020019081526020016000206000867effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055507f2b942e265bd6d4ca5617a327f9a60e1a85f4351aaa0be2a84cda1cf9d32c8c04868686604051611942939291906141d0565b60405180910390a1505050505050565b61195a61296b565b73ffffffffffffffffffffffffffffffffffffffff166119786121ad565b73ffffffffffffffffffffffffffffffffffffffff16146119ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c59061434e565b60405180910390fd5b6119d86000612d8c565b565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6000611a086115f0565b15611a48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3f9061432e565b60405180910390fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611a7a81611a7561296b565b612973565b6000600b60008581526020019081526020016000205414611ac7576040517f6541c70700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f70125db856040518263ffffffff1660e01b8152600401611b2491906141b5565b60c06040518083038186803b158015611b3c57600080fd5b505afa158015611b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b749190613c6e565b9050600081606001511415611bb5576040517fe2a9931a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611bc28160800151612a10565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600754600860009054906101000a900467ffffffffffffffff166003620186a060016040518663ffffffff1660e01b8152600401611c4295949392919061423e565b602060405180830381600087803b158015611c5c57600080fd5b505af1158015611c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c949190613c97565b925083600c6000858152602001908152602001600020819055507f018dc112e9dad7765a03056b4091d237454ee37ae27aab3c3abd16d428900a1384604051611cdd91906141b5565b60405180910390a15050919050565b611cf46115f0565b15611d34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2b9061432e565b60405180910390fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611d6681611d6161296b565b612973565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f70125db866040518263ffffffff1660e01b8152600401611dc391906141b5565b60c06040518083038186803b158015611ddb57600080fd5b505afa158015611def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e139190613c6e565b9050600081606001511415611e54576040517fe2a9931a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600d60008781526020019081526020016000206000857effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205414611ef6576040517f4fd9511700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e611f3c61296b565b30876040518463ffffffff1660e01b8152600401611f5c939291906140e1565b600060405180830381600087803b158015611f7657600080fd5b505af1158015611f8a573d6000803e3d6000fd5b5050505083600d60008781526020019081526020016000206000857effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055507f2b942e265bd6d4ca5617a327f9a60e1a85f4351aaa0be2a84cda1cf9d32c8c0485858560405161202e939291906141d0565b60405180910390a15050505050565b600080600b60008581526020019081526020016000205414806120875750600060096000858152602001908152602001600020600084815260200190815260200160002080549050145b15612095576000905061216a565b600060096000858152602001908152602001600020600084815260200190815260200160002080549050600b6000868152602001908152602001600020546120dd91906147d8565b9050600960008581526020019081526020016000206000848152602001908152602001600020818154811061213b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150505b92915050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6121a28161219d61296b565b612973565b6121aa612e52565b50565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006121fe8260016000868152602001908152602001600020612ef590919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b60606000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f70125db846040518263ffffffff1660e01b81526004016122d691906141b5565b60c06040518083038186803b1580156122ee57600080fd5b505afa158015612302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123269190613c6e565b90506000816040015167ffffffffffffffff81111561236e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561239c5781602001602082028036833780820191505090505b50905060005b826040015181101561242e576009600086815260200190815260200160002060008281526020019081526020016000208054905082828151811061240f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080806124269061478f565b9150506123a2565b508092505050919050565b600061245660016000848152602001908152602001600020612f0f565b9050919050565b61246682611090565b6124778161247261296b565b612973565b6124818383612c46565b505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756124b8816124b361296b565b612973565b6124c06115f0565b15612500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124f79061432e565b60405180910390fd5b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f5660a1e6d6115d84caa3bc631133061cbc77b46ff3be76d65178ae3243446b9882604051612570919061409d565b60405180910390a15050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756125ae816125a961296b565b612973565b6125b66115f0565b156125f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ed9061432e565b60405180910390fd5b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f7a659342c2b03e1c14729e3f1c86f414756d13bd8ff0636713cc22246182b42d82604051612666919061409d565b60405180910390a15050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b61269e61296b565b73ffffffffffffffffffffffffffffffffffffffff166126bc6121ad565b73ffffffffffffffffffffffffffffffffffffffff1614612712576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127099061434e565b60405180910390fd5b61273c7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582612ba2565b6127496000801b82612ba2565b61277a7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756127756121ad565b612c46565b61278e6000801b6127896121ad565b612c46565b61279781612f24565b50565b600080823b905060008111915050919050565b6127b782826127e1565b6127dc81600160008581526020019081526020016000206128c190919063ffffffff16565b505050565b6127eb8282612206565b6128bd57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061286261296b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006128e9836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61301c565b905092915050565b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061296457506129638261308c565b5b9050919050565b600033905090565b61297d8282612206565b612a0c576129a28173ffffffffffffffffffffffffffffffffffffffff166014613106565b6129b08360001c6020613106565b6040516020016129c1929190614063565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0391906142ac565b60405180910390fd5b5050565b804211612a5457806040517f2a35a324000000000000000000000000000000000000000000000000000000008152600401612a4b919061438e565b60405180910390fd5b50565b6000600c6000848152602001908152602001600020549050600082600081518110612aab577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000600b60008481526020019081526020016000205414612b02576040517f6541c70700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600b6000848152602001908152602001600020819055507f5a1c9864d9d35edf19fb83e7a07ad46d28d80307bd248fb165e8814a1d1cfe2b848383604051612b4d939291906143e0565b60405180910390a150505050565b804210612b9f57806040517f691e5682000000000000000000000000000000000000000000000000000000008152600401612b96919061438e565b60405180910390fd5b50565b612bac82826127ad565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775821480612bdc57506000801b82145b15612c4257612c0b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a826127ad565b6000801b821415612c4157612c407fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775826127ad565b5b5b5050565b612c508282613400565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775821480612c8057506000801b82145b15612ce657612caf7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a82613400565b6000801b821415612ce557612ce47fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775826127ad565b5b5b5050565b612cf26115f0565b612d31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d28906142ee565b60405180910390fd5b6000600260146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612d7561296b565b604051612d82919061409d565b60405180910390a1565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612e5a6115f0565b15612e9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e919061432e565b60405180910390fd5b6001600260146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612ede61296b565b604051612eeb919061409d565b60405180910390a1565b6000612f048360000183613434565b60001c905092915050565b6000612f1d82600001613485565b9050919050565b612f2c61296b565b73ffffffffffffffffffffffffffffffffffffffff16612f4a6121ad565b73ffffffffffffffffffffffffffffffffffffffff1614612fa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f979061434e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613010576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130079061430e565b60405180910390fd5b61301981612d8c565b50565b60006130288383613496565b613081578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050613086565b600090505b92915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806130ff57506130fe826134b9565b5b9050919050565b6060600060028360026131199190614588565b6131239190614532565b67ffffffffffffffff811115613162577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156131945781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106131f2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061327c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026132bc9190614588565b6132c69190614532565b90505b60018111156133b2577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061332e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b82828151811061336b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806133ab90614734565b90506132c9565b50600084146133f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133ed906142ce565b60405180910390fd5b8091505092915050565b61340a8282613523565b61342f816001600085815260200190815260200160002061360490919063ffffffff16565b505050565b6000826000018281548110613472577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61352d8282612206565b1561360057600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506135a561296b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600061362c836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613634565b905092915050565b600080836001016000848152602001908152602001600020549050600081146137ae57600060018261366691906145e2565b905060006001866000018054905061367e91906145e2565b90508181146137395760008660000182815481106136c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490508087600001848154811061370f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480613773577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506137b4565b60009150505b92915050565b60006137cd6137c88461443c565b614417565b905080838252602082019050828560208602820111156137ec57600080fd5b60005b8581101561381c57816138028882613a07565b8452602084019350602083019250506001810190506137ef565b5050509392505050565b600061383961383484614468565b614417565b90508281526020810184848401111561385157600080fd5b61385c8482856146f2565b509392505050565b60008135905061387381614a3b565b92915050565b600082601f83011261388a57600080fd5b813561389a8482602086016137ba565b91505092915050565b6000813590506138b281614a52565b92915050565b6000813590506138c781614a69565b92915050565b6000815190506138dc81614a69565b92915050565b6000813590506138f181614a80565b92915050565b60008083601f84011261390957600080fd5b8235905067ffffffffffffffff81111561392257600080fd5b60208301915083600182028301111561393a57600080fd5b9250929050565b600082601f83011261395257600080fd5b8135613962848260208601613826565b91505092915050565b600060c0828403121561397d57600080fd5b61398760c0614417565b9050600061399784828501613a1c565b60008301525060206139ab84828501613a1c565b60208301525060406139bf84828501613a1c565b60408301525060606139d384828501613a1c565b60608301525060806139e784828501613a1c565b60808301525060a06139fb848285016138cd565b60a08301525092915050565b600081359050613a1681614a97565b92915050565b600081519050613a2b81614a97565b92915050565b600060208284031215613a4357600080fd5b6000613a5184828501613864565b91505092915050565b600080600080600060808688031215613a7257600080fd5b6000613a8088828901613864565b9550506020613a9188828901613864565b9450506040613aa288828901613a07565b935050606086013567ffffffffffffffff811115613abf57600080fd5b613acb888289016138f7565b92509250509295509295909350565b600060208284031215613aec57600080fd5b6000613afa848285016138b8565b91505092915050565b60008060408385031215613b1657600080fd5b6000613b24858286016138b8565b9250506020613b3585828601613864565b9150509250929050565b60008060408385031215613b5257600080fd5b6000613b60858286016138b8565b9250506020613b7185828601613a07565b9150509250929050565b600080600060608486031215613b9057600080fd5b6000613b9e868287016138b8565b9350506020613baf86828701613a07565b9250506040613bc0868287016138a3565b9150509250925092565b60008060008060808587031215613be057600080fd5b6000613bee878288016138b8565b9450506020613bff87828801613a07565b9350506040613c10878288016138a3565b925050606085013567ffffffffffffffff811115613c2d57600080fd5b613c3987828801613941565b91505092959194509250565b600060208284031215613c5757600080fd5b6000613c65848285016138e2565b91505092915050565b600060c08284031215613c8057600080fd5b6000613c8e8482850161396b565b91505092915050565b600060208284031215613ca957600080fd5b6000613cb784828501613a1c565b91505092915050565b60008060408385031215613cd357600080fd5b6000613ce185828601613a07565b925050602083013567ffffffffffffffff811115613cfe57600080fd5b613d0a85828601613879565b9150509250929050565b60008060408385031215613d2757600080fd5b6000613d3585828601613a07565b9250506020613d46858286016138b8565b9150509250929050565b6000613d5c8383613d80565b60208301905092915050565b6000613d748383614027565b60208301905092915050565b613d8981614616565b82525050565b613d9881614616565b82525050565b6000613da9826144b9565b613db381856144f4565b9350613dbe83614499565b8060005b83811015613def578151613dd68882613d50565b9750613de1836144da565b925050600181019050613dc2565b5085935050505092915050565b6000613e07826144c4565b613e118185614505565b9350613e1c836144a9565b8060005b83811015613e4d578151613e348882613d68565b9750613e3f836144e7565b925050600181019050613e20565b5085935050505092915050565b613e6381614628565b82525050565b613e7281614634565b82525050565b613e8181614660565b82525050565b613e908161466a565b82525050565b6000613ea1826144cf565b613eab8185614516565b9350613ebb818560208601614701565b613ec481614896565b840191505092915050565b6000613eda826144cf565b613ee48185614527565b9350613ef4818560208601614701565b80840191505092915050565b6000613f0d602083614516565b9150613f18826148a7565b602082019050919050565b6000613f30601483614516565b9150613f3b826148d0565b602082019050919050565b6000613f53602683614516565b9150613f5e826148f9565b604082019050919050565b6000613f76601083614516565b9150613f8182614948565b602082019050919050565b6000613f99602083614516565b9150613fa482614971565b602082019050919050565b6000613fbc601783614527565b9150613fc78261499a565b601782019050919050565b6000613fdf601183614527565b9150613fea826149c3565b601182019050919050565b6000614002602f83614516565b915061400d826149ec565b604082019050919050565b61402181614696565b82525050565b614030816146c4565b82525050565b61403f816146c4565b82525050565b61404e816146ce565b82525050565b61405d816146de565b82525050565b600061406e82613faf565b915061407a8285613ecf565b915061408582613fd2565b91506140918284613ecf565b91508190509392505050565b60006020820190506140b26000830184613d8f565b92915050565b60006040820190506140cd6000830185613d8f565b6140da6020830184613d8f565b9392505050565b60006060820190506140f66000830186613d8f565b6141036020830185613d8f565b6141106040830184614036565b949350505050565b600060608201905061412d6000830186613d8f565b61413a6020830185614036565b818103604083015261414c8184613e96565b9050949350505050565b600060208201905081810360008301526141708184613d9e565b905092915050565b600060208201905081810360008301526141928184613dfc565b905092915050565b60006020820190506141af6000830184613e5a565b92915050565b60006020820190506141ca6000830184613e78565b92915050565b60006060820190506141e56000830186613e78565b6141f26020830185614036565b6141ff6040830184613e69565b949350505050565b600060608201905061421c6000830186613e78565b6142296020830185614036565b6142366040830184614036565b949350505050565b600060a0820190506142536000830188613e78565b6142606020830187614054565b61426d6040830186614018565b61427a6060830185614045565b6142876080830184614045565b9695505050505050565b60006020820190506142a66000830184613e87565b92915050565b600060208201905081810360008301526142c68184613e96565b905092915050565b600060208201905081810360008301526142e781613f00565b9050919050565b6000602082019050818103600083015261430781613f23565b9050919050565b6000602082019050818103600083015261432781613f46565b9050919050565b6000602082019050818103600083015261434781613f69565b9050919050565b6000602082019050818103600083015261436781613f8c565b9050919050565b6000602082019050818103600083015261438781613ff5565b9050919050565b60006020820190506143a36000830184614036565b92915050565b60006060820190506143be6000830186614036565b6143cb6020830185613d8f565b6143d86040830184613e78565b949350505050565b60006060820190506143f56000830186614036565b6144026020830185613e78565b61440f6040830184614036565b949350505050565b6000614421614432565b905061442d828261475e565b919050565b6000604051905090565b600067ffffffffffffffff82111561445757614456614867565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561448357614482614867565b5b61448c82614896565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061453d826146c4565b9150614548836146c4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561457d5761457c614809565b5b828201905092915050565b6000614593826146c4565b915061459e836146c4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156145d7576145d6614809565b5b828202905092915050565b60006145ed826146c4565b91506145f8836146c4565b92508282101561460b5761460a614809565b5b828203905092915050565b6000614621826146a4565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b82818337600083830152505050565b60005b8381101561471f578082015181840152602081019050614704565b8381111561472e576000848401525b50505050565b600061473f826146c4565b9150600082141561475357614752614809565b5b600182039050919050565b61476782614896565b810181811067ffffffffffffffff8211171561478657614785614867565b5b80604052505050565b600061479a826146c4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156147cd576147cc614809565b5b600182019050919050565b60006147e3826146c4565b91506147ee836146c4565b9250826147fe576147fd614838565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b614a4481614616565b8114614a4f57600080fd5b50565b614a5b81614634565b8114614a6657600080fd5b50565b614a7281614660565b8114614a7d57600080fd5b50565b614a898161466a565b8114614a9457600080fd5b50565b614aa0816146c4565b8114614aab57600080fd5b5056fea2646970667358221220bfa9941623f93f468402a8b2e194d17ee722d61c5ad41e658e73152d444e1bf964736f6c63430008040033",
}

// RegistrationListABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistrationListMetaData.ABI instead.
var RegistrationListABI = RegistrationListMetaData.ABI

// RegistrationListBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RegistrationListMetaData.Bin instead.
var RegistrationListBin = RegistrationListMetaData.Bin

// DeployRegistrationList deploys a new Ethereum contract, binding an instance of RegistrationList to it.
func DeployRegistrationList(auth *bind.TransactOpts, backend bind.ContractBackend, vrfCoordinator common.Address, nlggt common.Address, raceReward common.Address, raceList common.Address, subscriptionId uint64, keyHash [32]byte) (common.Address, *types.Transaction, *RegistrationList, error) {
	parsed, err := RegistrationListMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RegistrationListBin), backend, vrfCoordinator, nlggt, raceReward, raceList, subscriptionId, keyHash)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RegistrationList{RegistrationListCaller: RegistrationListCaller{contract: contract}, RegistrationListTransactor: RegistrationListTransactor{contract: contract}, RegistrationListFilterer: RegistrationListFilterer{contract: contract}}, nil
}

// RegistrationList is an auto generated Go binding around an Ethereum contract.
type RegistrationList struct {
	RegistrationListCaller     // Read-only binding to the contract
	RegistrationListTransactor // Write-only binding to the contract
	RegistrationListFilterer   // Log filterer for contract events
}

// RegistrationListCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistrationListCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrationListTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistrationListTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrationListFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistrationListFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrationListSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrationListSession struct {
	Contract     *RegistrationList // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistrationListCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistrationListCallerSession struct {
	Contract *RegistrationListCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// RegistrationListTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistrationListTransactorSession struct {
	Contract     *RegistrationListTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// RegistrationListRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistrationListRaw struct {
	Contract *RegistrationList // Generic contract binding to access the raw methods on
}

// RegistrationListCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistrationListCallerRaw struct {
	Contract *RegistrationListCaller // Generic read-only contract binding to access the raw methods on
}

// RegistrationListTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistrationListTransactorRaw struct {
	Contract *RegistrationListTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistrationList creates a new instance of RegistrationList, bound to a specific deployed contract.
func NewRegistrationList(address common.Address, backend bind.ContractBackend) (*RegistrationList, error) {
	contract, err := bindRegistrationList(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RegistrationList{RegistrationListCaller: RegistrationListCaller{contract: contract}, RegistrationListTransactor: RegistrationListTransactor{contract: contract}, RegistrationListFilterer: RegistrationListFilterer{contract: contract}}, nil
}

// NewRegistrationListCaller creates a new read-only instance of RegistrationList, bound to a specific deployed contract.
func NewRegistrationListCaller(address common.Address, caller bind.ContractCaller) (*RegistrationListCaller, error) {
	contract, err := bindRegistrationList(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistrationListCaller{contract: contract}, nil
}

// NewRegistrationListTransactor creates a new write-only instance of RegistrationList, bound to a specific deployed contract.
func NewRegistrationListTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistrationListTransactor, error) {
	contract, err := bindRegistrationList(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistrationListTransactor{contract: contract}, nil
}

// NewRegistrationListFilterer creates a new log filterer instance of RegistrationList, bound to a specific deployed contract.
func NewRegistrationListFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistrationListFilterer, error) {
	contract, err := bindRegistrationList(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistrationListFilterer{contract: contract}, nil
}

// bindRegistrationList binds a generic wrapper to an already deployed contract.
func bindRegistrationList(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistrationListABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistrationList *RegistrationListRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RegistrationList.Contract.RegistrationListCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistrationList *RegistrationListRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistrationList.Contract.RegistrationListTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistrationList *RegistrationListRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistrationList.Contract.RegistrationListTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistrationList *RegistrationListCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RegistrationList.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistrationList *RegistrationListTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistrationList.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistrationList *RegistrationListTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistrationList.Contract.contract.Transact(opts, method, params...)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_RegistrationList *RegistrationListCaller) ADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RegistrationList.contract.Call(opts, &out, "ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_RegistrationList *RegistrationListSession) ADMINROLE() ([32]byte, error) {
	return _RegistrationList.Contract.ADMINROLE(&_RegistrationList.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_RegistrationList *RegistrationListCallerSession) ADMINROLE() ([32]byte, error) {
	return _RegistrationList.Contract.ADMINROLE(&_RegistrationList.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_RegistrationList *RegistrationListCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RegistrationList.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_RegistrationList *RegistrationListSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _RegistrationList.Contract.DEFAULTADMINROLE(&_RegistrationList.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_RegistrationList *RegistrationListCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _RegistrationList.Contract.DEFAULTADMINROLE(&_RegistrationList.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_RegistrationList *RegistrationListCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RegistrationList.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_RegistrationList *RegistrationListSession) PAUSERROLE() ([32]byte, error) {
	return _RegistrationList.Contract.PAUSERROLE(&_RegistrationList.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_RegistrationList *RegistrationListCallerSession) PAUSERROLE() ([32]byte, error) {
	return _RegistrationList.Contract.PAUSERROLE(&_RegistrationList.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_RegistrationList *RegistrationListCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _RegistrationList.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_RegistrationList *RegistrationListSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _RegistrationList.Contract.GetRoleAdmin(&_RegistrationList.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_RegistrationList *RegistrationListCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _RegistrationList.Contract.GetRoleAdmin(&_RegistrationList.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_RegistrationList *RegistrationListCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _RegistrationList.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_RegistrationList *RegistrationListSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _RegistrationList.Contract.GetRoleMember(&_RegistrationList.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_RegistrationList *RegistrationListCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _RegistrationList.Contract.GetRoleMember(&_RegistrationList.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_RegistrationList *RegistrationListCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _RegistrationList.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_RegistrationList *RegistrationListSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _RegistrationList.Contract.GetRoleMemberCount(&_RegistrationList.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_RegistrationList *RegistrationListCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _RegistrationList.Contract.GetRoleMemberCount(&_RegistrationList.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_RegistrationList *RegistrationListCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _RegistrationList.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_RegistrationList *RegistrationListSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _RegistrationList.Contract.HasRole(&_RegistrationList.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_RegistrationList *RegistrationListCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _RegistrationList.Contract.HasRole(&_RegistrationList.CallOpts, role, account)
}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_RegistrationList *RegistrationListCaller) OnERC721Received(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	var out []interface{}
	err := _RegistrationList.contract.Call(opts, &out, "onERC721Received", arg0, arg1, arg2, arg3)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_RegistrationList *RegistrationListSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	return _RegistrationList.Contract.OnERC721Received(&_RegistrationList.CallOpts, arg0, arg1, arg2, arg3)
}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_RegistrationList *RegistrationListCallerSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	return _RegistrationList.Contract.OnERC721Received(&_RegistrationList.CallOpts, arg0, arg1, arg2, arg3)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RegistrationList *RegistrationListCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RegistrationList.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RegistrationList *RegistrationListSession) Owner() (common.Address, error) {
	return _RegistrationList.Contract.Owner(&_RegistrationList.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RegistrationList *RegistrationListCallerSession) Owner() (common.Address, error) {
	return _RegistrationList.Contract.Owner(&_RegistrationList.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RegistrationList *RegistrationListCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RegistrationList.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RegistrationList *RegistrationListSession) Paused() (bool, error) {
	return _RegistrationList.Contract.Paused(&_RegistrationList.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RegistrationList *RegistrationListCallerSession) Paused() (bool, error) {
	return _RegistrationList.Contract.Paused(&_RegistrationList.CallOpts)
}

// SelectedParticipant is a free data retrieval call binding the contract method 0x81a2deb4.
//
// Solidity: function selectedParticipant(bytes32 raceId, uint256 slotId) view returns(address)
func (_RegistrationList *RegistrationListCaller) SelectedParticipant(opts *bind.CallOpts, raceId [32]byte, slotId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _RegistrationList.contract.Call(opts, &out, "selectedParticipant", raceId, slotId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SelectedParticipant is a free data retrieval call binding the contract method 0x81a2deb4.
//
// Solidity: function selectedParticipant(bytes32 raceId, uint256 slotId) view returns(address)
func (_RegistrationList *RegistrationListSession) SelectedParticipant(raceId [32]byte, slotId *big.Int) (common.Address, error) {
	return _RegistrationList.Contract.SelectedParticipant(&_RegistrationList.CallOpts, raceId, slotId)
}

// SelectedParticipant is a free data retrieval call binding the contract method 0x81a2deb4.
//
// Solidity: function selectedParticipant(bytes32 raceId, uint256 slotId) view returns(address)
func (_RegistrationList *RegistrationListCallerSession) SelectedParticipant(raceId [32]byte, slotId *big.Int) (common.Address, error) {
	return _RegistrationList.Contract.SelectedParticipant(&_RegistrationList.CallOpts, raceId, slotId)
}

// SelectedParticipants is a free data retrieval call binding the contract method 0x0506f9ef.
//
// Solidity: function selectedParticipants(bytes32 raceId) view returns(address[])
func (_RegistrationList *RegistrationListCaller) SelectedParticipants(opts *bind.CallOpts, raceId [32]byte) ([]common.Address, error) {
	var out []interface{}
	err := _RegistrationList.contract.Call(opts, &out, "selectedParticipants", raceId)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// SelectedParticipants is a free data retrieval call binding the contract method 0x0506f9ef.
//
// Solidity: function selectedParticipants(bytes32 raceId) view returns(address[])
func (_RegistrationList *RegistrationListSession) SelectedParticipants(raceId [32]byte) ([]common.Address, error) {
	return _RegistrationList.Contract.SelectedParticipants(&_RegistrationList.CallOpts, raceId)
}

// SelectedParticipants is a free data retrieval call binding the contract method 0x0506f9ef.
//
// Solidity: function selectedParticipants(bytes32 raceId) view returns(address[])
func (_RegistrationList *RegistrationListCallerSession) SelectedParticipants(raceId [32]byte) ([]common.Address, error) {
	return _RegistrationList.Contract.SelectedParticipants(&_RegistrationList.CallOpts, raceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_RegistrationList *RegistrationListCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _RegistrationList.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_RegistrationList *RegistrationListSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _RegistrationList.Contract.SupportsInterface(&_RegistrationList.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_RegistrationList *RegistrationListCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _RegistrationList.Contract.SupportsInterface(&_RegistrationList.CallOpts, interfaceId)
}

// TotalRegister is a free data retrieval call binding the contract method 0xbe7cb219.
//
// Solidity: function totalRegister(bytes32 raceId) view returns(uint256[])
func (_RegistrationList *RegistrationListCaller) TotalRegister(opts *bind.CallOpts, raceId [32]byte) ([]*big.Int, error) {
	var out []interface{}
	err := _RegistrationList.contract.Call(opts, &out, "totalRegister", raceId)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// TotalRegister is a free data retrieval call binding the contract method 0xbe7cb219.
//
// Solidity: function totalRegister(bytes32 raceId) view returns(uint256[])
func (_RegistrationList *RegistrationListSession) TotalRegister(raceId [32]byte) ([]*big.Int, error) {
	return _RegistrationList.Contract.TotalRegister(&_RegistrationList.CallOpts, raceId)
}

// TotalRegister is a free data retrieval call binding the contract method 0xbe7cb219.
//
// Solidity: function totalRegister(bytes32 raceId) view returns(uint256[])
func (_RegistrationList *RegistrationListCallerSession) TotalRegister(raceId [32]byte) ([]*big.Int, error) {
	return _RegistrationList.Contract.TotalRegister(&_RegistrationList.CallOpts, raceId)
}

// AddRewardByMint is a paid mutator transaction binding the contract method 0x6bef76da.
//
// Solidity: function addRewardByMint(bytes32 raceId, uint256 nftRewardId, bytes1 resultIndex, string tokenURI) returns()
func (_RegistrationList *RegistrationListTransactor) AddRewardByMint(opts *bind.TransactOpts, raceId [32]byte, nftRewardId *big.Int, resultIndex [1]byte, tokenURI string) (*types.Transaction, error) {
	return _RegistrationList.contract.Transact(opts, "addRewardByMint", raceId, nftRewardId, resultIndex, tokenURI)
}

// AddRewardByMint is a paid mutator transaction binding the contract method 0x6bef76da.
//
// Solidity: function addRewardByMint(bytes32 raceId, uint256 nftRewardId, bytes1 resultIndex, string tokenURI) returns()
func (_RegistrationList *RegistrationListSession) AddRewardByMint(raceId [32]byte, nftRewardId *big.Int, resultIndex [1]byte, tokenURI string) (*types.Transaction, error) {
	return _RegistrationList.Contract.AddRewardByMint(&_RegistrationList.TransactOpts, raceId, nftRewardId, resultIndex, tokenURI)
}

// AddRewardByMint is a paid mutator transaction binding the contract method 0x6bef76da.
//
// Solidity: function addRewardByMint(bytes32 raceId, uint256 nftRewardId, bytes1 resultIndex, string tokenURI) returns()
func (_RegistrationList *RegistrationListTransactorSession) AddRewardByMint(raceId [32]byte, nftRewardId *big.Int, resultIndex [1]byte, tokenURI string) (*types.Transaction, error) {
	return _RegistrationList.Contract.AddRewardByMint(&_RegistrationList.TransactOpts, raceId, nftRewardId, resultIndex, tokenURI)
}

// AddRewardByTransfer is a paid mutator transaction binding the contract method 0x81357309.
//
// Solidity: function addRewardByTransfer(bytes32 raceId, uint256 nftRewardId, bytes1 resultIndex) returns()
func (_RegistrationList *RegistrationListTransactor) AddRewardByTransfer(opts *bind.TransactOpts, raceId [32]byte, nftRewardId *big.Int, resultIndex [1]byte) (*types.Transaction, error) {
	return _RegistrationList.contract.Transact(opts, "addRewardByTransfer", raceId, nftRewardId, resultIndex)
}

// AddRewardByTransfer is a paid mutator transaction binding the contract method 0x81357309.
//
// Solidity: function addRewardByTransfer(bytes32 raceId, uint256 nftRewardId, bytes1 resultIndex) returns()
func (_RegistrationList *RegistrationListSession) AddRewardByTransfer(raceId [32]byte, nftRewardId *big.Int, resultIndex [1]byte) (*types.Transaction, error) {
	return _RegistrationList.Contract.AddRewardByTransfer(&_RegistrationList.TransactOpts, raceId, nftRewardId, resultIndex)
}

// AddRewardByTransfer is a paid mutator transaction binding the contract method 0x81357309.
//
// Solidity: function addRewardByTransfer(bytes32 raceId, uint256 nftRewardId, bytes1 resultIndex) returns()
func (_RegistrationList *RegistrationListTransactorSession) AddRewardByTransfer(raceId [32]byte, nftRewardId *big.Int, resultIndex [1]byte) (*types.Transaction, error) {
	return _RegistrationList.Contract.AddRewardByTransfer(&_RegistrationList.TransactOpts, raceId, nftRewardId, resultIndex)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_RegistrationList *RegistrationListTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _RegistrationList.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_RegistrationList *RegistrationListSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _RegistrationList.Contract.GrantRole(&_RegistrationList.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_RegistrationList *RegistrationListTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _RegistrationList.Contract.GrantRole(&_RegistrationList.TransactOpts, role, account)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_RegistrationList *RegistrationListTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistrationList.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_RegistrationList *RegistrationListSession) Pause() (*types.Transaction, error) {
	return _RegistrationList.Contract.Pause(&_RegistrationList.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_RegistrationList *RegistrationListTransactorSession) Pause() (*types.Transaction, error) {
	return _RegistrationList.Contract.Pause(&_RegistrationList.TransactOpts)
}

// RawFulfillRandomWords is a paid mutator transaction binding the contract method 0x1fe543e3.
//
// Solidity: function rawFulfillRandomWords(uint256 requestId, uint256[] randomWords) returns()
func (_RegistrationList *RegistrationListTransactor) RawFulfillRandomWords(opts *bind.TransactOpts, requestId *big.Int, randomWords []*big.Int) (*types.Transaction, error) {
	return _RegistrationList.contract.Transact(opts, "rawFulfillRandomWords", requestId, randomWords)
}

// RawFulfillRandomWords is a paid mutator transaction binding the contract method 0x1fe543e3.
//
// Solidity: function rawFulfillRandomWords(uint256 requestId, uint256[] randomWords) returns()
func (_RegistrationList *RegistrationListSession) RawFulfillRandomWords(requestId *big.Int, randomWords []*big.Int) (*types.Transaction, error) {
	return _RegistrationList.Contract.RawFulfillRandomWords(&_RegistrationList.TransactOpts, requestId, randomWords)
}

// RawFulfillRandomWords is a paid mutator transaction binding the contract method 0x1fe543e3.
//
// Solidity: function rawFulfillRandomWords(uint256 requestId, uint256[] randomWords) returns()
func (_RegistrationList *RegistrationListTransactorSession) RawFulfillRandomWords(requestId *big.Int, randomWords []*big.Int) (*types.Transaction, error) {
	return _RegistrationList.Contract.RawFulfillRandomWords(&_RegistrationList.TransactOpts, requestId, randomWords)
}

// ReceiveReward is a paid mutator transaction binding the contract method 0x1a0fc715.
//
// Solidity: function receiveReward(bytes32 raceId, uint256 slotId) returns()
func (_RegistrationList *RegistrationListTransactor) ReceiveReward(opts *bind.TransactOpts, raceId [32]byte, slotId *big.Int) (*types.Transaction, error) {
	return _RegistrationList.contract.Transact(opts, "receiveReward", raceId, slotId)
}

// ReceiveReward is a paid mutator transaction binding the contract method 0x1a0fc715.
//
// Solidity: function receiveReward(bytes32 raceId, uint256 slotId) returns()
func (_RegistrationList *RegistrationListSession) ReceiveReward(raceId [32]byte, slotId *big.Int) (*types.Transaction, error) {
	return _RegistrationList.Contract.ReceiveReward(&_RegistrationList.TransactOpts, raceId, slotId)
}

// ReceiveReward is a paid mutator transaction binding the contract method 0x1a0fc715.
//
// Solidity: function receiveReward(bytes32 raceId, uint256 slotId) returns()
func (_RegistrationList *RegistrationListTransactorSession) ReceiveReward(raceId [32]byte, slotId *big.Int) (*types.Transaction, error) {
	return _RegistrationList.Contract.ReceiveReward(&_RegistrationList.TransactOpts, raceId, slotId)
}

// Register is a paid mutator transaction binding the contract method 0x2965d809.
//
// Solidity: function register(uint256 slotId, bytes32 raceId) returns()
func (_RegistrationList *RegistrationListTransactor) Register(opts *bind.TransactOpts, slotId *big.Int, raceId [32]byte) (*types.Transaction, error) {
	return _RegistrationList.contract.Transact(opts, "register", slotId, raceId)
}

// Register is a paid mutator transaction binding the contract method 0x2965d809.
//
// Solidity: function register(uint256 slotId, bytes32 raceId) returns()
func (_RegistrationList *RegistrationListSession) Register(slotId *big.Int, raceId [32]byte) (*types.Transaction, error) {
	return _RegistrationList.Contract.Register(&_RegistrationList.TransactOpts, slotId, raceId)
}

// Register is a paid mutator transaction binding the contract method 0x2965d809.
//
// Solidity: function register(uint256 slotId, bytes32 raceId) returns()
func (_RegistrationList *RegistrationListTransactorSession) Register(slotId *big.Int, raceId [32]byte) (*types.Transaction, error) {
	return _RegistrationList.Contract.Register(&_RegistrationList.TransactOpts, slotId, raceId)
}

// RemoveReward is a paid mutator transaction binding the contract method 0x0fa445f5.
//
// Solidity: function removeReward(bytes32 raceId, uint256 nftRewardId, bytes1 resultIndex) returns()
func (_RegistrationList *RegistrationListTransactor) RemoveReward(opts *bind.TransactOpts, raceId [32]byte, nftRewardId *big.Int, resultIndex [1]byte) (*types.Transaction, error) {
	return _RegistrationList.contract.Transact(opts, "removeReward", raceId, nftRewardId, resultIndex)
}

// RemoveReward is a paid mutator transaction binding the contract method 0x0fa445f5.
//
// Solidity: function removeReward(bytes32 raceId, uint256 nftRewardId, bytes1 resultIndex) returns()
func (_RegistrationList *RegistrationListSession) RemoveReward(raceId [32]byte, nftRewardId *big.Int, resultIndex [1]byte) (*types.Transaction, error) {
	return _RegistrationList.Contract.RemoveReward(&_RegistrationList.TransactOpts, raceId, nftRewardId, resultIndex)
}

// RemoveReward is a paid mutator transaction binding the contract method 0x0fa445f5.
//
// Solidity: function removeReward(bytes32 raceId, uint256 nftRewardId, bytes1 resultIndex) returns()
func (_RegistrationList *RegistrationListTransactorSession) RemoveReward(raceId [32]byte, nftRewardId *big.Int, resultIndex [1]byte) (*types.Transaction, error) {
	return _RegistrationList.Contract.RemoveReward(&_RegistrationList.TransactOpts, raceId, nftRewardId, resultIndex)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RegistrationList *RegistrationListTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistrationList.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RegistrationList *RegistrationListSession) RenounceOwnership() (*types.Transaction, error) {
	return _RegistrationList.Contract.RenounceOwnership(&_RegistrationList.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RegistrationList *RegistrationListTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _RegistrationList.Contract.RenounceOwnership(&_RegistrationList.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_RegistrationList *RegistrationListTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _RegistrationList.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_RegistrationList *RegistrationListSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _RegistrationList.Contract.RenounceRole(&_RegistrationList.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_RegistrationList *RegistrationListTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _RegistrationList.Contract.RenounceRole(&_RegistrationList.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_RegistrationList *RegistrationListTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _RegistrationList.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_RegistrationList *RegistrationListSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _RegistrationList.Contract.RevokeRole(&_RegistrationList.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_RegistrationList *RegistrationListTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _RegistrationList.Contract.RevokeRole(&_RegistrationList.TransactOpts, role, account)
}

// SelectParticipant is a paid mutator transaction binding the contract method 0x7d0f79b7.
//
// Solidity: function selectParticipant(bytes32 raceId) returns(uint256 requestId)
func (_RegistrationList *RegistrationListTransactor) SelectParticipant(opts *bind.TransactOpts, raceId [32]byte) (*types.Transaction, error) {
	return _RegistrationList.contract.Transact(opts, "selectParticipant", raceId)
}

// SelectParticipant is a paid mutator transaction binding the contract method 0x7d0f79b7.
//
// Solidity: function selectParticipant(bytes32 raceId) returns(uint256 requestId)
func (_RegistrationList *RegistrationListSession) SelectParticipant(raceId [32]byte) (*types.Transaction, error) {
	return _RegistrationList.Contract.SelectParticipant(&_RegistrationList.TransactOpts, raceId)
}

// SelectParticipant is a paid mutator transaction binding the contract method 0x7d0f79b7.
//
// Solidity: function selectParticipant(bytes32 raceId) returns(uint256 requestId)
func (_RegistrationList *RegistrationListTransactorSession) SelectParticipant(raceId [32]byte) (*types.Transaction, error) {
	return _RegistrationList.Contract.SelectParticipant(&_RegistrationList.TransactOpts, raceId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RegistrationList *RegistrationListTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _RegistrationList.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RegistrationList *RegistrationListSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _RegistrationList.Contract.TransferOwnership(&_RegistrationList.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RegistrationList *RegistrationListTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _RegistrationList.Contract.TransferOwnership(&_RegistrationList.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_RegistrationList *RegistrationListTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistrationList.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_RegistrationList *RegistrationListSession) Unpause() (*types.Transaction, error) {
	return _RegistrationList.Contract.Unpause(&_RegistrationList.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_RegistrationList *RegistrationListTransactorSession) Unpause() (*types.Transaction, error) {
	return _RegistrationList.Contract.Unpause(&_RegistrationList.TransactOpts)
}

// UpdateNlggtAddress is a paid mutator transaction binding the contract method 0xd6641f06.
//
// Solidity: function updateNlggtAddress(address nlggt) returns()
func (_RegistrationList *RegistrationListTransactor) UpdateNlggtAddress(opts *bind.TransactOpts, nlggt common.Address) (*types.Transaction, error) {
	return _RegistrationList.contract.Transact(opts, "updateNlggtAddress", nlggt)
}

// UpdateNlggtAddress is a paid mutator transaction binding the contract method 0xd6641f06.
//
// Solidity: function updateNlggtAddress(address nlggt) returns()
func (_RegistrationList *RegistrationListSession) UpdateNlggtAddress(nlggt common.Address) (*types.Transaction, error) {
	return _RegistrationList.Contract.UpdateNlggtAddress(&_RegistrationList.TransactOpts, nlggt)
}

// UpdateNlggtAddress is a paid mutator transaction binding the contract method 0xd6641f06.
//
// Solidity: function updateNlggtAddress(address nlggt) returns()
func (_RegistrationList *RegistrationListTransactorSession) UpdateNlggtAddress(nlggt common.Address) (*types.Transaction, error) {
	return _RegistrationList.Contract.UpdateNlggtAddress(&_RegistrationList.TransactOpts, nlggt)
}

// UpdateRaceAddress is a paid mutator transaction binding the contract method 0xd7c49938.
//
// Solidity: function updateRaceAddress(address raceList) returns()
func (_RegistrationList *RegistrationListTransactor) UpdateRaceAddress(opts *bind.TransactOpts, raceList common.Address) (*types.Transaction, error) {
	return _RegistrationList.contract.Transact(opts, "updateRaceAddress", raceList)
}

// UpdateRaceAddress is a paid mutator transaction binding the contract method 0xd7c49938.
//
// Solidity: function updateRaceAddress(address raceList) returns()
func (_RegistrationList *RegistrationListSession) UpdateRaceAddress(raceList common.Address) (*types.Transaction, error) {
	return _RegistrationList.Contract.UpdateRaceAddress(&_RegistrationList.TransactOpts, raceList)
}

// UpdateRaceAddress is a paid mutator transaction binding the contract method 0xd7c49938.
//
// Solidity: function updateRaceAddress(address raceList) returns()
func (_RegistrationList *RegistrationListTransactorSession) UpdateRaceAddress(raceList common.Address) (*types.Transaction, error) {
	return _RegistrationList.Contract.UpdateRaceAddress(&_RegistrationList.TransactOpts, raceList)
}

// RegistrationListNlggtUpdatedIterator is returned from FilterNlggtUpdated and is used to iterate over the raw logs and unpacked data for NlggtUpdated events raised by the RegistrationList contract.
type RegistrationListNlggtUpdatedIterator struct {
	Event *RegistrationListNlggtUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistrationListNlggtUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistrationListNlggtUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistrationListNlggtUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistrationListNlggtUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistrationListNlggtUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistrationListNlggtUpdated represents a NlggtUpdated event raised by the RegistrationList contract.
type RegistrationListNlggtUpdated struct {
	Nlggt common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterNlggtUpdated is a free log retrieval operation binding the contract event 0x5660a1e6d6115d84caa3bc631133061cbc77b46ff3be76d65178ae3243446b98.
//
// Solidity: event NlggtUpdated(address nlggt)
func (_RegistrationList *RegistrationListFilterer) FilterNlggtUpdated(opts *bind.FilterOpts) (*RegistrationListNlggtUpdatedIterator, error) {

	logs, sub, err := _RegistrationList.contract.FilterLogs(opts, "NlggtUpdated")
	if err != nil {
		return nil, err
	}
	return &RegistrationListNlggtUpdatedIterator{contract: _RegistrationList.contract, event: "NlggtUpdated", logs: logs, sub: sub}, nil
}

// WatchNlggtUpdated is a free log subscription operation binding the contract event 0x5660a1e6d6115d84caa3bc631133061cbc77b46ff3be76d65178ae3243446b98.
//
// Solidity: event NlggtUpdated(address nlggt)
func (_RegistrationList *RegistrationListFilterer) WatchNlggtUpdated(opts *bind.WatchOpts, sink chan<- *RegistrationListNlggtUpdated) (event.Subscription, error) {

	logs, sub, err := _RegistrationList.contract.WatchLogs(opts, "NlggtUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistrationListNlggtUpdated)
				if err := _RegistrationList.contract.UnpackLog(event, "NlggtUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNlggtUpdated is a log parse operation binding the contract event 0x5660a1e6d6115d84caa3bc631133061cbc77b46ff3be76d65178ae3243446b98.
//
// Solidity: event NlggtUpdated(address nlggt)
func (_RegistrationList *RegistrationListFilterer) ParseNlggtUpdated(log types.Log) (*RegistrationListNlggtUpdated, error) {
	event := new(RegistrationListNlggtUpdated)
	if err := _RegistrationList.contract.UnpackLog(event, "NlggtUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistrationListOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the RegistrationList contract.
type RegistrationListOwnershipTransferredIterator struct {
	Event *RegistrationListOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistrationListOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistrationListOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistrationListOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistrationListOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistrationListOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistrationListOwnershipTransferred represents a OwnershipTransferred event raised by the RegistrationList contract.
type RegistrationListOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RegistrationList *RegistrationListFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RegistrationListOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RegistrationList.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RegistrationListOwnershipTransferredIterator{contract: _RegistrationList.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RegistrationList *RegistrationListFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RegistrationListOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RegistrationList.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistrationListOwnershipTransferred)
				if err := _RegistrationList.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RegistrationList *RegistrationListFilterer) ParseOwnershipTransferred(log types.Log) (*RegistrationListOwnershipTransferred, error) {
	event := new(RegistrationListOwnershipTransferred)
	if err := _RegistrationList.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistrationListParticipantsSelectedIterator is returned from FilterParticipantsSelected and is used to iterate over the raw logs and unpacked data for ParticipantsSelected events raised by the RegistrationList contract.
type RegistrationListParticipantsSelectedIterator struct {
	Event *RegistrationListParticipantsSelected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistrationListParticipantsSelectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistrationListParticipantsSelected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistrationListParticipantsSelected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistrationListParticipantsSelectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistrationListParticipantsSelectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistrationListParticipantsSelected represents a ParticipantsSelected event raised by the RegistrationList contract.
type RegistrationListParticipantsSelected struct {
	RequestId  *big.Int
	RaceId     [32]byte
	Randomness *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterParticipantsSelected is a free log retrieval operation binding the contract event 0x5a1c9864d9d35edf19fb83e7a07ad46d28d80307bd248fb165e8814a1d1cfe2b.
//
// Solidity: event ParticipantsSelected(uint256 requestId, bytes32 raceId, uint256 randomness)
func (_RegistrationList *RegistrationListFilterer) FilterParticipantsSelected(opts *bind.FilterOpts) (*RegistrationListParticipantsSelectedIterator, error) {

	logs, sub, err := _RegistrationList.contract.FilterLogs(opts, "ParticipantsSelected")
	if err != nil {
		return nil, err
	}
	return &RegistrationListParticipantsSelectedIterator{contract: _RegistrationList.contract, event: "ParticipantsSelected", logs: logs, sub: sub}, nil
}

// WatchParticipantsSelected is a free log subscription operation binding the contract event 0x5a1c9864d9d35edf19fb83e7a07ad46d28d80307bd248fb165e8814a1d1cfe2b.
//
// Solidity: event ParticipantsSelected(uint256 requestId, bytes32 raceId, uint256 randomness)
func (_RegistrationList *RegistrationListFilterer) WatchParticipantsSelected(opts *bind.WatchOpts, sink chan<- *RegistrationListParticipantsSelected) (event.Subscription, error) {

	logs, sub, err := _RegistrationList.contract.WatchLogs(opts, "ParticipantsSelected")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistrationListParticipantsSelected)
				if err := _RegistrationList.contract.UnpackLog(event, "ParticipantsSelected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseParticipantsSelected is a log parse operation binding the contract event 0x5a1c9864d9d35edf19fb83e7a07ad46d28d80307bd248fb165e8814a1d1cfe2b.
//
// Solidity: event ParticipantsSelected(uint256 requestId, bytes32 raceId, uint256 randomness)
func (_RegistrationList *RegistrationListFilterer) ParseParticipantsSelected(log types.Log) (*RegistrationListParticipantsSelected, error) {
	event := new(RegistrationListParticipantsSelected)
	if err := _RegistrationList.contract.UnpackLog(event, "ParticipantsSelected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistrationListPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the RegistrationList contract.
type RegistrationListPausedIterator struct {
	Event *RegistrationListPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistrationListPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistrationListPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistrationListPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistrationListPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistrationListPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistrationListPaused represents a Paused event raised by the RegistrationList contract.
type RegistrationListPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RegistrationList *RegistrationListFilterer) FilterPaused(opts *bind.FilterOpts) (*RegistrationListPausedIterator, error) {

	logs, sub, err := _RegistrationList.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &RegistrationListPausedIterator{contract: _RegistrationList.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RegistrationList *RegistrationListFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *RegistrationListPaused) (event.Subscription, error) {

	logs, sub, err := _RegistrationList.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistrationListPaused)
				if err := _RegistrationList.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RegistrationList *RegistrationListFilterer) ParsePaused(log types.Log) (*RegistrationListPaused, error) {
	event := new(RegistrationListPaused)
	if err := _RegistrationList.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistrationListRaceListUpdatedIterator is returned from FilterRaceListUpdated and is used to iterate over the raw logs and unpacked data for RaceListUpdated events raised by the RegistrationList contract.
type RegistrationListRaceListUpdatedIterator struct {
	Event *RegistrationListRaceListUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistrationListRaceListUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistrationListRaceListUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistrationListRaceListUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistrationListRaceListUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistrationListRaceListUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistrationListRaceListUpdated represents a RaceListUpdated event raised by the RegistrationList contract.
type RegistrationListRaceListUpdated struct {
	Race common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRaceListUpdated is a free log retrieval operation binding the contract event 0x7a659342c2b03e1c14729e3f1c86f414756d13bd8ff0636713cc22246182b42d.
//
// Solidity: event RaceListUpdated(address race)
func (_RegistrationList *RegistrationListFilterer) FilterRaceListUpdated(opts *bind.FilterOpts) (*RegistrationListRaceListUpdatedIterator, error) {

	logs, sub, err := _RegistrationList.contract.FilterLogs(opts, "RaceListUpdated")
	if err != nil {
		return nil, err
	}
	return &RegistrationListRaceListUpdatedIterator{contract: _RegistrationList.contract, event: "RaceListUpdated", logs: logs, sub: sub}, nil
}

// WatchRaceListUpdated is a free log subscription operation binding the contract event 0x7a659342c2b03e1c14729e3f1c86f414756d13bd8ff0636713cc22246182b42d.
//
// Solidity: event RaceListUpdated(address race)
func (_RegistrationList *RegistrationListFilterer) WatchRaceListUpdated(opts *bind.WatchOpts, sink chan<- *RegistrationListRaceListUpdated) (event.Subscription, error) {

	logs, sub, err := _RegistrationList.contract.WatchLogs(opts, "RaceListUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistrationListRaceListUpdated)
				if err := _RegistrationList.contract.UnpackLog(event, "RaceListUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRaceListUpdated is a log parse operation binding the contract event 0x7a659342c2b03e1c14729e3f1c86f414756d13bd8ff0636713cc22246182b42d.
//
// Solidity: event RaceListUpdated(address race)
func (_RegistrationList *RegistrationListFilterer) ParseRaceListUpdated(log types.Log) (*RegistrationListRaceListUpdated, error) {
	event := new(RegistrationListRaceListUpdated)
	if err := _RegistrationList.contract.UnpackLog(event, "RaceListUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistrationListRandomInProgressIterator is returned from FilterRandomInProgress and is used to iterate over the raw logs and unpacked data for RandomInProgress events raised by the RegistrationList contract.
type RegistrationListRandomInProgressIterator struct {
	Event *RegistrationListRandomInProgress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistrationListRandomInProgressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistrationListRandomInProgress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistrationListRandomInProgress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistrationListRandomInProgressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistrationListRandomInProgressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistrationListRandomInProgress represents a RandomInProgress event raised by the RegistrationList contract.
type RegistrationListRandomInProgress struct {
	RaceId [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRandomInProgress is a free log retrieval operation binding the contract event 0x018dc112e9dad7765a03056b4091d237454ee37ae27aab3c3abd16d428900a13.
//
// Solidity: event RandomInProgress(bytes32 raceId)
func (_RegistrationList *RegistrationListFilterer) FilterRandomInProgress(opts *bind.FilterOpts) (*RegistrationListRandomInProgressIterator, error) {

	logs, sub, err := _RegistrationList.contract.FilterLogs(opts, "RandomInProgress")
	if err != nil {
		return nil, err
	}
	return &RegistrationListRandomInProgressIterator{contract: _RegistrationList.contract, event: "RandomInProgress", logs: logs, sub: sub}, nil
}

// WatchRandomInProgress is a free log subscription operation binding the contract event 0x018dc112e9dad7765a03056b4091d237454ee37ae27aab3c3abd16d428900a13.
//
// Solidity: event RandomInProgress(bytes32 raceId)
func (_RegistrationList *RegistrationListFilterer) WatchRandomInProgress(opts *bind.WatchOpts, sink chan<- *RegistrationListRandomInProgress) (event.Subscription, error) {

	logs, sub, err := _RegistrationList.contract.WatchLogs(opts, "RandomInProgress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistrationListRandomInProgress)
				if err := _RegistrationList.contract.UnpackLog(event, "RandomInProgress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRandomInProgress is a log parse operation binding the contract event 0x018dc112e9dad7765a03056b4091d237454ee37ae27aab3c3abd16d428900a13.
//
// Solidity: event RandomInProgress(bytes32 raceId)
func (_RegistrationList *RegistrationListFilterer) ParseRandomInProgress(log types.Log) (*RegistrationListRandomInProgress, error) {
	event := new(RegistrationListRandomInProgress)
	if err := _RegistrationList.contract.UnpackLog(event, "RandomInProgress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistrationListRegisteredIterator is returned from FilterRegistered and is used to iterate over the raw logs and unpacked data for Registered events raised by the RegistrationList contract.
type RegistrationListRegisteredIterator struct {
	Event *RegistrationListRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistrationListRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistrationListRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistrationListRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistrationListRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistrationListRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistrationListRegistered represents a Registered event raised by the RegistrationList contract.
type RegistrationListRegistered struct {
	SlotId      *big.Int
	Participant common.Address
	RaceId      [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRegistered is a free log retrieval operation binding the contract event 0xd62c7bd2779dc6ebe426bed623399b1fc1d190c063eadefcffffb1efe6f253ef.
//
// Solidity: event Registered(uint256 slotId, address participant, bytes32 raceId)
func (_RegistrationList *RegistrationListFilterer) FilterRegistered(opts *bind.FilterOpts) (*RegistrationListRegisteredIterator, error) {

	logs, sub, err := _RegistrationList.contract.FilterLogs(opts, "Registered")
	if err != nil {
		return nil, err
	}
	return &RegistrationListRegisteredIterator{contract: _RegistrationList.contract, event: "Registered", logs: logs, sub: sub}, nil
}

// WatchRegistered is a free log subscription operation binding the contract event 0xd62c7bd2779dc6ebe426bed623399b1fc1d190c063eadefcffffb1efe6f253ef.
//
// Solidity: event Registered(uint256 slotId, address participant, bytes32 raceId)
func (_RegistrationList *RegistrationListFilterer) WatchRegistered(opts *bind.WatchOpts, sink chan<- *RegistrationListRegistered) (event.Subscription, error) {

	logs, sub, err := _RegistrationList.contract.WatchLogs(opts, "Registered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistrationListRegistered)
				if err := _RegistrationList.contract.UnpackLog(event, "Registered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistered is a log parse operation binding the contract event 0xd62c7bd2779dc6ebe426bed623399b1fc1d190c063eadefcffffb1efe6f253ef.
//
// Solidity: event Registered(uint256 slotId, address participant, bytes32 raceId)
func (_RegistrationList *RegistrationListFilterer) ParseRegistered(log types.Log) (*RegistrationListRegistered, error) {
	event := new(RegistrationListRegistered)
	if err := _RegistrationList.contract.UnpackLog(event, "Registered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistrationListRewardAddedIterator is returned from FilterRewardAdded and is used to iterate over the raw logs and unpacked data for RewardAdded events raised by the RegistrationList contract.
type RegistrationListRewardAddedIterator struct {
	Event *RegistrationListRewardAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistrationListRewardAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistrationListRewardAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistrationListRewardAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistrationListRewardAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistrationListRewardAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistrationListRewardAdded represents a RewardAdded event raised by the RegistrationList contract.
type RegistrationListRewardAdded struct {
	RaceId      [32]byte
	NftRewardId *big.Int
	ResultIndex [1]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRewardAdded is a free log retrieval operation binding the contract event 0x2b942e265bd6d4ca5617a327f9a60e1a85f4351aaa0be2a84cda1cf9d32c8c04.
//
// Solidity: event RewardAdded(bytes32 raceId, uint256 nftRewardId, bytes1 resultIndex)
func (_RegistrationList *RegistrationListFilterer) FilterRewardAdded(opts *bind.FilterOpts) (*RegistrationListRewardAddedIterator, error) {

	logs, sub, err := _RegistrationList.contract.FilterLogs(opts, "RewardAdded")
	if err != nil {
		return nil, err
	}
	return &RegistrationListRewardAddedIterator{contract: _RegistrationList.contract, event: "RewardAdded", logs: logs, sub: sub}, nil
}

// WatchRewardAdded is a free log subscription operation binding the contract event 0x2b942e265bd6d4ca5617a327f9a60e1a85f4351aaa0be2a84cda1cf9d32c8c04.
//
// Solidity: event RewardAdded(bytes32 raceId, uint256 nftRewardId, bytes1 resultIndex)
func (_RegistrationList *RegistrationListFilterer) WatchRewardAdded(opts *bind.WatchOpts, sink chan<- *RegistrationListRewardAdded) (event.Subscription, error) {

	logs, sub, err := _RegistrationList.contract.WatchLogs(opts, "RewardAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistrationListRewardAdded)
				if err := _RegistrationList.contract.UnpackLog(event, "RewardAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardAdded is a log parse operation binding the contract event 0x2b942e265bd6d4ca5617a327f9a60e1a85f4351aaa0be2a84cda1cf9d32c8c04.
//
// Solidity: event RewardAdded(bytes32 raceId, uint256 nftRewardId, bytes1 resultIndex)
func (_RegistrationList *RegistrationListFilterer) ParseRewardAdded(log types.Log) (*RegistrationListRewardAdded, error) {
	event := new(RegistrationListRewardAdded)
	if err := _RegistrationList.contract.UnpackLog(event, "RewardAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistrationListRewardReceivedIterator is returned from FilterRewardReceived and is used to iterate over the raw logs and unpacked data for RewardReceived events raised by the RegistrationList contract.
type RegistrationListRewardReceivedIterator struct {
	Event *RegistrationListRewardReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistrationListRewardReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistrationListRewardReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistrationListRewardReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistrationListRewardReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistrationListRewardReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistrationListRewardReceived represents a RewardReceived event raised by the RegistrationList contract.
type RegistrationListRewardReceived struct {
	RaceId      [32]byte
	SlotId      *big.Int
	NftRewardId *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRewardReceived is a free log retrieval operation binding the contract event 0xe2ece170b35ae79cbe45ffdaf4931b8bc45056da5d3e9aa4aea67fcdf307929a.
//
// Solidity: event RewardReceived(bytes32 raceId, uint256 slotId, uint256 nftRewardId)
func (_RegistrationList *RegistrationListFilterer) FilterRewardReceived(opts *bind.FilterOpts) (*RegistrationListRewardReceivedIterator, error) {

	logs, sub, err := _RegistrationList.contract.FilterLogs(opts, "RewardReceived")
	if err != nil {
		return nil, err
	}
	return &RegistrationListRewardReceivedIterator{contract: _RegistrationList.contract, event: "RewardReceived", logs: logs, sub: sub}, nil
}

// WatchRewardReceived is a free log subscription operation binding the contract event 0xe2ece170b35ae79cbe45ffdaf4931b8bc45056da5d3e9aa4aea67fcdf307929a.
//
// Solidity: event RewardReceived(bytes32 raceId, uint256 slotId, uint256 nftRewardId)
func (_RegistrationList *RegistrationListFilterer) WatchRewardReceived(opts *bind.WatchOpts, sink chan<- *RegistrationListRewardReceived) (event.Subscription, error) {

	logs, sub, err := _RegistrationList.contract.WatchLogs(opts, "RewardReceived")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistrationListRewardReceived)
				if err := _RegistrationList.contract.UnpackLog(event, "RewardReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardReceived is a log parse operation binding the contract event 0xe2ece170b35ae79cbe45ffdaf4931b8bc45056da5d3e9aa4aea67fcdf307929a.
//
// Solidity: event RewardReceived(bytes32 raceId, uint256 slotId, uint256 nftRewardId)
func (_RegistrationList *RegistrationListFilterer) ParseRewardReceived(log types.Log) (*RegistrationListRewardReceived, error) {
	event := new(RegistrationListRewardReceived)
	if err := _RegistrationList.contract.UnpackLog(event, "RewardReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistrationListRewardRemovedIterator is returned from FilterRewardRemoved and is used to iterate over the raw logs and unpacked data for RewardRemoved events raised by the RegistrationList contract.
type RegistrationListRewardRemovedIterator struct {
	Event *RegistrationListRewardRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistrationListRewardRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistrationListRewardRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistrationListRewardRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistrationListRewardRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistrationListRewardRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistrationListRewardRemoved represents a RewardRemoved event raised by the RegistrationList contract.
type RegistrationListRewardRemoved struct {
	RaceId      [32]byte
	NftRewardId *big.Int
	ResultIndex [1]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRewardRemoved is a free log retrieval operation binding the contract event 0xddda89b96dee97fe43f9803c50584f6dd667bedc8b02a7c75407e6906bf31ead.
//
// Solidity: event RewardRemoved(bytes32 raceId, uint256 nftRewardId, bytes1 resultIndex)
func (_RegistrationList *RegistrationListFilterer) FilterRewardRemoved(opts *bind.FilterOpts) (*RegistrationListRewardRemovedIterator, error) {

	logs, sub, err := _RegistrationList.contract.FilterLogs(opts, "RewardRemoved")
	if err != nil {
		return nil, err
	}
	return &RegistrationListRewardRemovedIterator{contract: _RegistrationList.contract, event: "RewardRemoved", logs: logs, sub: sub}, nil
}

// WatchRewardRemoved is a free log subscription operation binding the contract event 0xddda89b96dee97fe43f9803c50584f6dd667bedc8b02a7c75407e6906bf31ead.
//
// Solidity: event RewardRemoved(bytes32 raceId, uint256 nftRewardId, bytes1 resultIndex)
func (_RegistrationList *RegistrationListFilterer) WatchRewardRemoved(opts *bind.WatchOpts, sink chan<- *RegistrationListRewardRemoved) (event.Subscription, error) {

	logs, sub, err := _RegistrationList.contract.WatchLogs(opts, "RewardRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistrationListRewardRemoved)
				if err := _RegistrationList.contract.UnpackLog(event, "RewardRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardRemoved is a log parse operation binding the contract event 0xddda89b96dee97fe43f9803c50584f6dd667bedc8b02a7c75407e6906bf31ead.
//
// Solidity: event RewardRemoved(bytes32 raceId, uint256 nftRewardId, bytes1 resultIndex)
func (_RegistrationList *RegistrationListFilterer) ParseRewardRemoved(log types.Log) (*RegistrationListRewardRemoved, error) {
	event := new(RegistrationListRewardRemoved)
	if err := _RegistrationList.contract.UnpackLog(event, "RewardRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistrationListRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the RegistrationList contract.
type RegistrationListRoleAdminChangedIterator struct {
	Event *RegistrationListRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistrationListRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistrationListRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistrationListRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistrationListRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistrationListRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistrationListRoleAdminChanged represents a RoleAdminChanged event raised by the RegistrationList contract.
type RegistrationListRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_RegistrationList *RegistrationListFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*RegistrationListRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _RegistrationList.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &RegistrationListRoleAdminChangedIterator{contract: _RegistrationList.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_RegistrationList *RegistrationListFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *RegistrationListRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _RegistrationList.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistrationListRoleAdminChanged)
				if err := _RegistrationList.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_RegistrationList *RegistrationListFilterer) ParseRoleAdminChanged(log types.Log) (*RegistrationListRoleAdminChanged, error) {
	event := new(RegistrationListRoleAdminChanged)
	if err := _RegistrationList.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistrationListRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the RegistrationList contract.
type RegistrationListRoleGrantedIterator struct {
	Event *RegistrationListRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistrationListRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistrationListRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistrationListRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistrationListRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistrationListRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistrationListRoleGranted represents a RoleGranted event raised by the RegistrationList contract.
type RegistrationListRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_RegistrationList *RegistrationListFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*RegistrationListRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _RegistrationList.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &RegistrationListRoleGrantedIterator{contract: _RegistrationList.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_RegistrationList *RegistrationListFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *RegistrationListRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _RegistrationList.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistrationListRoleGranted)
				if err := _RegistrationList.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_RegistrationList *RegistrationListFilterer) ParseRoleGranted(log types.Log) (*RegistrationListRoleGranted, error) {
	event := new(RegistrationListRoleGranted)
	if err := _RegistrationList.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistrationListRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the RegistrationList contract.
type RegistrationListRoleRevokedIterator struct {
	Event *RegistrationListRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistrationListRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistrationListRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistrationListRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistrationListRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistrationListRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistrationListRoleRevoked represents a RoleRevoked event raised by the RegistrationList contract.
type RegistrationListRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_RegistrationList *RegistrationListFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*RegistrationListRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _RegistrationList.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &RegistrationListRoleRevokedIterator{contract: _RegistrationList.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_RegistrationList *RegistrationListFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *RegistrationListRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _RegistrationList.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistrationListRoleRevoked)
				if err := _RegistrationList.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_RegistrationList *RegistrationListFilterer) ParseRoleRevoked(log types.Log) (*RegistrationListRoleRevoked, error) {
	event := new(RegistrationListRoleRevoked)
	if err := _RegistrationList.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistrationListUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the RegistrationList contract.
type RegistrationListUnpausedIterator struct {
	Event *RegistrationListUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistrationListUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistrationListUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistrationListUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistrationListUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistrationListUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistrationListUnpaused represents a Unpaused event raised by the RegistrationList contract.
type RegistrationListUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RegistrationList *RegistrationListFilterer) FilterUnpaused(opts *bind.FilterOpts) (*RegistrationListUnpausedIterator, error) {

	logs, sub, err := _RegistrationList.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &RegistrationListUnpausedIterator{contract: _RegistrationList.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RegistrationList *RegistrationListFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *RegistrationListUnpaused) (event.Subscription, error) {

	logs, sub, err := _RegistrationList.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistrationListUnpaused)
				if err := _RegistrationList.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RegistrationList *RegistrationListFilterer) ParseUnpaused(log types.Log) (*RegistrationListUnpaused, error) {
	event := new(RegistrationListUnpaused)
	if err := _RegistrationList.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
