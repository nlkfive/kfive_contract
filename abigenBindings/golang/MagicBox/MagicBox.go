// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package MagicBox

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MagicBoxMetaData contains all meta data concerning the MagicBox contract.
var MagicBoxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"magicBoxReward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BoxRequested\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoReward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OpenFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RandomnessNotGenerated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TooLate\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"BoxReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enumMagicBox.BoxType\",\"name\":\"boxType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestBoxSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enumMagicBox.BoxType\",\"name\":\"boxType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftRewardId\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"RewardTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumMagicBox.BoxType\",\"name\":\"boxType\",\"type\":\"uint8\"}],\"name\":\"requestBox\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"openBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumMagicBox.BoxType\",\"name\":\"boxType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nftRewardId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumMagicBox.BoxType\",\"name\":\"boxType\",\"type\":\"uint8\"}],\"name\":\"remainReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumMagicBox.BoxType\",\"name\":\"boxType\",\"type\":\"uint8\"}],\"name\":\"listReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b50604051620049ec380380620049ec833981810160405281019062000037919062000b30565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000090620000846200060560201b60201c565b6200060d60201b60201c565b6000600260146101000a81548160ff021916908315150217905550620000cf6000801b620000c36200060560201b60201c565b620006d360201b60201c565b620001107fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775620001046200060560201b60201c565b620006d360201b60201c565b620001627f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775620006e960201b60201c565b6200018e8673ffffffffffffffffffffffffffffffffffffffff166200074c60201b6200177f1760201c565b620001c5576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620001f18573ffffffffffffffffffffffffffffffffffffffff166200074c60201b6200177f1760201c565b62000228576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620002548473ffffffffffffffffffffffffffffffffffffffff166200074c60201b6200177f1760201c565b6200028b576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b824210620002d257826040517f691e5682000000000000000000000000000000000000000000000000000000008152600401620002c9919062000bd7565b60405180910390fd5b85600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060286005600080600381111562000353577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038111156200038c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b815260200190815260200160002081905550600f6005600060016003811115620003df577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381111562000418577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001908152602001600020819055506005806000600260038111156200046a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811115620004a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b815260200190815260200160002081905550600160056000600380811115620004f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038111156200052e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001908152602001600020819055508260048190555083600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600c8190555081600d60006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505050505062000cb8565b600033905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620006e582826200076f60201b60201c565b5050565b6000620006fc836200083d60201b60201c565b905081600080858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6200078682826200085c60201b620017a21760201c565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775821480620007b757506000801b82145b156200083957620007f47f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a826200085c60201b620017a21760201c565b6000801b8214156200083857620008377fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775826200085c60201b620017a21760201c565b5b5b5050565b6000806000838152602001908152602001600020600101549050919050565b620008738282620008a460201b620017d61760201c565b6200089f81600160008581526020019081526020016000206200099560201b620018b61790919060201c565b505050565b620008b68282620009cd60201b60201c565b6200099157600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620009366200060560201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000620009c5836000018373ffffffffffffffffffffffffffffffffffffffff1660001b62000a3760201b60201c565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600062000a4b838362000ab160201b60201c565b62000aa657826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905062000aab565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b60008151905062000ae58162000c50565b92915050565b60008151905062000afc8162000c6a565b92915050565b60008151905062000b138162000c84565b92915050565b60008151905062000b2a8162000c9e565b92915050565b60008060008060008060c0878903121562000b4a57600080fd5b600062000b5a89828a0162000ad4565b965050602062000b6d89828a0162000ad4565b955050604062000b8089828a0162000ad4565b945050606062000b9389828a0162000b02565b935050608062000ba689828a0162000b19565b92505060a062000bb989828a0162000aeb565b9150509295509295509295565b62000bd18162000c32565b82525050565b600060208201905062000bee600083018462000bc6565b92915050565b600062000c018262000c12565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b62000c5b8162000bf4565b811462000c6757600080fd5b50565b62000c758162000c08565b811462000c8157600080fd5b50565b62000c8f8162000c32565b811462000c9b57600080fd5b50565b62000ca98162000c3c565b811462000cb557600080fd5b50565b60805160601c613d0e62000cde60003960008181610606015261065a0152613d0e6000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80638da5cb5b116100de578063b1e5e2b711610097578063d86eab4711610071578063d86eab471461046f578063e63ab1e91461049f578063ea0192a0146104bd578063f2fde38b146104ed5761018e565b8063b1e5e2b714610407578063ca15c87314610423578063d547741f146104535761018e565b80638da5cb5b1461031f5780639010d07c1461033d57806391d148541461036d5780639a1366971461039d578063a217fddf146103b9578063a9d7fc21146103d75761018e565b80632f2ff15d1161014b5780635c975abb116101255780635c975abb146102cf578063715018a6146102ed57806375b238fc146102f75780638456cb59146103155761018e565b80632f2ff15d1461028d57806336568abe146102a95780633f4ba83a146102c55761018e565b806301ffc9a714610193578063150b7a02146101c35780631906ab9b146101f35780631e612da8146102115780631fe543e314610241578063248a9ca31461025d575b600080fd5b6101ad60048036038101906101a89190612ebd565b610509565b6040516101ba91906133f6565b60405180910390f35b6101dd60048036038101906101d89190612d73565b610583565b6040516101ea919061347f565b60405180910390f35b6101fb6105b1565b60405161020891906135ea565b60405180910390f35b61022b60048036038101906102269190612d4a565b6105bb565b60405161023891906135ea565b60405180910390f35b61025b60048036038101906102569190612fc8565b610604565b005b61027760048036038101906102729190612e1c565b6106c4565b6040516102849190613411565b60405180910390f35b6102a760048036038101906102a29190612e45565b6106e3565b005b6102c360048036038101906102be9190612e45565b610704565b005b6102cd610787565b005b6102d76107bc565b6040516102e491906133f6565b60405180910390f35b6102f56107d3565b005b6102ff61085b565b60405161030c9190613411565b60405180910390f35b61031d61087f565b005b6103276108b4565b60405161033491906132e4565b60405180910390f35b61035760048036038101906103529190612e81565b6108de565b60405161036491906132e4565b60405180910390f35b61038760048036038101906103829190612e45565b61090d565b60405161039491906133f6565b60405180910390f35b6103b760048036038101906103b29190612f0f565b610977565b005b6103c1610beb565b6040516103ce9190613411565b60405180910390f35b6103f160048036038101906103ec9190612ee6565b610bf2565b6040516103fe91906135ea565b60405180910390f35b610421600480360381019061041c9190612f76565b610c82565b005b61043d60048036038101906104389190612e1c565b6111f1565b60405161044a91906135ea565b60405180910390f35b61046d60048036038101906104689190612e45565b611215565b005b61048960048036038101906104849190612ee6565b611236565b60405161049691906133d4565b60405180910390f35b6104a7611311565b6040516104b49190613411565b60405180910390f35b6104d760048036038101906104d29190612ee6565b611335565b6040516104e491906135ea565b60405180910390f35b61050760048036038101906105029190612d4a565b61167b565b005b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061057c575061057b826118e6565b5b9050919050565b60007f150b7a023d4804d13e8c85fb27262cb750cf6ba9f9dd3bb30d90f482ceeb4b1f905095945050505050565b6000600454905090565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106b657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016106ad9291906132ff565b60405180910390fd5b6106c08282611960565b5050565b6000806000838152602001908152602001600020600101549050919050565b6106ec826106c4565b6106f5816119ff565b6106ff8383611a13565b505050565b61070c611ab7565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610779576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610770906135ca565b60405180910390fd5b6107838282611abf565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6107b1816119ff565b6107b9611b63565b50565b6000600260149054906101000a900460ff16905090565b6107db611ab7565b73ffffffffffffffffffffffffffffffffffffffff166107f96108b4565b73ffffffffffffffffffffffffffffffffffffffff161461084f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610846906135aa565b60405180910390fd5b6108596000611c05565b565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6108a9816119ff565b6108b1611ccb565b50565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006109058260016000868152602001908152602001600020611d6e90919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61097f6107bc565b156109bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b69061358a565b60405180910390fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756109e9816119ff565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d3fc98643085856040518463ffffffff1660e01b8152600401610a489392919061335f565b600060405180830381600087803b158015610a6257600080fd5b505af1158015610a76573d6000803e3d6000fd5b5050505060066000856003811115610ab7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811115610aef577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020019081526020016000208390806001815401808255809150506001900390600052602060002001600090919091909150557f99f416e25a0f9360ca447cc71598c43e0fc939787e14faa4e7b3bf51ccf5de088460066000876003811115610b83577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811115610bbb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020019081526020016000208054905085604051610bdd939291906134d1565b60405180910390a150505050565b6000801b81565b600060066000836003811115610c31577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811115610c69577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001908152602001600020805490509050919050565b610c8a6107bc565b15610cca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc19061358a565b60405180910390fd5b6004544210610d12576004546040517f691e5682000000000000000000000000000000000000000000000000000000008152600401610d0991906135ea565b60405180910390fd5b6000610d1c611ab7565b90506000600760008481526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff166003811115610d89577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811115610dc1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050905060076000848152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090555050600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090558173ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614610f2c576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81604001511415610f8a576040517fd93e896f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081600001519050600060066000836003811115610fd2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381111561100a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020019081526020016000208054905090506000811415611059576040517f6e99268600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8530600560008760038111156110d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381111561110e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001908152602001600020546040518463ffffffff1660e01b815260040161113b93929190613328565b602060405180830381600087803b15801561115557600080fd5b505af1158015611169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118d9190612df3565b6111c3576040517fffd586b900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006111dc828560400151611d8890919063ffffffff16565b90506111e9838683611d9e565b505050505050565b600061120e60016000848152602001908152602001600020611fdb565b9050919050565b61121e826106c4565b611227816119ff565b6112318383611abf565b505050565b606060066000836003811115611275577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038111156112ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561130557602002820191906000526020600020905b8154815260200190600101908083116112f1575b50505050509050919050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b600061133f6107bc565b1561137f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113769061358a565b60405180910390fd5b60045442106113c7576004546040517f691e56820000000000000000000000000000000000000000000000000000000081526004016113be91906135ea565b60405180910390fd5b60006113d1611ab7565b90506000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461144c576040517f8b46d2c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600c54600d60009054906101000a900467ffffffffffffffff166003620186a060016040518663ffffffff1660e01b81526004016114cc95949392919061342c565b602060405180830381600087803b1580156114e657600080fd5b505af11580156114fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151e9190612f9f565b915081600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600760008481526020019081526020016000209050838160000160006101000a81548160ff021916908360038111156115c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550818160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81600101819055507f563346928a474bb9aa88267cb3c79d1a3520fc4d63177ad5eed057408ed5ecf584838560405161166c9392919061349a565b60405180910390a15050919050565b611683611ab7565b73ffffffffffffffffffffffffffffffffffffffff166116a16108b4565b73ffffffffffffffffffffffffffffffffffffffff16146116f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ee906135aa565b60405180910390fd5b6117217fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582611a13565b61172e6000801b82611a13565b61175f7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561175a6108b4565b611abf565b6117736000801b61176e6108b4565b611abf565b61177c81611ff0565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6117ac82826117d6565b6117d181600160008581526020019081526020016000206118b690919063ffffffff16565b505050565b6117e0828261090d565b6118b257600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611857611ab7565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006118de836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6120e8565b905092915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611959575061195882612158565b5b9050919050565b60008160008151811061199c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508060076000858152602001908152602001600020600101819055507f45b6eedd25b1b5c371d24f0338eccfea7dacaca789cf8dc0694d8fd308dc25c183826040516119f2929190613605565b60405180910390a1505050565b611a1081611a0b611ab7565b6121c2565b50565b611a1d82826117a2565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775821480611a4d57506000801b82145b15611ab357611a7c7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a826117a2565b6000801b821415611ab257611ab17fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775826117a2565b5b5b5050565b600033905090565b611ac9828261225f565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775821480611af957506000801b82145b15611b5f57611b287f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8261225f565b6000801b821415611b5e57611b5d7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775826117a2565b5b5b5050565b611b6b6107bc565b611baa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba19061354a565b60405180910390fd5b6000600260146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611bee611ab7565b604051611bfb91906132e4565b60405180910390a1565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611cd36107bc565b15611d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0a9061358a565b60405180910390fd5b6001600260146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611d57611ab7565b604051611d6491906132e4565b60405180910390a1565b6000611d7d8360000183612293565b60001c905092915050565b60008183611d9691906139af565b905092915050565b600060066000856003811115611ddd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811115611e15577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020019081526020016000208281548110611e5b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050611e7282856122e4565b60066000866003811115611eaf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811115611ee7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020019081526020016000209080519060200190611f08929190612b05565b50600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3085846040518463ffffffff1660e01b8152600401611f6893929190613328565b600060405180830381600087803b158015611f8257600080fd5b505af1158015611f96573d6000803e3d6000fd5b505050507fb84c51b5972dee6f0d5b879da24ecd8d4f93168b696aa2b12a5dcf9036656959838383604051611fcd9392919061339d565b60405180910390a150505050565b6000611fe982600001612540565b9050919050565b611ff8611ab7565b73ffffffffffffffffffffffffffffffffffffffff166120166108b4565b73ffffffffffffffffffffffffffffffffffffffff161461206c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612063906135aa565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156120dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d39061356a565b60405180910390fd5b6120e581611c05565b50565b60006120f48383612551565b61214d578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612152565b600090505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6121cc828261090d565b61225b576121f18173ffffffffffffffffffffffffffffffffffffffff166014612574565b6121ff8360001c6020612574565b6040516020016122109291906132aa565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122529190613508565b60405180910390fd5b5050565b612269828261286e565b61228e816001600085815260200190815260200160002061294f90919063ffffffff16565b505050565b60008260000182815481106122d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b6060600060066000846003811115612325577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381111561235d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020019081526020016000209050808054905084106123d057808054806020026020016040519081016040528092919081815260200182805480156123c357602002820191906000526020600020905b8154815260200190600101908083116123af575b505050505091505061253a565b60008490505b600182805490506123e791906137c0565b81101561249857816001826123fc9190613710565b81548110612433577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154828281548110612477577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200181905550808061249090613966565b9150506123d6565b50808054806124d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590558080548060200260200160405190810160405280929190818152602001828054801561253157602002820191906000526020600020905b81548152602001906001019080831161251d575b50505050509150505b92915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b6060600060028360026125879190613766565b6125919190613710565b67ffffffffffffffff8111156125d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156126025781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612660577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106126ea577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261272a9190613766565b6127349190613710565b90505b6001811115612820577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061279c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8282815181106127d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806128199061390b565b9050612737565b5060008414612864576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285b9061352a565b60405180910390fd5b8091505092915050565b612878828261090d565b1561294b57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506128f0611ab7565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000612977836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61297f565b905092915050565b60008083600101600084815260200190815260200160002054905060008114612af95760006001826129b191906137c0565b90506000600186600001805490506129c991906137c0565b9050818114612a84576000866000018281548110612a10577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110612a5a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612abe577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612aff565b60009150505b92915050565b828054828255906000526020600020908101928215612b41579160200282015b82811115612b40578251825591602001919060010190612b25565b5b509050612b4e9190612b52565b5090565b5b80821115612b6b576000816000905550600101612b53565b5090565b6000612b82612b7d84613653565b61362e565b90508083825260208201905082856020860282011115612ba157600080fd5b60005b85811015612bd15781612bb78882612d20565b845260208401935060208301925050600181019050612ba4565b5050509392505050565b6000612bee612be98461367f565b61362e565b905082815260208101848484011115612c0657600080fd5b612c118482856138c9565b509392505050565b600081359050612c2881613c55565b92915050565b600082601f830112612c3f57600080fd5b8135612c4f848260208601612b6f565b91505092915050565b600081519050612c6781613c6c565b92915050565b600081359050612c7c81613c83565b92915050565b600081359050612c9181613c9a565b92915050565b60008083601f840112612ca957600080fd5b8235905067ffffffffffffffff811115612cc257600080fd5b602083019150836001820283011115612cda57600080fd5b9250929050565b600081359050612cf081613cb1565b92915050565b600082601f830112612d0757600080fd5b8135612d17848260208601612bdb565b91505092915050565b600081359050612d2f81613cc1565b92915050565b600081519050612d4481613cc1565b92915050565b600060208284031215612d5c57600080fd5b6000612d6a84828501612c19565b91505092915050565b600080600080600060808688031215612d8b57600080fd5b6000612d9988828901612c19565b9550506020612daa88828901612c19565b9450506040612dbb88828901612d20565b935050606086013567ffffffffffffffff811115612dd857600080fd5b612de488828901612c97565b92509250509295509295909350565b600060208284031215612e0557600080fd5b6000612e1384828501612c58565b91505092915050565b600060208284031215612e2e57600080fd5b6000612e3c84828501612c6d565b91505092915050565b60008060408385031215612e5857600080fd5b6000612e6685828601612c6d565b9250506020612e7785828601612c19565b9150509250929050565b60008060408385031215612e9457600080fd5b6000612ea285828601612c6d565b9250506020612eb385828601612d20565b9150509250929050565b600060208284031215612ecf57600080fd5b6000612edd84828501612c82565b91505092915050565b600060208284031215612ef857600080fd5b6000612f0684828501612ce1565b91505092915050565b600080600060608486031215612f2457600080fd5b6000612f3286828701612ce1565b9350506020612f4386828701612d20565b925050604084013567ffffffffffffffff811115612f6057600080fd5b612f6c86828701612cf6565b9150509250925092565b600060208284031215612f8857600080fd5b6000612f9684828501612d20565b91505092915050565b600060208284031215612fb157600080fd5b6000612fbf84828501612d35565b91505092915050565b60008060408385031215612fdb57600080fd5b6000612fe985828601612d20565b925050602083013567ffffffffffffffff81111561300657600080fd5b61301285828601612c2e565b9150509250929050565b6000613028838361326e565b60208301905092915050565b61303d816137f4565b82525050565b600061304e826136c0565b61305881856136e3565b9350613063836136b0565b8060005b8381101561309457815161307b888261301c565b9750613086836136d6565b925050600181019050613067565b5085935050505092915050565b6130aa81613806565b82525050565b6130b981613812565b82525050565b6130c88161381c565b82525050565b6130d7816138b7565b82525050565b60006130e8826136cb565b6130f281856136f4565b93506131028185602086016138d8565b61310b81613a9c565b840191505092915050565b6000613121826136cb565b61312b8185613705565b935061313b8185602086016138d8565b80840191505092915050565b60006131546020836136f4565b915061315f82613aad565b602082019050919050565b60006131776014836136f4565b915061318282613ad6565b602082019050919050565b600061319a6026836136f4565b91506131a582613aff565b604082019050919050565b60006131bd6010836136f4565b91506131c882613b4e565b602082019050919050565b60006131e06020836136f4565b91506131eb82613b77565b602082019050919050565b6000613203601783613705565b915061320e82613ba0565b601782019050919050565b6000613226601183613705565b915061323182613bc9565b601182019050919050565b6000613249602f836136f4565b915061325482613bf2565b604082019050919050565b6132688161385b565b82525050565b61327781613889565b82525050565b61328681613889565b82525050565b61329581613893565b82525050565b6132a4816138a3565b82525050565b60006132b5826131f6565b91506132c18285613116565b91506132cc82613219565b91506132d88284613116565b91508190509392505050565b60006020820190506132f96000830184613034565b92915050565b60006040820190506133146000830185613034565b6133216020830184613034565b9392505050565b600060608201905061333d6000830186613034565b61334a6020830185613034565b613357604083018461327d565b949350505050565b60006060820190506133746000830186613034565b613381602083018561327d565b818103604083015261339381846130dd565b9050949350505050565b60006060820190506133b26000830186613034565b6133bf602083018561327d565b6133cc604083018461327d565b949350505050565b600060208201905081810360008301526133ee8184613043565b905092915050565b600060208201905061340b60008301846130a1565b92915050565b600060208201905061342660008301846130b0565b92915050565b600060a08201905061344160008301886130b0565b61344e602083018761329b565b61345b604083018661325f565b613468606083018561328c565b613475608083018461328c565b9695505050505050565b600060208201905061349460008301846130bf565b92915050565b60006060820190506134af60008301866130ce565b6134bc6020830185613034565b6134c9604083018461327d565b949350505050565b60006060820190506134e660008301866130ce565b6134f3602083018561327d565b613500604083018461327d565b949350505050565b6000602082019050818103600083015261352281846130dd565b905092915050565b6000602082019050818103600083015261354381613147565b9050919050565b600060208201905081810360008301526135638161316a565b9050919050565b600060208201905081810360008301526135838161318d565b9050919050565b600060208201905081810360008301526135a3816131b0565b9050919050565b600060208201905081810360008301526135c3816131d3565b9050919050565b600060208201905081810360008301526135e38161323c565b9050919050565b60006020820190506135ff600083018461327d565b92915050565b600060408201905061361a600083018561327d565b613627602083018461327d565b9392505050565b6000613638613649565b90506136448282613935565b919050565b6000604051905090565b600067ffffffffffffffff82111561366e5761366d613a6d565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561369a57613699613a6d565b5b6136a382613a9c565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061371b82613889565b915061372683613889565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561375b5761375a6139e0565b5b828201905092915050565b600061377182613889565b915061377c83613889565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156137b5576137b46139e0565b5b828202905092915050565b60006137cb82613889565b91506137d683613889565b9250828210156137e9576137e86139e0565b5b828203905092915050565b60006137ff82613869565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600081905061385682613c41565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006138c282613848565b9050919050565b82818337600083830152505050565b60005b838110156138f65780820151818401526020810190506138db565b83811115613905576000848401525b50505050565b600061391682613889565b9150600082141561392a576139296139e0565b5b600182039050919050565b61393e82613a9c565b810181811067ffffffffffffffff8211171561395d5761395c613a6d565b5b80604052505050565b600061397182613889565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156139a4576139a36139e0565b5b600182019050919050565b60006139ba82613889565b91506139c583613889565b9250826139d5576139d4613a0f565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60048110613c5257613c51613a3e565b5b50565b613c5e816137f4565b8114613c6957600080fd5b50565b613c7581613806565b8114613c8057600080fd5b50565b613c8c81613812565b8114613c9757600080fd5b50565b613ca38161381c565b8114613cae57600080fd5b50565b60048110613cbe57600080fd5b50565b613cca81613889565b8114613cd557600080fd5b5056fea26469706673582212206102ba30e948aec10533fdc23a95c7963b6afe0ada46f6540d0be20e1119e27d64736f6c63430008040033",
}

// MagicBoxABI is the input ABI used to generate the binding from.
// Deprecated: Use MagicBoxMetaData.ABI instead.
var MagicBoxABI = MagicBoxMetaData.ABI

// MagicBoxBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MagicBoxMetaData.Bin instead.
var MagicBoxBin = MagicBoxMetaData.Bin

// DeployMagicBox deploys a new Ethereum contract, binding an instance of MagicBox to it.
func DeployMagicBox(auth *bind.TransactOpts, backend bind.ContractBackend, acceptToken common.Address, vrfCoordinator common.Address, magicBoxReward common.Address, endedAt *big.Int, subscriptionId uint64, keyHash [32]byte) (common.Address, *types.Transaction, *MagicBox, error) {
	parsed, err := MagicBoxMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MagicBoxBin), backend, acceptToken, vrfCoordinator, magicBoxReward, endedAt, subscriptionId, keyHash)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MagicBox{MagicBoxCaller: MagicBoxCaller{contract: contract}, MagicBoxTransactor: MagicBoxTransactor{contract: contract}, MagicBoxFilterer: MagicBoxFilterer{contract: contract}}, nil
}

// MagicBox is an auto generated Go binding around an Ethereum contract.
type MagicBox struct {
	MagicBoxCaller     // Read-only binding to the contract
	MagicBoxTransactor // Write-only binding to the contract
	MagicBoxFilterer   // Log filterer for contract events
}

// MagicBoxCaller is an auto generated read-only Go binding around an Ethereum contract.
type MagicBoxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicBoxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MagicBoxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicBoxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MagicBoxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicBoxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MagicBoxSession struct {
	Contract     *MagicBox         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MagicBoxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MagicBoxCallerSession struct {
	Contract *MagicBoxCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// MagicBoxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MagicBoxTransactorSession struct {
	Contract     *MagicBoxTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// MagicBoxRaw is an auto generated low-level Go binding around an Ethereum contract.
type MagicBoxRaw struct {
	Contract *MagicBox // Generic contract binding to access the raw methods on
}

// MagicBoxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MagicBoxCallerRaw struct {
	Contract *MagicBoxCaller // Generic read-only contract binding to access the raw methods on
}

// MagicBoxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MagicBoxTransactorRaw struct {
	Contract *MagicBoxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMagicBox creates a new instance of MagicBox, bound to a specific deployed contract.
func NewMagicBox(address common.Address, backend bind.ContractBackend) (*MagicBox, error) {
	contract, err := bindMagicBox(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MagicBox{MagicBoxCaller: MagicBoxCaller{contract: contract}, MagicBoxTransactor: MagicBoxTransactor{contract: contract}, MagicBoxFilterer: MagicBoxFilterer{contract: contract}}, nil
}

// NewMagicBoxCaller creates a new read-only instance of MagicBox, bound to a specific deployed contract.
func NewMagicBoxCaller(address common.Address, caller bind.ContractCaller) (*MagicBoxCaller, error) {
	contract, err := bindMagicBox(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MagicBoxCaller{contract: contract}, nil
}

// NewMagicBoxTransactor creates a new write-only instance of MagicBox, bound to a specific deployed contract.
func NewMagicBoxTransactor(address common.Address, transactor bind.ContractTransactor) (*MagicBoxTransactor, error) {
	contract, err := bindMagicBox(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MagicBoxTransactor{contract: contract}, nil
}

// NewMagicBoxFilterer creates a new log filterer instance of MagicBox, bound to a specific deployed contract.
func NewMagicBoxFilterer(address common.Address, filterer bind.ContractFilterer) (*MagicBoxFilterer, error) {
	contract, err := bindMagicBox(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MagicBoxFilterer{contract: contract}, nil
}

// bindMagicBox binds a generic wrapper to an already deployed contract.
func bindMagicBox(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MagicBoxABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MagicBox *MagicBoxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MagicBox.Contract.MagicBoxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MagicBox *MagicBoxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MagicBox.Contract.MagicBoxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MagicBox *MagicBoxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MagicBox.Contract.MagicBoxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MagicBox *MagicBoxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MagicBox.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MagicBox *MagicBoxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MagicBox.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MagicBox *MagicBoxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MagicBox.Contract.contract.Transact(opts, method, params...)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_MagicBox *MagicBoxCaller) ADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _MagicBox.contract.Call(opts, &out, "ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_MagicBox *MagicBoxSession) ADMINROLE() ([32]byte, error) {
	return _MagicBox.Contract.ADMINROLE(&_MagicBox.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_MagicBox *MagicBoxCallerSession) ADMINROLE() ([32]byte, error) {
	return _MagicBox.Contract.ADMINROLE(&_MagicBox.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_MagicBox *MagicBoxCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _MagicBox.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_MagicBox *MagicBoxSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _MagicBox.Contract.DEFAULTADMINROLE(&_MagicBox.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_MagicBox *MagicBoxCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _MagicBox.Contract.DEFAULTADMINROLE(&_MagicBox.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_MagicBox *MagicBoxCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _MagicBox.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_MagicBox *MagicBoxSession) PAUSERROLE() ([32]byte, error) {
	return _MagicBox.Contract.PAUSERROLE(&_MagicBox.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_MagicBox *MagicBoxCallerSession) PAUSERROLE() ([32]byte, error) {
	return _MagicBox.Contract.PAUSERROLE(&_MagicBox.CallOpts)
}

// GetEndedAt is a free data retrieval call binding the contract method 0x1906ab9b.
//
// Solidity: function getEndedAt() view returns(uint256)
func (_MagicBox *MagicBoxCaller) GetEndedAt(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MagicBox.contract.Call(opts, &out, "getEndedAt")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEndedAt is a free data retrieval call binding the contract method 0x1906ab9b.
//
// Solidity: function getEndedAt() view returns(uint256)
func (_MagicBox *MagicBoxSession) GetEndedAt() (*big.Int, error) {
	return _MagicBox.Contract.GetEndedAt(&_MagicBox.CallOpts)
}

// GetEndedAt is a free data retrieval call binding the contract method 0x1906ab9b.
//
// Solidity: function getEndedAt() view returns(uint256)
func (_MagicBox *MagicBoxCallerSession) GetEndedAt() (*big.Int, error) {
	return _MagicBox.Contract.GetEndedAt(&_MagicBox.CallOpts)
}

// GetRequestId is a free data retrieval call binding the contract method 0x1e612da8.
//
// Solidity: function getRequestId(address sender) view returns(uint256)
func (_MagicBox *MagicBoxCaller) GetRequestId(opts *bind.CallOpts, sender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MagicBox.contract.Call(opts, &out, "getRequestId", sender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRequestId is a free data retrieval call binding the contract method 0x1e612da8.
//
// Solidity: function getRequestId(address sender) view returns(uint256)
func (_MagicBox *MagicBoxSession) GetRequestId(sender common.Address) (*big.Int, error) {
	return _MagicBox.Contract.GetRequestId(&_MagicBox.CallOpts, sender)
}

// GetRequestId is a free data retrieval call binding the contract method 0x1e612da8.
//
// Solidity: function getRequestId(address sender) view returns(uint256)
func (_MagicBox *MagicBoxCallerSession) GetRequestId(sender common.Address) (*big.Int, error) {
	return _MagicBox.Contract.GetRequestId(&_MagicBox.CallOpts, sender)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_MagicBox *MagicBoxCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _MagicBox.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_MagicBox *MagicBoxSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _MagicBox.Contract.GetRoleAdmin(&_MagicBox.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_MagicBox *MagicBoxCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _MagicBox.Contract.GetRoleAdmin(&_MagicBox.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_MagicBox *MagicBoxCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _MagicBox.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_MagicBox *MagicBoxSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _MagicBox.Contract.GetRoleMember(&_MagicBox.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_MagicBox *MagicBoxCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _MagicBox.Contract.GetRoleMember(&_MagicBox.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_MagicBox *MagicBoxCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _MagicBox.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_MagicBox *MagicBoxSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _MagicBox.Contract.GetRoleMemberCount(&_MagicBox.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_MagicBox *MagicBoxCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _MagicBox.Contract.GetRoleMemberCount(&_MagicBox.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_MagicBox *MagicBoxCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _MagicBox.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_MagicBox *MagicBoxSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _MagicBox.Contract.HasRole(&_MagicBox.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_MagicBox *MagicBoxCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _MagicBox.Contract.HasRole(&_MagicBox.CallOpts, role, account)
}

// ListReward is a free data retrieval call binding the contract method 0xd86eab47.
//
// Solidity: function listReward(uint8 boxType) view returns(uint256[])
func (_MagicBox *MagicBoxCaller) ListReward(opts *bind.CallOpts, boxType uint8) ([]*big.Int, error) {
	var out []interface{}
	err := _MagicBox.contract.Call(opts, &out, "listReward", boxType)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// ListReward is a free data retrieval call binding the contract method 0xd86eab47.
//
// Solidity: function listReward(uint8 boxType) view returns(uint256[])
func (_MagicBox *MagicBoxSession) ListReward(boxType uint8) ([]*big.Int, error) {
	return _MagicBox.Contract.ListReward(&_MagicBox.CallOpts, boxType)
}

// ListReward is a free data retrieval call binding the contract method 0xd86eab47.
//
// Solidity: function listReward(uint8 boxType) view returns(uint256[])
func (_MagicBox *MagicBoxCallerSession) ListReward(boxType uint8) ([]*big.Int, error) {
	return _MagicBox.Contract.ListReward(&_MagicBox.CallOpts, boxType)
}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_MagicBox *MagicBoxCaller) OnERC721Received(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	var out []interface{}
	err := _MagicBox.contract.Call(opts, &out, "onERC721Received", arg0, arg1, arg2, arg3)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_MagicBox *MagicBoxSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	return _MagicBox.Contract.OnERC721Received(&_MagicBox.CallOpts, arg0, arg1, arg2, arg3)
}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_MagicBox *MagicBoxCallerSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	return _MagicBox.Contract.OnERC721Received(&_MagicBox.CallOpts, arg0, arg1, arg2, arg3)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MagicBox *MagicBoxCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MagicBox.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MagicBox *MagicBoxSession) Owner() (common.Address, error) {
	return _MagicBox.Contract.Owner(&_MagicBox.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MagicBox *MagicBoxCallerSession) Owner() (common.Address, error) {
	return _MagicBox.Contract.Owner(&_MagicBox.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_MagicBox *MagicBoxCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _MagicBox.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_MagicBox *MagicBoxSession) Paused() (bool, error) {
	return _MagicBox.Contract.Paused(&_MagicBox.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_MagicBox *MagicBoxCallerSession) Paused() (bool, error) {
	return _MagicBox.Contract.Paused(&_MagicBox.CallOpts)
}

// RemainReward is a free data retrieval call binding the contract method 0xa9d7fc21.
//
// Solidity: function remainReward(uint8 boxType) view returns(uint256)
func (_MagicBox *MagicBoxCaller) RemainReward(opts *bind.CallOpts, boxType uint8) (*big.Int, error) {
	var out []interface{}
	err := _MagicBox.contract.Call(opts, &out, "remainReward", boxType)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RemainReward is a free data retrieval call binding the contract method 0xa9d7fc21.
//
// Solidity: function remainReward(uint8 boxType) view returns(uint256)
func (_MagicBox *MagicBoxSession) RemainReward(boxType uint8) (*big.Int, error) {
	return _MagicBox.Contract.RemainReward(&_MagicBox.CallOpts, boxType)
}

// RemainReward is a free data retrieval call binding the contract method 0xa9d7fc21.
//
// Solidity: function remainReward(uint8 boxType) view returns(uint256)
func (_MagicBox *MagicBoxCallerSession) RemainReward(boxType uint8) (*big.Int, error) {
	return _MagicBox.Contract.RemainReward(&_MagicBox.CallOpts, boxType)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_MagicBox *MagicBoxCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _MagicBox.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_MagicBox *MagicBoxSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _MagicBox.Contract.SupportsInterface(&_MagicBox.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_MagicBox *MagicBoxCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _MagicBox.Contract.SupportsInterface(&_MagicBox.CallOpts, interfaceId)
}

// AddReward is a paid mutator transaction binding the contract method 0x9a136697.
//
// Solidity: function addReward(uint8 boxType, uint256 nftRewardId, string tokenURI) returns()
func (_MagicBox *MagicBoxTransactor) AddReward(opts *bind.TransactOpts, boxType uint8, nftRewardId *big.Int, tokenURI string) (*types.Transaction, error) {
	return _MagicBox.contract.Transact(opts, "addReward", boxType, nftRewardId, tokenURI)
}

// AddReward is a paid mutator transaction binding the contract method 0x9a136697.
//
// Solidity: function addReward(uint8 boxType, uint256 nftRewardId, string tokenURI) returns()
func (_MagicBox *MagicBoxSession) AddReward(boxType uint8, nftRewardId *big.Int, tokenURI string) (*types.Transaction, error) {
	return _MagicBox.Contract.AddReward(&_MagicBox.TransactOpts, boxType, nftRewardId, tokenURI)
}

// AddReward is a paid mutator transaction binding the contract method 0x9a136697.
//
// Solidity: function addReward(uint8 boxType, uint256 nftRewardId, string tokenURI) returns()
func (_MagicBox *MagicBoxTransactorSession) AddReward(boxType uint8, nftRewardId *big.Int, tokenURI string) (*types.Transaction, error) {
	return _MagicBox.Contract.AddReward(&_MagicBox.TransactOpts, boxType, nftRewardId, tokenURI)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_MagicBox *MagicBoxTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _MagicBox.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_MagicBox *MagicBoxSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _MagicBox.Contract.GrantRole(&_MagicBox.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_MagicBox *MagicBoxTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _MagicBox.Contract.GrantRole(&_MagicBox.TransactOpts, role, account)
}

// OpenBox is a paid mutator transaction binding the contract method 0xb1e5e2b7.
//
// Solidity: function openBox(uint256 requestId) returns()
func (_MagicBox *MagicBoxTransactor) OpenBox(opts *bind.TransactOpts, requestId *big.Int) (*types.Transaction, error) {
	return _MagicBox.contract.Transact(opts, "openBox", requestId)
}

// OpenBox is a paid mutator transaction binding the contract method 0xb1e5e2b7.
//
// Solidity: function openBox(uint256 requestId) returns()
func (_MagicBox *MagicBoxSession) OpenBox(requestId *big.Int) (*types.Transaction, error) {
	return _MagicBox.Contract.OpenBox(&_MagicBox.TransactOpts, requestId)
}

// OpenBox is a paid mutator transaction binding the contract method 0xb1e5e2b7.
//
// Solidity: function openBox(uint256 requestId) returns()
func (_MagicBox *MagicBoxTransactorSession) OpenBox(requestId *big.Int) (*types.Transaction, error) {
	return _MagicBox.Contract.OpenBox(&_MagicBox.TransactOpts, requestId)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_MagicBox *MagicBoxTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MagicBox.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_MagicBox *MagicBoxSession) Pause() (*types.Transaction, error) {
	return _MagicBox.Contract.Pause(&_MagicBox.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_MagicBox *MagicBoxTransactorSession) Pause() (*types.Transaction, error) {
	return _MagicBox.Contract.Pause(&_MagicBox.TransactOpts)
}

// RawFulfillRandomWords is a paid mutator transaction binding the contract method 0x1fe543e3.
//
// Solidity: function rawFulfillRandomWords(uint256 requestId, uint256[] randomWords) returns()
func (_MagicBox *MagicBoxTransactor) RawFulfillRandomWords(opts *bind.TransactOpts, requestId *big.Int, randomWords []*big.Int) (*types.Transaction, error) {
	return _MagicBox.contract.Transact(opts, "rawFulfillRandomWords", requestId, randomWords)
}

// RawFulfillRandomWords is a paid mutator transaction binding the contract method 0x1fe543e3.
//
// Solidity: function rawFulfillRandomWords(uint256 requestId, uint256[] randomWords) returns()
func (_MagicBox *MagicBoxSession) RawFulfillRandomWords(requestId *big.Int, randomWords []*big.Int) (*types.Transaction, error) {
	return _MagicBox.Contract.RawFulfillRandomWords(&_MagicBox.TransactOpts, requestId, randomWords)
}

// RawFulfillRandomWords is a paid mutator transaction binding the contract method 0x1fe543e3.
//
// Solidity: function rawFulfillRandomWords(uint256 requestId, uint256[] randomWords) returns()
func (_MagicBox *MagicBoxTransactorSession) RawFulfillRandomWords(requestId *big.Int, randomWords []*big.Int) (*types.Transaction, error) {
	return _MagicBox.Contract.RawFulfillRandomWords(&_MagicBox.TransactOpts, requestId, randomWords)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MagicBox *MagicBoxTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MagicBox.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MagicBox *MagicBoxSession) RenounceOwnership() (*types.Transaction, error) {
	return _MagicBox.Contract.RenounceOwnership(&_MagicBox.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MagicBox *MagicBoxTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _MagicBox.Contract.RenounceOwnership(&_MagicBox.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_MagicBox *MagicBoxTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _MagicBox.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_MagicBox *MagicBoxSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _MagicBox.Contract.RenounceRole(&_MagicBox.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_MagicBox *MagicBoxTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _MagicBox.Contract.RenounceRole(&_MagicBox.TransactOpts, role, account)
}

// RequestBox is a paid mutator transaction binding the contract method 0xea0192a0.
//
// Solidity: function requestBox(uint8 boxType) returns(uint256 requestId)
func (_MagicBox *MagicBoxTransactor) RequestBox(opts *bind.TransactOpts, boxType uint8) (*types.Transaction, error) {
	return _MagicBox.contract.Transact(opts, "requestBox", boxType)
}

// RequestBox is a paid mutator transaction binding the contract method 0xea0192a0.
//
// Solidity: function requestBox(uint8 boxType) returns(uint256 requestId)
func (_MagicBox *MagicBoxSession) RequestBox(boxType uint8) (*types.Transaction, error) {
	return _MagicBox.Contract.RequestBox(&_MagicBox.TransactOpts, boxType)
}

// RequestBox is a paid mutator transaction binding the contract method 0xea0192a0.
//
// Solidity: function requestBox(uint8 boxType) returns(uint256 requestId)
func (_MagicBox *MagicBoxTransactorSession) RequestBox(boxType uint8) (*types.Transaction, error) {
	return _MagicBox.Contract.RequestBox(&_MagicBox.TransactOpts, boxType)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_MagicBox *MagicBoxTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _MagicBox.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_MagicBox *MagicBoxSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _MagicBox.Contract.RevokeRole(&_MagicBox.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_MagicBox *MagicBoxTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _MagicBox.Contract.RevokeRole(&_MagicBox.TransactOpts, role, account)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MagicBox *MagicBoxTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _MagicBox.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MagicBox *MagicBoxSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MagicBox.Contract.TransferOwnership(&_MagicBox.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MagicBox *MagicBoxTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MagicBox.Contract.TransferOwnership(&_MagicBox.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_MagicBox *MagicBoxTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MagicBox.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_MagicBox *MagicBoxSession) Unpause() (*types.Transaction, error) {
	return _MagicBox.Contract.Unpause(&_MagicBox.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_MagicBox *MagicBoxTransactorSession) Unpause() (*types.Transaction, error) {
	return _MagicBox.Contract.Unpause(&_MagicBox.TransactOpts)
}

// MagicBoxBoxReceivedIterator is returned from FilterBoxReceived and is used to iterate over the raw logs and unpacked data for BoxReceived events raised by the MagicBox contract.
type MagicBoxBoxReceivedIterator struct {
	Event *MagicBoxBoxReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MagicBoxBoxReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MagicBoxBoxReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MagicBoxBoxReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MagicBoxBoxReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MagicBoxBoxReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MagicBoxBoxReceived represents a BoxReceived event raised by the MagicBox contract.
type MagicBoxBoxReceived struct {
	RequestId  *big.Int
	Randomness *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterBoxReceived is a free log retrieval operation binding the contract event 0x45b6eedd25b1b5c371d24f0338eccfea7dacaca789cf8dc0694d8fd308dc25c1.
//
// Solidity: event BoxReceived(uint256 requestId, uint256 randomness)
func (_MagicBox *MagicBoxFilterer) FilterBoxReceived(opts *bind.FilterOpts) (*MagicBoxBoxReceivedIterator, error) {

	logs, sub, err := _MagicBox.contract.FilterLogs(opts, "BoxReceived")
	if err != nil {
		return nil, err
	}
	return &MagicBoxBoxReceivedIterator{contract: _MagicBox.contract, event: "BoxReceived", logs: logs, sub: sub}, nil
}

// WatchBoxReceived is a free log subscription operation binding the contract event 0x45b6eedd25b1b5c371d24f0338eccfea7dacaca789cf8dc0694d8fd308dc25c1.
//
// Solidity: event BoxReceived(uint256 requestId, uint256 randomness)
func (_MagicBox *MagicBoxFilterer) WatchBoxReceived(opts *bind.WatchOpts, sink chan<- *MagicBoxBoxReceived) (event.Subscription, error) {

	logs, sub, err := _MagicBox.contract.WatchLogs(opts, "BoxReceived")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MagicBoxBoxReceived)
				if err := _MagicBox.contract.UnpackLog(event, "BoxReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBoxReceived is a log parse operation binding the contract event 0x45b6eedd25b1b5c371d24f0338eccfea7dacaca789cf8dc0694d8fd308dc25c1.
//
// Solidity: event BoxReceived(uint256 requestId, uint256 randomness)
func (_MagicBox *MagicBoxFilterer) ParseBoxReceived(log types.Log) (*MagicBoxBoxReceived, error) {
	event := new(MagicBoxBoxReceived)
	if err := _MagicBox.contract.UnpackLog(event, "BoxReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MagicBoxOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the MagicBox contract.
type MagicBoxOwnershipTransferredIterator struct {
	Event *MagicBoxOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MagicBoxOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MagicBoxOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MagicBoxOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MagicBoxOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MagicBoxOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MagicBoxOwnershipTransferred represents a OwnershipTransferred event raised by the MagicBox contract.
type MagicBoxOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MagicBox *MagicBoxFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*MagicBoxOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _MagicBox.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &MagicBoxOwnershipTransferredIterator{contract: _MagicBox.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MagicBox *MagicBoxFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MagicBoxOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _MagicBox.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MagicBoxOwnershipTransferred)
				if err := _MagicBox.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MagicBox *MagicBoxFilterer) ParseOwnershipTransferred(log types.Log) (*MagicBoxOwnershipTransferred, error) {
	event := new(MagicBoxOwnershipTransferred)
	if err := _MagicBox.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MagicBoxPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the MagicBox contract.
type MagicBoxPausedIterator struct {
	Event *MagicBoxPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MagicBoxPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MagicBoxPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MagicBoxPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MagicBoxPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MagicBoxPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MagicBoxPaused represents a Paused event raised by the MagicBox contract.
type MagicBoxPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_MagicBox *MagicBoxFilterer) FilterPaused(opts *bind.FilterOpts) (*MagicBoxPausedIterator, error) {

	logs, sub, err := _MagicBox.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &MagicBoxPausedIterator{contract: _MagicBox.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_MagicBox *MagicBoxFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *MagicBoxPaused) (event.Subscription, error) {

	logs, sub, err := _MagicBox.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MagicBoxPaused)
				if err := _MagicBox.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_MagicBox *MagicBoxFilterer) ParsePaused(log types.Log) (*MagicBoxPaused, error) {
	event := new(MagicBoxPaused)
	if err := _MagicBox.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MagicBoxRequestBoxSuccessfulIterator is returned from FilterRequestBoxSuccessful and is used to iterate over the raw logs and unpacked data for RequestBoxSuccessful events raised by the MagicBox contract.
type MagicBoxRequestBoxSuccessfulIterator struct {
	Event *MagicBoxRequestBoxSuccessful // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MagicBoxRequestBoxSuccessfulIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MagicBoxRequestBoxSuccessful)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MagicBoxRequestBoxSuccessful)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MagicBoxRequestBoxSuccessfulIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MagicBoxRequestBoxSuccessfulIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MagicBoxRequestBoxSuccessful represents a RequestBoxSuccessful event raised by the MagicBox contract.
type MagicBoxRequestBoxSuccessful struct {
	BoxType   uint8
	Sender    common.Address
	RequestId *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRequestBoxSuccessful is a free log retrieval operation binding the contract event 0x563346928a474bb9aa88267cb3c79d1a3520fc4d63177ad5eed057408ed5ecf5.
//
// Solidity: event RequestBoxSuccessful(uint8 boxType, address sender, uint256 requestId)
func (_MagicBox *MagicBoxFilterer) FilterRequestBoxSuccessful(opts *bind.FilterOpts) (*MagicBoxRequestBoxSuccessfulIterator, error) {

	logs, sub, err := _MagicBox.contract.FilterLogs(opts, "RequestBoxSuccessful")
	if err != nil {
		return nil, err
	}
	return &MagicBoxRequestBoxSuccessfulIterator{contract: _MagicBox.contract, event: "RequestBoxSuccessful", logs: logs, sub: sub}, nil
}

// WatchRequestBoxSuccessful is a free log subscription operation binding the contract event 0x563346928a474bb9aa88267cb3c79d1a3520fc4d63177ad5eed057408ed5ecf5.
//
// Solidity: event RequestBoxSuccessful(uint8 boxType, address sender, uint256 requestId)
func (_MagicBox *MagicBoxFilterer) WatchRequestBoxSuccessful(opts *bind.WatchOpts, sink chan<- *MagicBoxRequestBoxSuccessful) (event.Subscription, error) {

	logs, sub, err := _MagicBox.contract.WatchLogs(opts, "RequestBoxSuccessful")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MagicBoxRequestBoxSuccessful)
				if err := _MagicBox.contract.UnpackLog(event, "RequestBoxSuccessful", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestBoxSuccessful is a log parse operation binding the contract event 0x563346928a474bb9aa88267cb3c79d1a3520fc4d63177ad5eed057408ed5ecf5.
//
// Solidity: event RequestBoxSuccessful(uint8 boxType, address sender, uint256 requestId)
func (_MagicBox *MagicBoxFilterer) ParseRequestBoxSuccessful(log types.Log) (*MagicBoxRequestBoxSuccessful, error) {
	event := new(MagicBoxRequestBoxSuccessful)
	if err := _MagicBox.contract.UnpackLog(event, "RequestBoxSuccessful", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MagicBoxRewardAddedIterator is returned from FilterRewardAdded and is used to iterate over the raw logs and unpacked data for RewardAdded events raised by the MagicBox contract.
type MagicBoxRewardAddedIterator struct {
	Event *MagicBoxRewardAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MagicBoxRewardAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MagicBoxRewardAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MagicBoxRewardAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MagicBoxRewardAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MagicBoxRewardAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MagicBoxRewardAdded represents a RewardAdded event raised by the MagicBox contract.
type MagicBoxRewardAdded struct {
	BoxType     uint8
	RewardIndex *big.Int
	NftRewardId *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRewardAdded is a free log retrieval operation binding the contract event 0x99f416e25a0f9360ca447cc71598c43e0fc939787e14faa4e7b3bf51ccf5de08.
//
// Solidity: event RewardAdded(uint8 boxType, uint256 rewardIndex, uint256 nftRewardId)
func (_MagicBox *MagicBoxFilterer) FilterRewardAdded(opts *bind.FilterOpts) (*MagicBoxRewardAddedIterator, error) {

	logs, sub, err := _MagicBox.contract.FilterLogs(opts, "RewardAdded")
	if err != nil {
		return nil, err
	}
	return &MagicBoxRewardAddedIterator{contract: _MagicBox.contract, event: "RewardAdded", logs: logs, sub: sub}, nil
}

// WatchRewardAdded is a free log subscription operation binding the contract event 0x99f416e25a0f9360ca447cc71598c43e0fc939787e14faa4e7b3bf51ccf5de08.
//
// Solidity: event RewardAdded(uint8 boxType, uint256 rewardIndex, uint256 nftRewardId)
func (_MagicBox *MagicBoxFilterer) WatchRewardAdded(opts *bind.WatchOpts, sink chan<- *MagicBoxRewardAdded) (event.Subscription, error) {

	logs, sub, err := _MagicBox.contract.WatchLogs(opts, "RewardAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MagicBoxRewardAdded)
				if err := _MagicBox.contract.UnpackLog(event, "RewardAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardAdded is a log parse operation binding the contract event 0x99f416e25a0f9360ca447cc71598c43e0fc939787e14faa4e7b3bf51ccf5de08.
//
// Solidity: event RewardAdded(uint8 boxType, uint256 rewardIndex, uint256 nftRewardId)
func (_MagicBox *MagicBoxFilterer) ParseRewardAdded(log types.Log) (*MagicBoxRewardAdded, error) {
	event := new(MagicBoxRewardAdded)
	if err := _MagicBox.contract.UnpackLog(event, "RewardAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MagicBoxRewardTransferedIterator is returned from FilterRewardTransfered and is used to iterate over the raw logs and unpacked data for RewardTransfered events raised by the MagicBox contract.
type MagicBoxRewardTransferedIterator struct {
	Event *MagicBoxRewardTransfered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MagicBoxRewardTransferedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MagicBoxRewardTransfered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MagicBoxRewardTransfered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MagicBoxRewardTransferedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MagicBoxRewardTransferedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MagicBoxRewardTransfered represents a RewardTransfered event raised by the MagicBox contract.
type MagicBoxRewardTransfered struct {
	Receiver    common.Address
	RewardIndex *big.Int
	TokenId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRewardTransfered is a free log retrieval operation binding the contract event 0xb84c51b5972dee6f0d5b879da24ecd8d4f93168b696aa2b12a5dcf9036656959.
//
// Solidity: event RewardTransfered(address receiver, uint256 rewardIndex, uint256 tokenId)
func (_MagicBox *MagicBoxFilterer) FilterRewardTransfered(opts *bind.FilterOpts) (*MagicBoxRewardTransferedIterator, error) {

	logs, sub, err := _MagicBox.contract.FilterLogs(opts, "RewardTransfered")
	if err != nil {
		return nil, err
	}
	return &MagicBoxRewardTransferedIterator{contract: _MagicBox.contract, event: "RewardTransfered", logs: logs, sub: sub}, nil
}

// WatchRewardTransfered is a free log subscription operation binding the contract event 0xb84c51b5972dee6f0d5b879da24ecd8d4f93168b696aa2b12a5dcf9036656959.
//
// Solidity: event RewardTransfered(address receiver, uint256 rewardIndex, uint256 tokenId)
func (_MagicBox *MagicBoxFilterer) WatchRewardTransfered(opts *bind.WatchOpts, sink chan<- *MagicBoxRewardTransfered) (event.Subscription, error) {

	logs, sub, err := _MagicBox.contract.WatchLogs(opts, "RewardTransfered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MagicBoxRewardTransfered)
				if err := _MagicBox.contract.UnpackLog(event, "RewardTransfered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardTransfered is a log parse operation binding the contract event 0xb84c51b5972dee6f0d5b879da24ecd8d4f93168b696aa2b12a5dcf9036656959.
//
// Solidity: event RewardTransfered(address receiver, uint256 rewardIndex, uint256 tokenId)
func (_MagicBox *MagicBoxFilterer) ParseRewardTransfered(log types.Log) (*MagicBoxRewardTransfered, error) {
	event := new(MagicBoxRewardTransfered)
	if err := _MagicBox.contract.UnpackLog(event, "RewardTransfered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MagicBoxRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the MagicBox contract.
type MagicBoxRoleAdminChangedIterator struct {
	Event *MagicBoxRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MagicBoxRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MagicBoxRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MagicBoxRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MagicBoxRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MagicBoxRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MagicBoxRoleAdminChanged represents a RoleAdminChanged event raised by the MagicBox contract.
type MagicBoxRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_MagicBox *MagicBoxFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*MagicBoxRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _MagicBox.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &MagicBoxRoleAdminChangedIterator{contract: _MagicBox.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_MagicBox *MagicBoxFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *MagicBoxRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _MagicBox.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MagicBoxRoleAdminChanged)
				if err := _MagicBox.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_MagicBox *MagicBoxFilterer) ParseRoleAdminChanged(log types.Log) (*MagicBoxRoleAdminChanged, error) {
	event := new(MagicBoxRoleAdminChanged)
	if err := _MagicBox.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MagicBoxRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the MagicBox contract.
type MagicBoxRoleGrantedIterator struct {
	Event *MagicBoxRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MagicBoxRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MagicBoxRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MagicBoxRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MagicBoxRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MagicBoxRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MagicBoxRoleGranted represents a RoleGranted event raised by the MagicBox contract.
type MagicBoxRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_MagicBox *MagicBoxFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*MagicBoxRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MagicBox.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &MagicBoxRoleGrantedIterator{contract: _MagicBox.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_MagicBox *MagicBoxFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *MagicBoxRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MagicBox.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MagicBoxRoleGranted)
				if err := _MagicBox.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_MagicBox *MagicBoxFilterer) ParseRoleGranted(log types.Log) (*MagicBoxRoleGranted, error) {
	event := new(MagicBoxRoleGranted)
	if err := _MagicBox.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MagicBoxRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the MagicBox contract.
type MagicBoxRoleRevokedIterator struct {
	Event *MagicBoxRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MagicBoxRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MagicBoxRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MagicBoxRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MagicBoxRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MagicBoxRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MagicBoxRoleRevoked represents a RoleRevoked event raised by the MagicBox contract.
type MagicBoxRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_MagicBox *MagicBoxFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*MagicBoxRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MagicBox.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &MagicBoxRoleRevokedIterator{contract: _MagicBox.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_MagicBox *MagicBoxFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *MagicBoxRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MagicBox.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MagicBoxRoleRevoked)
				if err := _MagicBox.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_MagicBox *MagicBoxFilterer) ParseRoleRevoked(log types.Log) (*MagicBoxRoleRevoked, error) {
	event := new(MagicBoxRoleRevoked)
	if err := _MagicBox.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MagicBoxUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the MagicBox contract.
type MagicBoxUnpausedIterator struct {
	Event *MagicBoxUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MagicBoxUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MagicBoxUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MagicBoxUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MagicBoxUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MagicBoxUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MagicBoxUnpaused represents a Unpaused event raised by the MagicBox contract.
type MagicBoxUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_MagicBox *MagicBoxFilterer) FilterUnpaused(opts *bind.FilterOpts) (*MagicBoxUnpausedIterator, error) {

	logs, sub, err := _MagicBox.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &MagicBoxUnpausedIterator{contract: _MagicBox.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_MagicBox *MagicBoxFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *MagicBoxUnpaused) (event.Subscription, error) {

	logs, sub, err := _MagicBox.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MagicBoxUnpaused)
				if err := _MagicBox.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_MagicBox *MagicBoxFilterer) ParseUnpaused(log types.Log) (*MagicBoxUnpaused, error) {
	event := new(MagicBoxUnpaused)
	if err := _MagicBox.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
