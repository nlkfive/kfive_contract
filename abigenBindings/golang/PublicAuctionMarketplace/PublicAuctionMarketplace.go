// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package PublicAuctionMarketplace

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PublicAuctionMarketplaceMetaData contains all meta data concerning the PublicAuctionMarketplace contract.
var PublicAuctionMarketplaceMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acceptedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketplaceStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ownerCutPerMillion\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidBiddingEnd\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBiddingPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotRunning\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWinner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardGranted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TooEarly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TooLate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unavailable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"canceller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionId\",\"type\":\"bytes32\"}],\"name\":\"AuctionCancelledSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AuctionRefundSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"ChangedOwnerCutPerMillion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"publicationFee\",\"type\":\"uint256\"}],\"name\":\"ChangedPublicationFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auctionHighestBidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"GrantAuctionRewardSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_marketplaceStorage\",\"type\":\"address\"}],\"name\":\"MarketplaceStorageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"publicAuctionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidValue\",\"type\":\"uint256\"}],\"name\":\"PublicAuctionBidSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"publicAuctionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"biddingEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startPriceInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minIncrement\",\"type\":\"uint256\"}],\"name\":\"PublicAuctionCreatedSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CANCEL_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721_Interface\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMarketplaceStorage_Interface\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptedToken\",\"outputs\":[{\"internalType\":\"contractIBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplaceStorage\",\"outputs\":[{\"internalType\":\"contractIMarketplaceStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStageDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerCutPerMillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicationFeeInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficary\",\"type\":\"address\"}],\"name\":\"setBeneficary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setMinStageDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ownerCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"setOwnerCutPerMillion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicationFee\",\"type\":\"uint256\"}],\"name\":\"setPublicationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketplaceStorage\",\"type\":\"address\"}],\"name\":\"updateStorageAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"publicAuctionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nftAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPriceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"biddingEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minIncrement\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nftAsset\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"publicAuctionId\",\"type\":\"bytes32\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nftAsset\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"publicAuctionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bidValue\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"publicAuctionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nftAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"receiveReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"publicAuctionId\",\"type\":\"bytes32\"}],\"name\":\"checkExisted\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nftAsset\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"publicAuctionId\",\"type\":\"bytes32\"}],\"name\":\"checkRunning\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620066a4380380620066a48339818101604052810190620000379190620014df565b838284838180620000698173ffffffffffffffffffffffffffffffffffffffff166200050060201b62002b041760201c565b620000ab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a2906200180b565b60405180910390fd5b60008190508073ffffffffffffffffffffffffffffffffffffffff166301ffc9a76345ad86c260e01b6040518263ffffffff1660e01b8152600401620000f2919062001764565b60206040518083038186803b1580156200010b57600080fd5b505afa15801562000120573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200014691906200154b565b62000188576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200017f90620017c7565b60405180910390fd5b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506000600260146101000a81548160ff02191690831515021790555062000207620001fb6200052360201b60201c565b620005d660201b60201c565b620002276200021b6200052360201b60201c565b6200069c60201b60201c565b620002538473ffffffffffffffffffffffffffffffffffffffff166200050060201b62002b041760201c565b6200028a576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620003306000801b620003246200052360201b60201c565b6200086360201b60201c565b620003717fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775620003656200052360201b60201c565b6200086360201b60201c565b620003b27f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d7620003a66200052360201b60201c565b6200086360201b60201c565b620003f37f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a620003e76200052360201b60201c565b6200086360201b60201c565b620004457f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d77fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756200087960201b60201c565b620004977f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756200087960201b60201c565b620004a881620008dc60201b60201c565b610e1060088190555082600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050505062001c3a565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415620005cf57600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff818301511692505050620005d3565b3390505b90565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620006ac6200052360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620006d26200099160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200072b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000722906200182d565b60405180910390fd5b6200075d7f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d7826200086360201b60201c565b6200078f7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a826200086360201b60201c565b620007a46000801b826200086360201b60201c565b620007e57f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d7620007d96200099160201b60201c565b620009bb60201b60201c565b620008267f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6200081a6200099160201b60201c565b620009bb60201b60201c565b6200084a6000801b6200083e6200099160201b60201c565b620009bb60201b60201c565b6200086081620009f460201b62002b271760201c565b50565b62000875828262000b0a60201b60201c565b5050565b60006200088c8362000b5260201b60201c565b905081600080858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756200090e8162000b7160201b60201c565b620f424082106200094b576040517f7e0d5ce600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816006819055507ffa406a120a9e7f2b332bfb7a43d3bf1c3f079262202907a6b69c94b2821a02c66006546040516200098591906200184f565b60405180910390a15050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b620009cc8262000b5260201b60201c565b620009dd8162000b7160201b60201c565b620009ef838362000b9560201b60201c565b505050565b62000a046200052360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1662000a2a6200099160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000a83576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a7a906200182d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000af6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000aed90620017e9565b60405180910390fd5b62000b0781620005d660201b60201c565b50565b62000b21828262000bdd60201b62002c1f1760201c565b62000b4d816001600085815260200190815260200160002062000cce60201b62002cff1790919060201c565b505050565b6000806000838152602001908152602001600020600101549050919050565b62000b928162000b866200052360201b60201c565b62000d0660201b60201c565b50565b62000bac828262000dca60201b62002d2f1760201c565b62000bd8816001600085815260200190815260200160002062000ebc60201b62002e101790919060201c565b505050565b62000bef828262000ef460201b60201c565b62000cca57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555062000c6f6200052360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600062000cfe836000018373ffffffffffffffffffffffffffffffffffffffff1660001b62000f5e60201b60201c565b905092915050565b62000d18828262000ef460201b60201c565b62000dc65762000d4b8173ffffffffffffffffffffffffffffffffffffffff16601462000fd860201b62002e401760201c565b62000d668360001c602062000fd860201b62002e401760201c565b60405160200162000d7992919062001722565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000dbd919062001781565b60405180910390fd5b5050565b62000ddc828262000ef460201b60201c565b1562000eb857600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555062000e5d6200052360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600062000eec836000018373ffffffffffffffffffffffffffffffffffffffff1660001b620012e760201b60201c565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600062000f7283836200147760201b60201c565b62000fcd57826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905062000fd2565b600090505b92915050565b60606000600283600262000fed9190620018f0565b62000ff9919062001893565b67ffffffffffffffff81111562001039577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156200106c5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110620010cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811062001156577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002620011989190620018f0565b620011a4919062001893565b90505b600181111562001296577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106200120e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8282815181106200124c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806200128e9062001a38565b9050620011a7565b5060008414620012dd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620012d490620017a5565b60405180910390fd5b8091505092915050565b600080836001016000848152602001908152602001600020549050600081146200146b5760006001826200131c919062001951565b905060006001866000018054905062001336919062001951565b9050818114620013f45760008660000182815481106200137f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110620013ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806200142f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505062001471565b60009150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081519050620014ab8162001bec565b92915050565b600081519050620014c28162001c06565b92915050565b600081519050620014d98162001c20565b92915050565b60008060008060808587031215620014f657600080fd5b600062001506878288016200149a565b945050602062001519878288016200149a565b93505060406200152c878288016200149a565b92505060606200153f87828801620014c8565b91505092959194509250565b6000602082840312156200155e57600080fd5b60006200156e84828501620014b1565b91505092915050565b6200158281620019ac565b82525050565b600062001595826200186c565b620015a1818562001877565b9350620015b381856020860162001a02565b620015be8162001a96565b840191505092915050565b6000620015d6826200186c565b620015e2818562001888565b9350620015f481856020860162001a02565b80840191505092915050565b60006200160f60208362001877565b91506200161c8262001aa7565b602082019050919050565b600062001636600f8362001877565b9150620016438262001ad0565b602082019050919050565b60006200165d60268362001877565b91506200166a8262001af9565b604082019050919050565b60006200168460108362001877565b9150620016918262001b48565b602082019050919050565b6000620016ab60208362001877565b9150620016b88262001b71565b602082019050919050565b6000620016d260178362001888565b9150620016df8262001b9a565b601782019050919050565b6000620016f960118362001888565b9150620017068262001bc3565b601182019050919050565b6200171c81620019f8565b82525050565b60006200172f82620016c3565b91506200173d8285620015c9565b91506200174a82620016ea565b9150620017588284620015c9565b91508190509392505050565b60006020820190506200177b600083018462001577565b92915050565b600060208201905081810360008301526200179d818462001588565b905092915050565b60006020820190508181036000830152620017c08162001600565b9050919050565b60006020820190508181036000830152620017e28162001627565b9050919050565b6000602082019050818103600083015262001804816200164e565b9050919050565b60006020820190508181036000830152620018268162001675565b9050919050565b6000602082019050818103600083015262001848816200169c565b9050919050565b600060208201905062001866600083018462001711565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000620018a082620019f8565b9150620018ad83620019f8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620018e557620018e462001a67565b5b828201905092915050565b6000620018fd82620019f8565b91506200190a83620019f8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562001946576200194562001a67565b5b828202905092915050565b60006200195e82620019f8565b91506200196b83620019f8565b92508282101562001981576200198062001a67565b5b828203905092915050565b60006200199982620019d8565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101562001a2257808201518184015260208101905062001a05565b8381111562001a32576000848401525b50505050565b600062001a4582620019f8565b9150600082141562001a5c5762001a5b62001a67565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f496e76616c69642073746f726167650000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c696420636f6e747261637400000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b62001bf7816200198c565b811462001c0357600080fd5b50565b62001c1181620019a0565b811462001c1d57600080fd5b50565b62001c2b81620019f8565b811462001c3757600080fd5b50565b614a5a8062001c4a6000396000f3fe608060405234801561001057600080fd5b50600436106102525760003560e01c80638456cb5911610146578063b42cf929116100c3578063daa3d98511610087578063daa3d98514610687578063e47d6060146106a3578063e4997dc5146106d3578063e63ab1e9146106ef578063f2fde38b1461070d578063f60218841461072957610252565b8063b42cf929146105e3578063ca15c87314610601578063cbfda1c514610631578063cfdb69a71461064f578063d547741f1461066b57610252565b806391d148541161010a57806391d148541461053d578063a01f79d41461056d578063a217fddf1461058b578063ae4f1198146105a9578063af8996f1146105c757610252565b80638456cb59146104ab578063889e2129146104b55780638bafe559146104d15780638da5cb5b146104ef5780639010d07c1461050d57610252565b80632f2ff15d116101d457806359bf1abe1161019857806359bf1abe146104195780635c975abb14610449578063715018a61461046757806375b238fc14610471578063780e8d7d1461048f57610252565b80632f2ff15d1461039b57806336568abe146103b75780633f4ba83a146103d3578063451c3d80146103dd57806346b3aec6146103fb57610252565b806313c27ca71161021b57806313c27ca7146102f757806319dad16d1461031557806323bc068e14610331578063248a9ca31461034d5780632b4c32be1461037d57610252565b8062c5c3c31461025757806301ffc9a714610273578063076f6dc7146102a35780630db3cc05146102bf5780630ecb93c0146102db575b600080fd5b610271600480360381019061026c9190613ce0565b610745565b005b61028d60048036038101906102889190613e0c565b610829565b60405161029a919061430b565b60405180910390f35b6102bd60048036038101906102b89190613d45565b6108a3565b005b6102d960048036038101906102d49190613b64565b610992565b005b6102f560048036038101906102f09190613b64565b610a01565b005b6102ff610b0f565b60405161030c9190614326565b60405180910390f35b61032f600480360381019061032a9190613e5e565b610b33565b005b61034b60048036038101906103469190613c19565b610bdd565b005b61036760048036038101906103629190613ce0565b6112a9565b6040516103749190614326565b60405180910390f35b6103856112c8565b604051610392919061436a565b60405180910390f35b6103b560048036038101906103b09190613d09565b6112d3565b005b6103d160048036038101906103cc9190613d09565b6112f4565b005b6103db611377565b005b6103e56113ac565b6040516103f29190614385565b60405180910390f35b6104036113d2565b60405161041091906143a0565b60405180910390f35b610433600480360381019061042e9190613b64565b6113f8565b604051610440919061430b565b60405180910390f35b61045161144e565b60405161045e919061430b565b60405180910390f35b61046f611465565b005b6104796114ed565b6040516104869190614326565b60405180910390f35b6104a960048036038101906104a49190613d81565b611511565b005b6104b3611b05565b005b6104cf60048036038101906104ca9190613b64565b611b3a565b005b6104d9611b71565b6040516104e6919061436a565b60405180910390f35b6104f7611b7c565b60405161050491906140bb565b60405180910390f35b61052760048036038101906105229190613dd0565b611ba6565b60405161053491906140bb565b60405180910390f35b61055760048036038101906105529190613d09565b611bd5565b604051610564919061430b565b60405180910390f35b610575611c3f565b604051610582919061449d565b60405180910390f35b610593611c45565b6040516105a09190614326565b60405180910390f35b6105b1611c4c565b6040516105be919061449d565b60405180910390f35b6105e160048036038101906105dc9190613e5e565b611c52565b005b6105eb611cc0565b6040516105f8919061449d565b60405180910390f35b61061b60048036038101906106169190613ce0565b611cc6565b604051610628919061449d565b60405180910390f35b610639611cea565b60405161064691906140bb565b60405180910390f35b61066960048036038101906106649190613bb6565b611d10565b005b61068560048036038101906106809190613d09565b6123b0565b005b6106a1600480360381019061069c9190613d45565b6123d1565b005b6106bd60048036038101906106b89190613b64565b61281e565b6040516106ca919061430b565b60405180910390f35b6106ed60048036038101906106e89190613b64565b61283e565b005b6106f761294c565b6040516107049190614326565b60405180910390f35b61072760048036038101906107229190613b64565b612970565b005b610743600480360381019061073e9190613e5e565b612acf565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637584f03d826040518263ffffffff1660e01b81526004016107a09190614326565b60206040518083038186803b1580156107b857600080fd5b505afa1580156107cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f09190613cb7565b610826576040517fafdd489000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061089c575061089b8261313a565b5b9050919050565b6108ac81610745565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16622cb6a383836040518363ffffffff1660e01b8152600401610908929190614341565b60206040518083038186803b15801561092057600080fd5b505afa158015610934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109589190613cb7565b61098e576040517f03b5e41300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756109bc816131b4565b81600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610a096131c8565b73ffffffffffffffffffffffffffffffffffffffff16610a27611b7c565b73ffffffffffffffffffffffffffffffffffffffff1614610a7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a749061445d565b60405180910390fd5b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc81604051610b0491906140bb565b60405180910390a150565b7f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d781565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610b5d816131b4565b620f42408210610b99576040517f7e0d5ce600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816006819055507ffa406a120a9e7f2b332bfb7a43d3bf1c3f079262202907a6b69c94b2821a02c6600654604051610bd1919061449d565b60405180910390a15050565b86610bfd8173ffffffffffffffffffffffffffffffffffffffff16612b04565b610c33576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166301ffc9a76380ac58cd60e01b6040518263ffffffff1660e01b8152600401610c73919061436a565b60206040518083038186803b158015610c8b57600080fd5b505afa158015610c9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc39190613cb7565b610ccc57600080fd5b610cd461144e565b15610d14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0b9061443d565b60405180910390fd5b6000610d2b6008544261327990919063ffffffff16565b841015610d64576040517f18c71d1a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000851480610d735750600083145b15610da9576040517ebfc92100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610db36131c8565b905060008a90508073ffffffffffffffffffffffffffffffffffffffff16636352211e896040518263ffffffff1660e01b8152600401610df3919061449d565b60206040518083038186803b158015610e0b57600080fd5b505afa158015610e1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e439190613b8d565b92508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580610fc657503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8a6040518263ffffffff1660e01b8152600401610ecb919061449d565b60206040518083038186803b158015610ee357600080fd5b505afa158015610ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1b9190613b8d565b73ffffffffffffffffffffffffffffffffffffffff161480610fc457508073ffffffffffffffffffffffffffffffffffffffff1663e985e9c584306040518363ffffffff1660e01b8152600401610f739291906140d6565b60206040518083038186803b158015610f8b57600080fd5b505afa158015610f9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc39190613cb7565b5b155b15610ffd576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630a7f89778a6040518263ffffffff1660e01b81526004016110589190614326565b60206040518083038186803b15801561107057600080fd5b505afa158015611084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a89190613cb7565b6110de576040517fa3b8915f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50600060075411156111c157600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd82600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007546040518463ffffffff1660e01b815260040161116d9392919061416e565b602060405180830381600087803b15801561118757600080fd5b505af115801561119b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bf9190613cb7565b505b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636af4c895828b898c898b8a6040518863ffffffff1660e01b815260040161122997969594939291906141a5565b600060405180830381600087803b15801561124357600080fd5b505af1158015611257573d6000803e3d6000fd5b505050507f434b2123b16b34f2926e4eb774145d073f6d34a8caa5b3eca34237ea2ce835a3818a8a89888a8960405161129697969594939291906140ff565b60405180910390a1505050505050505050565b6000806000838152602001908152602001600020600101549050919050565b6380ac58cd60e01b81565b6112dc826112a9565b6112e5816131b4565b6112ef838361328f565b505050565b6112fc6131c8565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611369576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113609061447d565b60405180910390fd5b61137382826132c3565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6113a1816131b4565b6113a96132f7565b50565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600260149054906101000a900460ff16905090565b61146d6131c8565b73ffffffffffffffffffffffffffffffffffffffff1661148b611b7c565b73ffffffffffffffffffffffffffffffffffffffff16146114e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d89061445d565b60405180910390fd5b6114eb6000613399565b565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b61151961144e565b15611559576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115509061443d565b60405180910390fd5b61156383836108a3565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166357a45b77846040518263ffffffff1660e01b81526004016115c09190614326565b60e06040518083038186803b1580156115d857600080fd5b505afa1580156115ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116109190613e35565b905061161f816080015161345f565b8060c001518160a001516116339190614504565b82108061165257508060c00151816040015161164f9190614504565b82105b15611689576040517f7532083f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006116936131c8565b9050600073ffffffffffffffffffffffffffffffffffffffff16826060015173ffffffffffffffffffffffffffffffffffffffff16141561178557600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8230866040518463ffffffff1660e01b815260040161172d9392919061416e565b602060405180830381600087803b15801561174757600080fd5b505af115801561175b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177f9190613cb7565b50611a32565b816060015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561188357600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd823085604001518761180d91906145e5565b6040518463ffffffff1660e01b815260040161182b9392919061416e565b602060405180830381600087803b15801561184557600080fd5b505af1158015611859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187d9190613cb7565b50611a31565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8230866040518463ffffffff1660e01b81526004016118e29392919061416e565b602060405180830381600087803b1580156118fc57600080fd5b505af1158015611910573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119349190613cb7565b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb836060015184604001516040518363ffffffff1660e01b815260040161199a9291906142ab565b602060405180830381600087803b1580156119b457600080fd5b505af11580156119c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ec9190613cb7565b507f5f4b88832be3746851e4d0ce6129f89fe39ddcf5a4b0204699724c459baf7d9d8260600151858460400151604051611a289392919061423d565b60405180910390a15b5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639d90ce3b8285876040518463ffffffff1660e01b8152600401611a91939291906142d4565b600060405180830381600087803b158015611aab57600080fd5b505af1158015611abf573d6000803e3d6000fd5b505050507f9f541988b3aac74ac43a6f4b330ceed668244b74461b90850d199a38a172f7c2818585604051611af69392919061423d565b60405180910390a15050505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a611b2f816131b4565b611b376134a6565b50565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611b64816131b4565b611b6d82613549565b5050565b6345ad86c260e01b81565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000611bcd82600160008681526020019081526020016000206135c490919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60065481565b6000801b81565b60075481565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611c7c816131b4565b816007819055507fe7fa8737293f41b5dfa0d5c3e552860a06275bed7015581b083c7be7003308ba600754604051611cb4919061449d565b60405180910390a15050565b60085481565b6000611ce3600160008481526020019081526020016000206135de565b9050919050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611d1861144e565b15611d58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4f9061443d565b60405180910390fd5b611d6183610745565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166357a45b77856040518263ffffffff1660e01b8152600401611dbe9190614326565b60e06040518083038186803b158015611dd657600080fd5b505afa158015611dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0e9190613e35565b9050611e1d81608001516135f3565b6000611e276131c8565b90506000826060015190508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611e97576040517f618c724200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083604001519050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161480611edb5750600081145b15611f12576040517f946ef90200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008460200151905060008990508073ffffffffffffffffffffffffffffffffffffffff16636352211e886040518263ffffffff1660e01b8152600401611f59919061449d565b60206040518083038186803b158015611f7157600080fd5b505afa158015611f85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa99190613b8d565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461200d576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600654111561211857612043620f42406120356006548761363a90919063ffffffff16565b61365090919063ffffffff16565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016120c49291906142ab565b602060405180830381600087803b1580156120de57600080fd5b505af11580156120f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121169190613cb7565b505b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8461216a848861366690919063ffffffff16565b6040518363ffffffff1660e01b81526004016121879291906142ab565b602060405180830381600087803b1580156121a157600080fd5b505af11580156121b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d99190613cb7565b508173ffffffffffffffffffffffffffffffffffffffff166342842e0e84878b6040518463ffffffff1660e01b81526004016122179392919061416e565b600060405180830381600087803b15801561223157600080fd5b505af1158015612245573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635a0affbb8a6040518263ffffffff1660e01b81526004016122a49190614326565b600060405180830381600087803b1580156122be57600080fd5b505af11580156122d2573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639d90ce3b6000808d6040518463ffffffff1660e01b815260040161233693929190614274565b600060405180830381600087803b15801561235057600080fd5b505af1158015612364573d6000803e3d6000fd5b505050507fa307d88e125ed19583b02332c5bd74f0323774248b3f9cac5047c2433d9d8ddc858b8a60405161239b9392919061423d565b60405180910390a15050505050505050505050565b6123b9826112a9565b6123c2816131b4565b6123cc83836132c3565b505050565b6123d961144e565b15612419576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124109061443d565b60405180910390fd5b61242382826108a3565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166357a45b77836040518263ffffffff1660e01b81526004016124809190614326565b60e06040518083038186803b15801561249857600080fd5b505afa1580156124ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d09190613e35565b90506124df816080015161345f565b60006124e96131c8565b90508073ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff16148061255657506125557f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d76125506131c8565b611bd5565b5b61258c576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16826060015173ffffffffffffffffffffffffffffffffffffffff161461275257600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb836060015184604001516040518363ffffffff1660e01b81526004016126299291906142ab565b602060405180830381600087803b15801561264357600080fd5b505af1158015612657573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267b9190613cb7565b507f5f4b88832be3746851e4d0ce6129f89fe39ddcf5a4b0204699724c459baf7d9d82606001518484604001516040516126b79392919061423d565b60405180910390a1600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639d90ce3b600080866040518463ffffffff1660e01b815260040161271f93929190614274565b600060405180830381600087803b15801561273957600080fd5b505af115801561274d573d6000803e3d6000fd5b505050505b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635a0affbb856040518263ffffffff1660e01b81526004016127ad9190614326565b600060405180830381600087803b1580156127c757600080fd5b505af11580156127db573d6000803e3d6000fd5b505050507fa021239bb373fef19aa7c7ef798961ab038ebf95bd85d546b731d25855db190e8184604051612810929190614214565b60405180910390a150505050565b60046020528060005260406000206000915054906101000a900460ff1681565b6128466131c8565b73ffffffffffffffffffffffffffffffffffffffff16612864611b7c565b73ffffffffffffffffffffffffffffffffffffffff16146128ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b19061445d565b60405180910390fd5b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c8160405161294191906140bb565b60405180910390a150565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6129786131c8565b73ffffffffffffffffffffffffffffffffffffffff16612996611b7c565b73ffffffffffffffffffffffffffffffffffffffff16146129ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129e39061445d565b60405180910390fd5b612a167f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d78261367c565b612a407f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8261367c565b612a4d6000801b8261367c565b612a7e7f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d7612a79611b7c565b6123b0565b612aaf7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a612aaa611b7c565b6123b0565b612ac36000801b612abe611b7c565b6123b0565b612acc81612b27565b50565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775612af9816131b4565b816008819055505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b612b2f6131c8565b73ffffffffffffffffffffffffffffffffffffffff16612b4d611b7c565b73ffffffffffffffffffffffffffffffffffffffff1614612ba3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b9a9061445d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c0a9061441d565b60405180910390fd5b612c1c81613399565b50565b612c298282611bd5565b612cfb57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612ca06131c8565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000612d27836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61368a565b905092915050565b612d398282611bd5565b15612e0c57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612db16131c8565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000612e38836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6136fa565b905092915050565b606060006002836002612e53919061458b565b612e5d9190614504565b67ffffffffffffffff811115612e9c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612ece5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612f2c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612fb6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612ff6919061458b565b6130009190614504565b90505b60018111156130ec577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110613068577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8282815181106130a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806130e590614724565b9050613003565b5060008414613130576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613127906143dd565b60405180910390fd5b8091505092915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806131ad57506131ac82613880565b5b9050919050565b6131c5816131c06131c8565b6138ea565b50565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561327257600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff818301511692505050613276565b3390505b90565b600081836132879190614504565b905092915050565b6132998282612c1f565b6132be8160016000858152602001908152602001600020612cff90919063ffffffff16565b505050565b6132cd8282612d2f565b6132f28160016000858152602001908152602001600020612e1090919063ffffffff16565b505050565b6132ff61144e565b61333e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613335906143fd565b60405180910390fd5b6000600260146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6133826131c8565b60405161338f91906140bb565b60405180910390a1565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8042106134a357806040517f691e568200000000000000000000000000000000000000000000000000000000815260040161349a919061449d565b60405180910390fd5b50565b6134ae61144e565b156134ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134e59061443d565b60405180910390fd5b6001600260146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586135326131c8565b60405161353f91906140bb565b60405180910390a1565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f19e07a962d0e1cab8b7d4be06b77a7225ca7ebb744994cb6546fdd815590dc9d816040516135b991906140bb565b60405180910390a150565b60006135d38360000183613987565b60001c905092915050565b60006135ec826000016139d8565b9050919050565b80421161363757806040517f2a35a32400000000000000000000000000000000000000000000000000000000815260040161362e919061449d565b60405180910390fd5b50565b60008183613648919061458b565b905092915050565b6000818361365e919061455a565b905092915050565b6000818361367491906145e5565b905092915050565b613686828261328f565b5050565b600061369683836139e9565b6136ef5782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506136f4565b600090505b92915050565b6000808360010160008481526020019081526020016000205490506000811461387457600060018261372c91906145e5565b905060006001866000018054905061374491906145e5565b90508181146137ff57600086600001828154811061378b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050808760000184815481106137d5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480613839577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061387a565b60009150505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6138f48282611bd5565b613983576139198173ffffffffffffffffffffffffffffffffffffffff166014612e40565b6139278360001c6020612e40565b604051602001613938929190614081565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161397a91906143bb565b60405180910390fd5b5050565b60008260000182815481106139c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b600081359050613a1b816149b1565b92915050565b600081519050613a30816149b1565b92915050565b600081519050613a45816149c8565b92915050565b600081359050613a5a816149df565b92915050565b600081519050613a6f816149df565b92915050565b600081359050613a84816149f6565b92915050565b600060e08284031215613a9c57600080fd5b613aa660e06144b8565b90506000613ab684828501613a60565b6000830152506020613aca84828501613a21565b6020830152506040613ade84828501613b4f565b6040830152506060613af284828501613a21565b6060830152506080613b0684828501613b4f565b60808301525060a0613b1a84828501613b4f565b60a08301525060c0613b2e84828501613b4f565b60c08301525092915050565b600081359050613b4981614a0d565b92915050565b600081519050613b5e81614a0d565b92915050565b600060208284031215613b7657600080fd5b6000613b8484828501613a0c565b91505092915050565b600060208284031215613b9f57600080fd5b6000613bad84828501613a21565b91505092915050565b60008060008060808587031215613bcc57600080fd5b6000613bda87828801613a0c565b9450506020613beb87828801613a4b565b9350506040613bfc87828801613a4b565b9250506060613c0d87828801613b3a565b91505092959194509250565b600080600080600080600060e0888a031215613c3457600080fd5b6000613c428a828b01613a0c565b9750506020613c538a828b01613a4b565b9650506040613c648a828b01613a4b565b9550506060613c758a828b01613b3a565b9450506080613c868a828b01613b3a565b93505060a0613c978a828b01613b3a565b92505060c0613ca88a828b01613b3a565b91505092959891949750929550565b600060208284031215613cc957600080fd5b6000613cd784828501613a36565b91505092915050565b600060208284031215613cf257600080fd5b6000613d0084828501613a4b565b91505092915050565b60008060408385031215613d1c57600080fd5b6000613d2a85828601613a4b565b9250506020613d3b85828601613a0c565b9150509250929050565b60008060408385031215613d5857600080fd5b6000613d6685828601613a4b565b9250506020613d7785828601613a4b565b9150509250929050565b600080600060608486031215613d9657600080fd5b6000613da486828701613a4b565b9350506020613db586828701613a4b565b9250506040613dc686828701613b3a565b9150509250925092565b60008060408385031215613de357600080fd5b6000613df185828601613a4b565b9250506020613e0285828601613b3a565b9150509250929050565b600060208284031215613e1e57600080fd5b6000613e2c84828501613a75565b91505092915050565b600060e08284031215613e4757600080fd5b6000613e5584828501613a8a565b91505092915050565b600060208284031215613e7057600080fd5b6000613e7e84828501613b3a565b91505092915050565b613e9081614619565b82525050565b613e9f8161462b565b82525050565b613eae81614637565b82525050565b613ebd81614641565b82525050565b613ecc81614697565b82525050565b613edb816146bb565b82525050565b613eea816146df565b82525050565b6000613efb826144dd565b613f0581856144e8565b9350613f158185602086016146f1565b613f1e8161480c565b840191505092915050565b6000613f34826144dd565b613f3e81856144f9565b9350613f4e8185602086016146f1565b80840191505092915050565b6000613f676020836144e8565b9150613f728261481d565b602082019050919050565b6000613f8a6014836144e8565b9150613f9582614846565b602082019050919050565b6000613fad6026836144e8565b9150613fb88261486f565b604082019050919050565b6000613fd06010836144e8565b9150613fdb826148be565b602082019050919050565b6000613ff36020836144e8565b9150613ffe826148e7565b602082019050919050565b60006140166017836144f9565b915061402182614910565b601782019050919050565b60006140396011836144f9565b915061404482614939565b601182019050919050565b600061405c602f836144e8565b915061406782614962565b604082019050919050565b61407b8161468d565b82525050565b600061408c82614009565b91506140988285613f29565b91506140a38261402c565b91506140af8284613f29565b91508190509392505050565b60006020820190506140d06000830184613e87565b92915050565b60006040820190506140eb6000830185613e87565b6140f86020830184613e87565b9392505050565b600060e082019050614114600083018a613e87565b6141216020830189613e87565b61412e6040830188613ea5565b61413b6060830187614072565b6141486080830186614072565b61415560a0830185614072565b61416260c0830184614072565b98975050505050505050565b60006060820190506141836000830186613e87565b6141906020830185613e87565b61419d6040830184614072565b949350505050565b600060e0820190506141ba600083018a613e87565b6141c76020830189613e87565b6141d46040830188614072565b6141e16060830187613ea5565b6141ee6080830186614072565b6141fb60a0830185614072565b61420860c0830184614072565b98975050505050505050565b60006040820190506142296000830185613e87565b6142366020830184613ea5565b9392505050565b60006060820190506142526000830186613e87565b61425f6020830185613ea5565b61426c6040830184614072565b949350505050565b60006060820190506142896000830186613e87565b6142966020830185613ee1565b6142a36040830184613ea5565b949350505050565b60006040820190506142c06000830185613e87565b6142cd6020830184614072565b9392505050565b60006060820190506142e96000830186613e87565b6142f66020830185614072565b6143036040830184613ea5565b949350505050565b60006020820190506143206000830184613e96565b92915050565b600060208201905061433b6000830184613ea5565b92915050565b60006040820190506143566000830185613ea5565b6143636020830184613ea5565b9392505050565b600060208201905061437f6000830184613eb4565b92915050565b600060208201905061439a6000830184613ec3565b92915050565b60006020820190506143b56000830184613ed2565b92915050565b600060208201905081810360008301526143d58184613ef0565b905092915050565b600060208201905081810360008301526143f681613f5a565b9050919050565b6000602082019050818103600083015261441681613f7d565b9050919050565b6000602082019050818103600083015261443681613fa0565b9050919050565b6000602082019050818103600083015261445681613fc3565b9050919050565b6000602082019050818103600083015261447681613fe6565b9050919050565b600060208201905081810360008301526144968161404f565b9050919050565b60006020820190506144b26000830184614072565b92915050565b60006144c26144d3565b90506144ce828261474e565b919050565b6000604051905090565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061450f8261468d565b915061451a8361468d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561454f5761454e61477f565b5b828201905092915050565b60006145658261468d565b91506145708361468d565b9250826145805761457f6147ae565b5b828204905092915050565b60006145968261468d565b91506145a18361468d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156145da576145d961477f565b5b828202905092915050565b60006145f08261468d565b91506145fb8361468d565b92508282101561460e5761460d61477f565b5b828203905092915050565b60006146248261466d565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006146a2826146a9565b9050919050565b60006146b48261466d565b9050919050565b60006146c6826146cd565b9050919050565b60006146d88261466d565b9050919050565b60006146ea8261468d565b9050919050565b60005b8381101561470f5780820151818401526020810190506146f4565b8381111561471e576000848401525b50505050565b600061472f8261468d565b915060008214156147435761474261477f565b5b600182039050919050565b6147578261480c565b810181811067ffffffffffffffff82111715614776576147756147dd565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6149ba81614619565b81146149c557600080fd5b50565b6149d18161462b565b81146149dc57600080fd5b50565b6149e881614637565b81146149f357600080fd5b50565b6149ff81614641565b8114614a0a57600080fd5b50565b614a168161468d565b8114614a2157600080fd5b5056fea2646970667358221220b6ad2e269f97b7bc96407f7aaffd61c945dad87e6b269c5a89d703e64099aa7864736f6c63430008040033",
}

// PublicAuctionMarketplaceABI is the input ABI used to generate the binding from.
// Deprecated: Use PublicAuctionMarketplaceMetaData.ABI instead.
var PublicAuctionMarketplaceABI = PublicAuctionMarketplaceMetaData.ABI

// PublicAuctionMarketplaceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PublicAuctionMarketplaceMetaData.Bin instead.
var PublicAuctionMarketplaceBin = PublicAuctionMarketplaceMetaData.Bin

// DeployPublicAuctionMarketplace deploys a new Ethereum contract, binding an instance of PublicAuctionMarketplace to it.
func DeployPublicAuctionMarketplace(auth *bind.TransactOpts, backend bind.ContractBackend, acceptedToken common.Address, marketplaceStorage common.Address, beneficary common.Address, ownerCutPerMillion *big.Int) (common.Address, *types.Transaction, *PublicAuctionMarketplace, error) {
	parsed, err := PublicAuctionMarketplaceMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PublicAuctionMarketplaceBin), backend, acceptedToken, marketplaceStorage, beneficary, ownerCutPerMillion)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PublicAuctionMarketplace{PublicAuctionMarketplaceCaller: PublicAuctionMarketplaceCaller{contract: contract}, PublicAuctionMarketplaceTransactor: PublicAuctionMarketplaceTransactor{contract: contract}, PublicAuctionMarketplaceFilterer: PublicAuctionMarketplaceFilterer{contract: contract}}, nil
}

// PublicAuctionMarketplace is an auto generated Go binding around an Ethereum contract.
type PublicAuctionMarketplace struct {
	PublicAuctionMarketplaceCaller     // Read-only binding to the contract
	PublicAuctionMarketplaceTransactor // Write-only binding to the contract
	PublicAuctionMarketplaceFilterer   // Log filterer for contract events
}

// PublicAuctionMarketplaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type PublicAuctionMarketplaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PublicAuctionMarketplaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PublicAuctionMarketplaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PublicAuctionMarketplaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PublicAuctionMarketplaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PublicAuctionMarketplaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PublicAuctionMarketplaceSession struct {
	Contract     *PublicAuctionMarketplace // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// PublicAuctionMarketplaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PublicAuctionMarketplaceCallerSession struct {
	Contract *PublicAuctionMarketplaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// PublicAuctionMarketplaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PublicAuctionMarketplaceTransactorSession struct {
	Contract     *PublicAuctionMarketplaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// PublicAuctionMarketplaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type PublicAuctionMarketplaceRaw struct {
	Contract *PublicAuctionMarketplace // Generic contract binding to access the raw methods on
}

// PublicAuctionMarketplaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PublicAuctionMarketplaceCallerRaw struct {
	Contract *PublicAuctionMarketplaceCaller // Generic read-only contract binding to access the raw methods on
}

// PublicAuctionMarketplaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PublicAuctionMarketplaceTransactorRaw struct {
	Contract *PublicAuctionMarketplaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPublicAuctionMarketplace creates a new instance of PublicAuctionMarketplace, bound to a specific deployed contract.
func NewPublicAuctionMarketplace(address common.Address, backend bind.ContractBackend) (*PublicAuctionMarketplace, error) {
	contract, err := bindPublicAuctionMarketplace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PublicAuctionMarketplace{PublicAuctionMarketplaceCaller: PublicAuctionMarketplaceCaller{contract: contract}, PublicAuctionMarketplaceTransactor: PublicAuctionMarketplaceTransactor{contract: contract}, PublicAuctionMarketplaceFilterer: PublicAuctionMarketplaceFilterer{contract: contract}}, nil
}

// NewPublicAuctionMarketplaceCaller creates a new read-only instance of PublicAuctionMarketplace, bound to a specific deployed contract.
func NewPublicAuctionMarketplaceCaller(address common.Address, caller bind.ContractCaller) (*PublicAuctionMarketplaceCaller, error) {
	contract, err := bindPublicAuctionMarketplace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PublicAuctionMarketplaceCaller{contract: contract}, nil
}

// NewPublicAuctionMarketplaceTransactor creates a new write-only instance of PublicAuctionMarketplace, bound to a specific deployed contract.
func NewPublicAuctionMarketplaceTransactor(address common.Address, transactor bind.ContractTransactor) (*PublicAuctionMarketplaceTransactor, error) {
	contract, err := bindPublicAuctionMarketplace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PublicAuctionMarketplaceTransactor{contract: contract}, nil
}

// NewPublicAuctionMarketplaceFilterer creates a new log filterer instance of PublicAuctionMarketplace, bound to a specific deployed contract.
func NewPublicAuctionMarketplaceFilterer(address common.Address, filterer bind.ContractFilterer) (*PublicAuctionMarketplaceFilterer, error) {
	contract, err := bindPublicAuctionMarketplace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PublicAuctionMarketplaceFilterer{contract: contract}, nil
}

// bindPublicAuctionMarketplace binds a generic wrapper to an already deployed contract.
func bindPublicAuctionMarketplace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PublicAuctionMarketplaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PublicAuctionMarketplace.Contract.PublicAuctionMarketplaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.PublicAuctionMarketplaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.PublicAuctionMarketplaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PublicAuctionMarketplace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.contract.Transact(opts, method, params...)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) ADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) ADMINROLE() ([32]byte, error) {
	return _PublicAuctionMarketplace.Contract.ADMINROLE(&_PublicAuctionMarketplace.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) ADMINROLE() ([32]byte, error) {
	return _PublicAuctionMarketplace.Contract.ADMINROLE(&_PublicAuctionMarketplace.CallOpts)
}

// CANCELROLE is a free data retrieval call binding the contract method 0x13c27ca7.
//
// Solidity: function CANCEL_ROLE() view returns(bytes32)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) CANCELROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "CANCEL_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CANCELROLE is a free data retrieval call binding the contract method 0x13c27ca7.
//
// Solidity: function CANCEL_ROLE() view returns(bytes32)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) CANCELROLE() ([32]byte, error) {
	return _PublicAuctionMarketplace.Contract.CANCELROLE(&_PublicAuctionMarketplace.CallOpts)
}

// CANCELROLE is a free data retrieval call binding the contract method 0x13c27ca7.
//
// Solidity: function CANCEL_ROLE() view returns(bytes32)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) CANCELROLE() ([32]byte, error) {
	return _PublicAuctionMarketplace.Contract.CANCELROLE(&_PublicAuctionMarketplace.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _PublicAuctionMarketplace.Contract.DEFAULTADMINROLE(&_PublicAuctionMarketplace.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _PublicAuctionMarketplace.Contract.DEFAULTADMINROLE(&_PublicAuctionMarketplace.CallOpts)
}

// ERC721Interface is a free data retrieval call binding the contract method 0x2b4c32be.
//
// Solidity: function ERC721_Interface() view returns(bytes4)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) ERC721Interface(opts *bind.CallOpts) ([4]byte, error) {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "ERC721_Interface")

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// ERC721Interface is a free data retrieval call binding the contract method 0x2b4c32be.
//
// Solidity: function ERC721_Interface() view returns(bytes4)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) ERC721Interface() ([4]byte, error) {
	return _PublicAuctionMarketplace.Contract.ERC721Interface(&_PublicAuctionMarketplace.CallOpts)
}

// ERC721Interface is a free data retrieval call binding the contract method 0x2b4c32be.
//
// Solidity: function ERC721_Interface() view returns(bytes4)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) ERC721Interface() ([4]byte, error) {
	return _PublicAuctionMarketplace.Contract.ERC721Interface(&_PublicAuctionMarketplace.CallOpts)
}

// IMarketplaceStorageInterface is a free data retrieval call binding the contract method 0x8bafe559.
//
// Solidity: function IMarketplaceStorage_Interface() view returns(bytes4)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) IMarketplaceStorageInterface(opts *bind.CallOpts) ([4]byte, error) {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "IMarketplaceStorage_Interface")

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// IMarketplaceStorageInterface is a free data retrieval call binding the contract method 0x8bafe559.
//
// Solidity: function IMarketplaceStorage_Interface() view returns(bytes4)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) IMarketplaceStorageInterface() ([4]byte, error) {
	return _PublicAuctionMarketplace.Contract.IMarketplaceStorageInterface(&_PublicAuctionMarketplace.CallOpts)
}

// IMarketplaceStorageInterface is a free data retrieval call binding the contract method 0x8bafe559.
//
// Solidity: function IMarketplaceStorage_Interface() view returns(bytes4)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) IMarketplaceStorageInterface() ([4]byte, error) {
	return _PublicAuctionMarketplace.Contract.IMarketplaceStorageInterface(&_PublicAuctionMarketplace.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) PAUSERROLE() ([32]byte, error) {
	return _PublicAuctionMarketplace.Contract.PAUSERROLE(&_PublicAuctionMarketplace.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) PAUSERROLE() ([32]byte, error) {
	return _PublicAuctionMarketplace.Contract.PAUSERROLE(&_PublicAuctionMarketplace.CallOpts)
}

// AcceptedToken is a free data retrieval call binding the contract method 0x451c3d80.
//
// Solidity: function acceptedToken() view returns(address)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) AcceptedToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "acceptedToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AcceptedToken is a free data retrieval call binding the contract method 0x451c3d80.
//
// Solidity: function acceptedToken() view returns(address)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) AcceptedToken() (common.Address, error) {
	return _PublicAuctionMarketplace.Contract.AcceptedToken(&_PublicAuctionMarketplace.CallOpts)
}

// AcceptedToken is a free data retrieval call binding the contract method 0x451c3d80.
//
// Solidity: function acceptedToken() view returns(address)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) AcceptedToken() (common.Address, error) {
	return _PublicAuctionMarketplace.Contract.AcceptedToken(&_PublicAuctionMarketplace.CallOpts)
}

// Beneficary is a free data retrieval call binding the contract method 0xcbfda1c5.
//
// Solidity: function beneficary() view returns(address)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) Beneficary(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "beneficary")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Beneficary is a free data retrieval call binding the contract method 0xcbfda1c5.
//
// Solidity: function beneficary() view returns(address)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) Beneficary() (common.Address, error) {
	return _PublicAuctionMarketplace.Contract.Beneficary(&_PublicAuctionMarketplace.CallOpts)
}

// Beneficary is a free data retrieval call binding the contract method 0xcbfda1c5.
//
// Solidity: function beneficary() view returns(address)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) Beneficary() (common.Address, error) {
	return _PublicAuctionMarketplace.Contract.Beneficary(&_PublicAuctionMarketplace.CallOpts)
}

// CheckExisted is a free data retrieval call binding the contract method 0x00c5c3c3.
//
// Solidity: function checkExisted(bytes32 publicAuctionId) view returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) CheckExisted(opts *bind.CallOpts, publicAuctionId [32]byte) error {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "checkExisted", publicAuctionId)

	if err != nil {
		return err
	}

	return err

}

// CheckExisted is a free data retrieval call binding the contract method 0x00c5c3c3.
//
// Solidity: function checkExisted(bytes32 publicAuctionId) view returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) CheckExisted(publicAuctionId [32]byte) error {
	return _PublicAuctionMarketplace.Contract.CheckExisted(&_PublicAuctionMarketplace.CallOpts, publicAuctionId)
}

// CheckExisted is a free data retrieval call binding the contract method 0x00c5c3c3.
//
// Solidity: function checkExisted(bytes32 publicAuctionId) view returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) CheckExisted(publicAuctionId [32]byte) error {
	return _PublicAuctionMarketplace.Contract.CheckExisted(&_PublicAuctionMarketplace.CallOpts, publicAuctionId)
}

// CheckRunning is a free data retrieval call binding the contract method 0x076f6dc7.
//
// Solidity: function checkRunning(bytes32 nftAsset, bytes32 publicAuctionId) view returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) CheckRunning(opts *bind.CallOpts, nftAsset [32]byte, publicAuctionId [32]byte) error {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "checkRunning", nftAsset, publicAuctionId)

	if err != nil {
		return err
	}

	return err

}

// CheckRunning is a free data retrieval call binding the contract method 0x076f6dc7.
//
// Solidity: function checkRunning(bytes32 nftAsset, bytes32 publicAuctionId) view returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) CheckRunning(nftAsset [32]byte, publicAuctionId [32]byte) error {
	return _PublicAuctionMarketplace.Contract.CheckRunning(&_PublicAuctionMarketplace.CallOpts, nftAsset, publicAuctionId)
}

// CheckRunning is a free data retrieval call binding the contract method 0x076f6dc7.
//
// Solidity: function checkRunning(bytes32 nftAsset, bytes32 publicAuctionId) view returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) CheckRunning(nftAsset [32]byte, publicAuctionId [32]byte) error {
	return _PublicAuctionMarketplace.Contract.CheckRunning(&_PublicAuctionMarketplace.CallOpts, nftAsset, publicAuctionId)
}

// GetBlackListStatus is a free data retrieval call binding the contract method 0x59bf1abe.
//
// Solidity: function getBlackListStatus(address _maker) view returns(bool)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) GetBlackListStatus(opts *bind.CallOpts, _maker common.Address) (bool, error) {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "getBlackListStatus", _maker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetBlackListStatus is a free data retrieval call binding the contract method 0x59bf1abe.
//
// Solidity: function getBlackListStatus(address _maker) view returns(bool)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) GetBlackListStatus(_maker common.Address) (bool, error) {
	return _PublicAuctionMarketplace.Contract.GetBlackListStatus(&_PublicAuctionMarketplace.CallOpts, _maker)
}

// GetBlackListStatus is a free data retrieval call binding the contract method 0x59bf1abe.
//
// Solidity: function getBlackListStatus(address _maker) view returns(bool)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) GetBlackListStatus(_maker common.Address) (bool, error) {
	return _PublicAuctionMarketplace.Contract.GetBlackListStatus(&_PublicAuctionMarketplace.CallOpts, _maker)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _PublicAuctionMarketplace.Contract.GetRoleAdmin(&_PublicAuctionMarketplace.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _PublicAuctionMarketplace.Contract.GetRoleAdmin(&_PublicAuctionMarketplace.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _PublicAuctionMarketplace.Contract.GetRoleMember(&_PublicAuctionMarketplace.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _PublicAuctionMarketplace.Contract.GetRoleMember(&_PublicAuctionMarketplace.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _PublicAuctionMarketplace.Contract.GetRoleMemberCount(&_PublicAuctionMarketplace.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _PublicAuctionMarketplace.Contract.GetRoleMemberCount(&_PublicAuctionMarketplace.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _PublicAuctionMarketplace.Contract.HasRole(&_PublicAuctionMarketplace.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _PublicAuctionMarketplace.Contract.HasRole(&_PublicAuctionMarketplace.CallOpts, role, account)
}

// IsBlackListed is a free data retrieval call binding the contract method 0xe47d6060.
//
// Solidity: function isBlackListed(address ) view returns(bool)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) IsBlackListed(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "isBlackListed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBlackListed is a free data retrieval call binding the contract method 0xe47d6060.
//
// Solidity: function isBlackListed(address ) view returns(bool)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) IsBlackListed(arg0 common.Address) (bool, error) {
	return _PublicAuctionMarketplace.Contract.IsBlackListed(&_PublicAuctionMarketplace.CallOpts, arg0)
}

// IsBlackListed is a free data retrieval call binding the contract method 0xe47d6060.
//
// Solidity: function isBlackListed(address ) view returns(bool)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) IsBlackListed(arg0 common.Address) (bool, error) {
	return _PublicAuctionMarketplace.Contract.IsBlackListed(&_PublicAuctionMarketplace.CallOpts, arg0)
}

// MarketplaceStorage is a free data retrieval call binding the contract method 0x46b3aec6.
//
// Solidity: function marketplaceStorage() view returns(address)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) MarketplaceStorage(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "marketplaceStorage")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MarketplaceStorage is a free data retrieval call binding the contract method 0x46b3aec6.
//
// Solidity: function marketplaceStorage() view returns(address)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) MarketplaceStorage() (common.Address, error) {
	return _PublicAuctionMarketplace.Contract.MarketplaceStorage(&_PublicAuctionMarketplace.CallOpts)
}

// MarketplaceStorage is a free data retrieval call binding the contract method 0x46b3aec6.
//
// Solidity: function marketplaceStorage() view returns(address)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) MarketplaceStorage() (common.Address, error) {
	return _PublicAuctionMarketplace.Contract.MarketplaceStorage(&_PublicAuctionMarketplace.CallOpts)
}

// MinStageDuration is a free data retrieval call binding the contract method 0xb42cf929.
//
// Solidity: function minStageDuration() view returns(uint256)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) MinStageDuration(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "minStageDuration")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinStageDuration is a free data retrieval call binding the contract method 0xb42cf929.
//
// Solidity: function minStageDuration() view returns(uint256)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) MinStageDuration() (*big.Int, error) {
	return _PublicAuctionMarketplace.Contract.MinStageDuration(&_PublicAuctionMarketplace.CallOpts)
}

// MinStageDuration is a free data retrieval call binding the contract method 0xb42cf929.
//
// Solidity: function minStageDuration() view returns(uint256)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) MinStageDuration() (*big.Int, error) {
	return _PublicAuctionMarketplace.Contract.MinStageDuration(&_PublicAuctionMarketplace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) Owner() (common.Address, error) {
	return _PublicAuctionMarketplace.Contract.Owner(&_PublicAuctionMarketplace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) Owner() (common.Address, error) {
	return _PublicAuctionMarketplace.Contract.Owner(&_PublicAuctionMarketplace.CallOpts)
}

// OwnerCutPerMillion is a free data retrieval call binding the contract method 0xa01f79d4.
//
// Solidity: function ownerCutPerMillion() view returns(uint256)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) OwnerCutPerMillion(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "ownerCutPerMillion")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// OwnerCutPerMillion is a free data retrieval call binding the contract method 0xa01f79d4.
//
// Solidity: function ownerCutPerMillion() view returns(uint256)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) OwnerCutPerMillion() (*big.Int, error) {
	return _PublicAuctionMarketplace.Contract.OwnerCutPerMillion(&_PublicAuctionMarketplace.CallOpts)
}

// OwnerCutPerMillion is a free data retrieval call binding the contract method 0xa01f79d4.
//
// Solidity: function ownerCutPerMillion() view returns(uint256)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) OwnerCutPerMillion() (*big.Int, error) {
	return _PublicAuctionMarketplace.Contract.OwnerCutPerMillion(&_PublicAuctionMarketplace.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) Paused() (bool, error) {
	return _PublicAuctionMarketplace.Contract.Paused(&_PublicAuctionMarketplace.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) Paused() (bool, error) {
	return _PublicAuctionMarketplace.Contract.Paused(&_PublicAuctionMarketplace.CallOpts)
}

// PublicationFeeInWei is a free data retrieval call binding the contract method 0xae4f1198.
//
// Solidity: function publicationFeeInWei() view returns(uint256)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) PublicationFeeInWei(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "publicationFeeInWei")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PublicationFeeInWei is a free data retrieval call binding the contract method 0xae4f1198.
//
// Solidity: function publicationFeeInWei() view returns(uint256)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) PublicationFeeInWei() (*big.Int, error) {
	return _PublicAuctionMarketplace.Contract.PublicationFeeInWei(&_PublicAuctionMarketplace.CallOpts)
}

// PublicationFeeInWei is a free data retrieval call binding the contract method 0xae4f1198.
//
// Solidity: function publicationFeeInWei() view returns(uint256)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) PublicationFeeInWei() (*big.Int, error) {
	return _PublicAuctionMarketplace.Contract.PublicationFeeInWei(&_PublicAuctionMarketplace.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _PublicAuctionMarketplace.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _PublicAuctionMarketplace.Contract.SupportsInterface(&_PublicAuctionMarketplace.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _PublicAuctionMarketplace.Contract.SupportsInterface(&_PublicAuctionMarketplace.CallOpts, interfaceId)
}

// AddBlackList is a paid mutator transaction binding the contract method 0x0ecb93c0.
//
// Solidity: function addBlackList(address _evilUser) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactor) AddBlackList(opts *bind.TransactOpts, _evilUser common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.contract.Transact(opts, "addBlackList", _evilUser)
}

// AddBlackList is a paid mutator transaction binding the contract method 0x0ecb93c0.
//
// Solidity: function addBlackList(address _evilUser) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) AddBlackList(_evilUser common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.AddBlackList(&_PublicAuctionMarketplace.TransactOpts, _evilUser)
}

// AddBlackList is a paid mutator transaction binding the contract method 0x0ecb93c0.
//
// Solidity: function addBlackList(address _evilUser) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactorSession) AddBlackList(_evilUser common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.AddBlackList(&_PublicAuctionMarketplace.TransactOpts, _evilUser)
}

// Bid is a paid mutator transaction binding the contract method 0x780e8d7d.
//
// Solidity: function bid(bytes32 nftAsset, bytes32 publicAuctionId, uint256 bidValue) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactor) Bid(opts *bind.TransactOpts, nftAsset [32]byte, publicAuctionId [32]byte, bidValue *big.Int) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.contract.Transact(opts, "bid", nftAsset, publicAuctionId, bidValue)
}

// Bid is a paid mutator transaction binding the contract method 0x780e8d7d.
//
// Solidity: function bid(bytes32 nftAsset, bytes32 publicAuctionId, uint256 bidValue) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) Bid(nftAsset [32]byte, publicAuctionId [32]byte, bidValue *big.Int) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.Bid(&_PublicAuctionMarketplace.TransactOpts, nftAsset, publicAuctionId, bidValue)
}

// Bid is a paid mutator transaction binding the contract method 0x780e8d7d.
//
// Solidity: function bid(bytes32 nftAsset, bytes32 publicAuctionId, uint256 bidValue) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactorSession) Bid(nftAsset [32]byte, publicAuctionId [32]byte, bidValue *big.Int) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.Bid(&_PublicAuctionMarketplace.TransactOpts, nftAsset, publicAuctionId, bidValue)
}

// CancelAuction is a paid mutator transaction binding the contract method 0xdaa3d985.
//
// Solidity: function cancelAuction(bytes32 nftAsset, bytes32 publicAuctionId) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactor) CancelAuction(opts *bind.TransactOpts, nftAsset [32]byte, publicAuctionId [32]byte) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.contract.Transact(opts, "cancelAuction", nftAsset, publicAuctionId)
}

// CancelAuction is a paid mutator transaction binding the contract method 0xdaa3d985.
//
// Solidity: function cancelAuction(bytes32 nftAsset, bytes32 publicAuctionId) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) CancelAuction(nftAsset [32]byte, publicAuctionId [32]byte) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.CancelAuction(&_PublicAuctionMarketplace.TransactOpts, nftAsset, publicAuctionId)
}

// CancelAuction is a paid mutator transaction binding the contract method 0xdaa3d985.
//
// Solidity: function cancelAuction(bytes32 nftAsset, bytes32 publicAuctionId) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactorSession) CancelAuction(nftAsset [32]byte, publicAuctionId [32]byte) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.CancelAuction(&_PublicAuctionMarketplace.TransactOpts, nftAsset, publicAuctionId)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x23bc068e.
//
// Solidity: function createAuction(address nftAddress, bytes32 publicAuctionId, bytes32 nftAsset, uint256 assetId, uint256 startPriceInWei, uint256 biddingEnd, uint256 minIncrement) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactor) CreateAuction(opts *bind.TransactOpts, nftAddress common.Address, publicAuctionId [32]byte, nftAsset [32]byte, assetId *big.Int, startPriceInWei *big.Int, biddingEnd *big.Int, minIncrement *big.Int) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.contract.Transact(opts, "createAuction", nftAddress, publicAuctionId, nftAsset, assetId, startPriceInWei, biddingEnd, minIncrement)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x23bc068e.
//
// Solidity: function createAuction(address nftAddress, bytes32 publicAuctionId, bytes32 nftAsset, uint256 assetId, uint256 startPriceInWei, uint256 biddingEnd, uint256 minIncrement) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) CreateAuction(nftAddress common.Address, publicAuctionId [32]byte, nftAsset [32]byte, assetId *big.Int, startPriceInWei *big.Int, biddingEnd *big.Int, minIncrement *big.Int) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.CreateAuction(&_PublicAuctionMarketplace.TransactOpts, nftAddress, publicAuctionId, nftAsset, assetId, startPriceInWei, biddingEnd, minIncrement)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x23bc068e.
//
// Solidity: function createAuction(address nftAddress, bytes32 publicAuctionId, bytes32 nftAsset, uint256 assetId, uint256 startPriceInWei, uint256 biddingEnd, uint256 minIncrement) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactorSession) CreateAuction(nftAddress common.Address, publicAuctionId [32]byte, nftAsset [32]byte, assetId *big.Int, startPriceInWei *big.Int, biddingEnd *big.Int, minIncrement *big.Int) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.CreateAuction(&_PublicAuctionMarketplace.TransactOpts, nftAddress, publicAuctionId, nftAsset, assetId, startPriceInWei, biddingEnd, minIncrement)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.GrantRole(&_PublicAuctionMarketplace.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.GrantRole(&_PublicAuctionMarketplace.TransactOpts, role, account)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) Pause() (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.Pause(&_PublicAuctionMarketplace.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactorSession) Pause() (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.Pause(&_PublicAuctionMarketplace.TransactOpts)
}

// ReceiveReward is a paid mutator transaction binding the contract method 0xcfdb69a7.
//
// Solidity: function receiveReward(address nftAddress, bytes32 publicAuctionId, bytes32 nftAsset, uint256 assetId) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactor) ReceiveReward(opts *bind.TransactOpts, nftAddress common.Address, publicAuctionId [32]byte, nftAsset [32]byte, assetId *big.Int) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.contract.Transact(opts, "receiveReward", nftAddress, publicAuctionId, nftAsset, assetId)
}

// ReceiveReward is a paid mutator transaction binding the contract method 0xcfdb69a7.
//
// Solidity: function receiveReward(address nftAddress, bytes32 publicAuctionId, bytes32 nftAsset, uint256 assetId) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) ReceiveReward(nftAddress common.Address, publicAuctionId [32]byte, nftAsset [32]byte, assetId *big.Int) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.ReceiveReward(&_PublicAuctionMarketplace.TransactOpts, nftAddress, publicAuctionId, nftAsset, assetId)
}

// ReceiveReward is a paid mutator transaction binding the contract method 0xcfdb69a7.
//
// Solidity: function receiveReward(address nftAddress, bytes32 publicAuctionId, bytes32 nftAsset, uint256 assetId) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactorSession) ReceiveReward(nftAddress common.Address, publicAuctionId [32]byte, nftAsset [32]byte, assetId *big.Int) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.ReceiveReward(&_PublicAuctionMarketplace.TransactOpts, nftAddress, publicAuctionId, nftAsset, assetId)
}

// RemoveBlackList is a paid mutator transaction binding the contract method 0xe4997dc5.
//
// Solidity: function removeBlackList(address _clearedUser) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactor) RemoveBlackList(opts *bind.TransactOpts, _clearedUser common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.contract.Transact(opts, "removeBlackList", _clearedUser)
}

// RemoveBlackList is a paid mutator transaction binding the contract method 0xe4997dc5.
//
// Solidity: function removeBlackList(address _clearedUser) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) RemoveBlackList(_clearedUser common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.RemoveBlackList(&_PublicAuctionMarketplace.TransactOpts, _clearedUser)
}

// RemoveBlackList is a paid mutator transaction binding the contract method 0xe4997dc5.
//
// Solidity: function removeBlackList(address _clearedUser) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactorSession) RemoveBlackList(_clearedUser common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.RemoveBlackList(&_PublicAuctionMarketplace.TransactOpts, _clearedUser)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) RenounceOwnership() (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.RenounceOwnership(&_PublicAuctionMarketplace.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.RenounceOwnership(&_PublicAuctionMarketplace.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.RenounceRole(&_PublicAuctionMarketplace.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.RenounceRole(&_PublicAuctionMarketplace.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.RevokeRole(&_PublicAuctionMarketplace.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.RevokeRole(&_PublicAuctionMarketplace.TransactOpts, role, account)
}

// SetBeneficary is a paid mutator transaction binding the contract method 0x0db3cc05.
//
// Solidity: function setBeneficary(address _beneficary) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactor) SetBeneficary(opts *bind.TransactOpts, _beneficary common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.contract.Transact(opts, "setBeneficary", _beneficary)
}

// SetBeneficary is a paid mutator transaction binding the contract method 0x0db3cc05.
//
// Solidity: function setBeneficary(address _beneficary) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) SetBeneficary(_beneficary common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.SetBeneficary(&_PublicAuctionMarketplace.TransactOpts, _beneficary)
}

// SetBeneficary is a paid mutator transaction binding the contract method 0x0db3cc05.
//
// Solidity: function setBeneficary(address _beneficary) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactorSession) SetBeneficary(_beneficary common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.SetBeneficary(&_PublicAuctionMarketplace.TransactOpts, _beneficary)
}

// SetMinStageDuration is a paid mutator transaction binding the contract method 0xf6021884.
//
// Solidity: function setMinStageDuration(uint256 duration) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactor) SetMinStageDuration(opts *bind.TransactOpts, duration *big.Int) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.contract.Transact(opts, "setMinStageDuration", duration)
}

// SetMinStageDuration is a paid mutator transaction binding the contract method 0xf6021884.
//
// Solidity: function setMinStageDuration(uint256 duration) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) SetMinStageDuration(duration *big.Int) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.SetMinStageDuration(&_PublicAuctionMarketplace.TransactOpts, duration)
}

// SetMinStageDuration is a paid mutator transaction binding the contract method 0xf6021884.
//
// Solidity: function setMinStageDuration(uint256 duration) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactorSession) SetMinStageDuration(duration *big.Int) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.SetMinStageDuration(&_PublicAuctionMarketplace.TransactOpts, duration)
}

// SetOwnerCutPerMillion is a paid mutator transaction binding the contract method 0x19dad16d.
//
// Solidity: function setOwnerCutPerMillion(uint256 _ownerCutPerMillion) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactor) SetOwnerCutPerMillion(opts *bind.TransactOpts, _ownerCutPerMillion *big.Int) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.contract.Transact(opts, "setOwnerCutPerMillion", _ownerCutPerMillion)
}

// SetOwnerCutPerMillion is a paid mutator transaction binding the contract method 0x19dad16d.
//
// Solidity: function setOwnerCutPerMillion(uint256 _ownerCutPerMillion) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) SetOwnerCutPerMillion(_ownerCutPerMillion *big.Int) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.SetOwnerCutPerMillion(&_PublicAuctionMarketplace.TransactOpts, _ownerCutPerMillion)
}

// SetOwnerCutPerMillion is a paid mutator transaction binding the contract method 0x19dad16d.
//
// Solidity: function setOwnerCutPerMillion(uint256 _ownerCutPerMillion) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactorSession) SetOwnerCutPerMillion(_ownerCutPerMillion *big.Int) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.SetOwnerCutPerMillion(&_PublicAuctionMarketplace.TransactOpts, _ownerCutPerMillion)
}

// SetPublicationFee is a paid mutator transaction binding the contract method 0xaf8996f1.
//
// Solidity: function setPublicationFee(uint256 _publicationFee) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactor) SetPublicationFee(opts *bind.TransactOpts, _publicationFee *big.Int) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.contract.Transact(opts, "setPublicationFee", _publicationFee)
}

// SetPublicationFee is a paid mutator transaction binding the contract method 0xaf8996f1.
//
// Solidity: function setPublicationFee(uint256 _publicationFee) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) SetPublicationFee(_publicationFee *big.Int) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.SetPublicationFee(&_PublicAuctionMarketplace.TransactOpts, _publicationFee)
}

// SetPublicationFee is a paid mutator transaction binding the contract method 0xaf8996f1.
//
// Solidity: function setPublicationFee(uint256 _publicationFee) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactorSession) SetPublicationFee(_publicationFee *big.Int) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.SetPublicationFee(&_PublicAuctionMarketplace.TransactOpts, _publicationFee)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.TransferOwnership(&_PublicAuctionMarketplace.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.TransferOwnership(&_PublicAuctionMarketplace.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) Unpause() (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.Unpause(&_PublicAuctionMarketplace.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactorSession) Unpause() (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.Unpause(&_PublicAuctionMarketplace.TransactOpts)
}

// UpdateStorageAddress is a paid mutator transaction binding the contract method 0x889e2129.
//
// Solidity: function updateStorageAddress(address _marketplaceStorage) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactor) UpdateStorageAddress(opts *bind.TransactOpts, _marketplaceStorage common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.contract.Transact(opts, "updateStorageAddress", _marketplaceStorage)
}

// UpdateStorageAddress is a paid mutator transaction binding the contract method 0x889e2129.
//
// Solidity: function updateStorageAddress(address _marketplaceStorage) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceSession) UpdateStorageAddress(_marketplaceStorage common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.UpdateStorageAddress(&_PublicAuctionMarketplace.TransactOpts, _marketplaceStorage)
}

// UpdateStorageAddress is a paid mutator transaction binding the contract method 0x889e2129.
//
// Solidity: function updateStorageAddress(address _marketplaceStorage) returns()
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceTransactorSession) UpdateStorageAddress(_marketplaceStorage common.Address) (*types.Transaction, error) {
	return _PublicAuctionMarketplace.Contract.UpdateStorageAddress(&_PublicAuctionMarketplace.TransactOpts, _marketplaceStorage)
}

// PublicAuctionMarketplaceAddedBlackListIterator is returned from FilterAddedBlackList and is used to iterate over the raw logs and unpacked data for AddedBlackList events raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceAddedBlackListIterator struct {
	Event *PublicAuctionMarketplaceAddedBlackList // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicAuctionMarketplaceAddedBlackListIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicAuctionMarketplaceAddedBlackList)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicAuctionMarketplaceAddedBlackList)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicAuctionMarketplaceAddedBlackListIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicAuctionMarketplaceAddedBlackListIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicAuctionMarketplaceAddedBlackList represents a AddedBlackList event raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceAddedBlackList struct {
	User common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAddedBlackList is a free log retrieval operation binding the contract event 0x42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc.
//
// Solidity: event AddedBlackList(address _user)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) FilterAddedBlackList(opts *bind.FilterOpts) (*PublicAuctionMarketplaceAddedBlackListIterator, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.FilterLogs(opts, "AddedBlackList")
	if err != nil {
		return nil, err
	}
	return &PublicAuctionMarketplaceAddedBlackListIterator{contract: _PublicAuctionMarketplace.contract, event: "AddedBlackList", logs: logs, sub: sub}, nil
}

// WatchAddedBlackList is a free log subscription operation binding the contract event 0x42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc.
//
// Solidity: event AddedBlackList(address _user)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) WatchAddedBlackList(opts *bind.WatchOpts, sink chan<- *PublicAuctionMarketplaceAddedBlackList) (event.Subscription, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.WatchLogs(opts, "AddedBlackList")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicAuctionMarketplaceAddedBlackList)
				if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "AddedBlackList", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddedBlackList is a log parse operation binding the contract event 0x42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc.
//
// Solidity: event AddedBlackList(address _user)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) ParseAddedBlackList(log types.Log) (*PublicAuctionMarketplaceAddedBlackList, error) {
	event := new(PublicAuctionMarketplaceAddedBlackList)
	if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "AddedBlackList", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicAuctionMarketplaceAuctionCancelledSuccessfulIterator is returned from FilterAuctionCancelledSuccessful and is used to iterate over the raw logs and unpacked data for AuctionCancelledSuccessful events raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceAuctionCancelledSuccessfulIterator struct {
	Event *PublicAuctionMarketplaceAuctionCancelledSuccessful // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicAuctionMarketplaceAuctionCancelledSuccessfulIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicAuctionMarketplaceAuctionCancelledSuccessful)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicAuctionMarketplaceAuctionCancelledSuccessful)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicAuctionMarketplaceAuctionCancelledSuccessfulIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicAuctionMarketplaceAuctionCancelledSuccessfulIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicAuctionMarketplaceAuctionCancelledSuccessful represents a AuctionCancelledSuccessful event raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceAuctionCancelledSuccessful struct {
	Canceller common.Address
	AuctionId [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAuctionCancelledSuccessful is a free log retrieval operation binding the contract event 0xa021239bb373fef19aa7c7ef798961ab038ebf95bd85d546b731d25855db190e.
//
// Solidity: event AuctionCancelledSuccessful(address canceller, bytes32 auctionId)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) FilterAuctionCancelledSuccessful(opts *bind.FilterOpts) (*PublicAuctionMarketplaceAuctionCancelledSuccessfulIterator, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.FilterLogs(opts, "AuctionCancelledSuccessful")
	if err != nil {
		return nil, err
	}
	return &PublicAuctionMarketplaceAuctionCancelledSuccessfulIterator{contract: _PublicAuctionMarketplace.contract, event: "AuctionCancelledSuccessful", logs: logs, sub: sub}, nil
}

// WatchAuctionCancelledSuccessful is a free log subscription operation binding the contract event 0xa021239bb373fef19aa7c7ef798961ab038ebf95bd85d546b731d25855db190e.
//
// Solidity: event AuctionCancelledSuccessful(address canceller, bytes32 auctionId)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) WatchAuctionCancelledSuccessful(opts *bind.WatchOpts, sink chan<- *PublicAuctionMarketplaceAuctionCancelledSuccessful) (event.Subscription, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.WatchLogs(opts, "AuctionCancelledSuccessful")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicAuctionMarketplaceAuctionCancelledSuccessful)
				if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "AuctionCancelledSuccessful", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuctionCancelledSuccessful is a log parse operation binding the contract event 0xa021239bb373fef19aa7c7ef798961ab038ebf95bd85d546b731d25855db190e.
//
// Solidity: event AuctionCancelledSuccessful(address canceller, bytes32 auctionId)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) ParseAuctionCancelledSuccessful(log types.Log) (*PublicAuctionMarketplaceAuctionCancelledSuccessful, error) {
	event := new(PublicAuctionMarketplaceAuctionCancelledSuccessful)
	if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "AuctionCancelledSuccessful", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicAuctionMarketplaceAuctionRefundSuccessfulIterator is returned from FilterAuctionRefundSuccessful and is used to iterate over the raw logs and unpacked data for AuctionRefundSuccessful events raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceAuctionRefundSuccessfulIterator struct {
	Event *PublicAuctionMarketplaceAuctionRefundSuccessful // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicAuctionMarketplaceAuctionRefundSuccessfulIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicAuctionMarketplaceAuctionRefundSuccessful)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicAuctionMarketplaceAuctionRefundSuccessful)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicAuctionMarketplaceAuctionRefundSuccessfulIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicAuctionMarketplaceAuctionRefundSuccessfulIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicAuctionMarketplaceAuctionRefundSuccessful represents a AuctionRefundSuccessful event raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceAuctionRefundSuccessful struct {
	Bidder    common.Address
	AuctionId [32]byte
	Value     *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAuctionRefundSuccessful is a free log retrieval operation binding the contract event 0x5f4b88832be3746851e4d0ce6129f89fe39ddcf5a4b0204699724c459baf7d9d.
//
// Solidity: event AuctionRefundSuccessful(address bidder, bytes32 auctionId, uint256 value)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) FilterAuctionRefundSuccessful(opts *bind.FilterOpts) (*PublicAuctionMarketplaceAuctionRefundSuccessfulIterator, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.FilterLogs(opts, "AuctionRefundSuccessful")
	if err != nil {
		return nil, err
	}
	return &PublicAuctionMarketplaceAuctionRefundSuccessfulIterator{contract: _PublicAuctionMarketplace.contract, event: "AuctionRefundSuccessful", logs: logs, sub: sub}, nil
}

// WatchAuctionRefundSuccessful is a free log subscription operation binding the contract event 0x5f4b88832be3746851e4d0ce6129f89fe39ddcf5a4b0204699724c459baf7d9d.
//
// Solidity: event AuctionRefundSuccessful(address bidder, bytes32 auctionId, uint256 value)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) WatchAuctionRefundSuccessful(opts *bind.WatchOpts, sink chan<- *PublicAuctionMarketplaceAuctionRefundSuccessful) (event.Subscription, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.WatchLogs(opts, "AuctionRefundSuccessful")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicAuctionMarketplaceAuctionRefundSuccessful)
				if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "AuctionRefundSuccessful", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuctionRefundSuccessful is a log parse operation binding the contract event 0x5f4b88832be3746851e4d0ce6129f89fe39ddcf5a4b0204699724c459baf7d9d.
//
// Solidity: event AuctionRefundSuccessful(address bidder, bytes32 auctionId, uint256 value)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) ParseAuctionRefundSuccessful(log types.Log) (*PublicAuctionMarketplaceAuctionRefundSuccessful, error) {
	event := new(PublicAuctionMarketplaceAuctionRefundSuccessful)
	if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "AuctionRefundSuccessful", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicAuctionMarketplaceChangedOwnerCutPerMillionIterator is returned from FilterChangedOwnerCutPerMillion and is used to iterate over the raw logs and unpacked data for ChangedOwnerCutPerMillion events raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceChangedOwnerCutPerMillionIterator struct {
	Event *PublicAuctionMarketplaceChangedOwnerCutPerMillion // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicAuctionMarketplaceChangedOwnerCutPerMillionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicAuctionMarketplaceChangedOwnerCutPerMillion)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicAuctionMarketplaceChangedOwnerCutPerMillion)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicAuctionMarketplaceChangedOwnerCutPerMillionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicAuctionMarketplaceChangedOwnerCutPerMillionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicAuctionMarketplaceChangedOwnerCutPerMillion represents a ChangedOwnerCutPerMillion event raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceChangedOwnerCutPerMillion struct {
	OwnerCutPerMillion *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterChangedOwnerCutPerMillion is a free log retrieval operation binding the contract event 0xfa406a120a9e7f2b332bfb7a43d3bf1c3f079262202907a6b69c94b2821a02c6.
//
// Solidity: event ChangedOwnerCutPerMillion(uint256 ownerCutPerMillion)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) FilterChangedOwnerCutPerMillion(opts *bind.FilterOpts) (*PublicAuctionMarketplaceChangedOwnerCutPerMillionIterator, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.FilterLogs(opts, "ChangedOwnerCutPerMillion")
	if err != nil {
		return nil, err
	}
	return &PublicAuctionMarketplaceChangedOwnerCutPerMillionIterator{contract: _PublicAuctionMarketplace.contract, event: "ChangedOwnerCutPerMillion", logs: logs, sub: sub}, nil
}

// WatchChangedOwnerCutPerMillion is a free log subscription operation binding the contract event 0xfa406a120a9e7f2b332bfb7a43d3bf1c3f079262202907a6b69c94b2821a02c6.
//
// Solidity: event ChangedOwnerCutPerMillion(uint256 ownerCutPerMillion)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) WatchChangedOwnerCutPerMillion(opts *bind.WatchOpts, sink chan<- *PublicAuctionMarketplaceChangedOwnerCutPerMillion) (event.Subscription, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.WatchLogs(opts, "ChangedOwnerCutPerMillion")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicAuctionMarketplaceChangedOwnerCutPerMillion)
				if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "ChangedOwnerCutPerMillion", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangedOwnerCutPerMillion is a log parse operation binding the contract event 0xfa406a120a9e7f2b332bfb7a43d3bf1c3f079262202907a6b69c94b2821a02c6.
//
// Solidity: event ChangedOwnerCutPerMillion(uint256 ownerCutPerMillion)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) ParseChangedOwnerCutPerMillion(log types.Log) (*PublicAuctionMarketplaceChangedOwnerCutPerMillion, error) {
	event := new(PublicAuctionMarketplaceChangedOwnerCutPerMillion)
	if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "ChangedOwnerCutPerMillion", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicAuctionMarketplaceChangedPublicationFeeIterator is returned from FilterChangedPublicationFee and is used to iterate over the raw logs and unpacked data for ChangedPublicationFee events raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceChangedPublicationFeeIterator struct {
	Event *PublicAuctionMarketplaceChangedPublicationFee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicAuctionMarketplaceChangedPublicationFeeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicAuctionMarketplaceChangedPublicationFee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicAuctionMarketplaceChangedPublicationFee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicAuctionMarketplaceChangedPublicationFeeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicAuctionMarketplaceChangedPublicationFeeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicAuctionMarketplaceChangedPublicationFee represents a ChangedPublicationFee event raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceChangedPublicationFee struct {
	PublicationFee *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterChangedPublicationFee is a free log retrieval operation binding the contract event 0xe7fa8737293f41b5dfa0d5c3e552860a06275bed7015581b083c7be7003308ba.
//
// Solidity: event ChangedPublicationFee(uint256 publicationFee)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) FilterChangedPublicationFee(opts *bind.FilterOpts) (*PublicAuctionMarketplaceChangedPublicationFeeIterator, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.FilterLogs(opts, "ChangedPublicationFee")
	if err != nil {
		return nil, err
	}
	return &PublicAuctionMarketplaceChangedPublicationFeeIterator{contract: _PublicAuctionMarketplace.contract, event: "ChangedPublicationFee", logs: logs, sub: sub}, nil
}

// WatchChangedPublicationFee is a free log subscription operation binding the contract event 0xe7fa8737293f41b5dfa0d5c3e552860a06275bed7015581b083c7be7003308ba.
//
// Solidity: event ChangedPublicationFee(uint256 publicationFee)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) WatchChangedPublicationFee(opts *bind.WatchOpts, sink chan<- *PublicAuctionMarketplaceChangedPublicationFee) (event.Subscription, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.WatchLogs(opts, "ChangedPublicationFee")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicAuctionMarketplaceChangedPublicationFee)
				if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "ChangedPublicationFee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangedPublicationFee is a log parse operation binding the contract event 0xe7fa8737293f41b5dfa0d5c3e552860a06275bed7015581b083c7be7003308ba.
//
// Solidity: event ChangedPublicationFee(uint256 publicationFee)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) ParseChangedPublicationFee(log types.Log) (*PublicAuctionMarketplaceChangedPublicationFee, error) {
	event := new(PublicAuctionMarketplaceChangedPublicationFee)
	if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "ChangedPublicationFee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicAuctionMarketplaceGrantAuctionRewardSuccessfulIterator is returned from FilterGrantAuctionRewardSuccessful and is used to iterate over the raw logs and unpacked data for GrantAuctionRewardSuccessful events raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceGrantAuctionRewardSuccessfulIterator struct {
	Event *PublicAuctionMarketplaceGrantAuctionRewardSuccessful // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicAuctionMarketplaceGrantAuctionRewardSuccessfulIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicAuctionMarketplaceGrantAuctionRewardSuccessful)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicAuctionMarketplaceGrantAuctionRewardSuccessful)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicAuctionMarketplaceGrantAuctionRewardSuccessfulIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicAuctionMarketplaceGrantAuctionRewardSuccessfulIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicAuctionMarketplaceGrantAuctionRewardSuccessful represents a GrantAuctionRewardSuccessful event raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceGrantAuctionRewardSuccessful struct {
	AuctionHighestBidder common.Address
	AuctionId            [32]byte
	AssetId              *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterGrantAuctionRewardSuccessful is a free log retrieval operation binding the contract event 0xa307d88e125ed19583b02332c5bd74f0323774248b3f9cac5047c2433d9d8ddc.
//
// Solidity: event GrantAuctionRewardSuccessful(address auctionHighestBidder, bytes32 auctionId, uint256 assetId)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) FilterGrantAuctionRewardSuccessful(opts *bind.FilterOpts) (*PublicAuctionMarketplaceGrantAuctionRewardSuccessfulIterator, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.FilterLogs(opts, "GrantAuctionRewardSuccessful")
	if err != nil {
		return nil, err
	}
	return &PublicAuctionMarketplaceGrantAuctionRewardSuccessfulIterator{contract: _PublicAuctionMarketplace.contract, event: "GrantAuctionRewardSuccessful", logs: logs, sub: sub}, nil
}

// WatchGrantAuctionRewardSuccessful is a free log subscription operation binding the contract event 0xa307d88e125ed19583b02332c5bd74f0323774248b3f9cac5047c2433d9d8ddc.
//
// Solidity: event GrantAuctionRewardSuccessful(address auctionHighestBidder, bytes32 auctionId, uint256 assetId)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) WatchGrantAuctionRewardSuccessful(opts *bind.WatchOpts, sink chan<- *PublicAuctionMarketplaceGrantAuctionRewardSuccessful) (event.Subscription, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.WatchLogs(opts, "GrantAuctionRewardSuccessful")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicAuctionMarketplaceGrantAuctionRewardSuccessful)
				if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "GrantAuctionRewardSuccessful", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGrantAuctionRewardSuccessful is a log parse operation binding the contract event 0xa307d88e125ed19583b02332c5bd74f0323774248b3f9cac5047c2433d9d8ddc.
//
// Solidity: event GrantAuctionRewardSuccessful(address auctionHighestBidder, bytes32 auctionId, uint256 assetId)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) ParseGrantAuctionRewardSuccessful(log types.Log) (*PublicAuctionMarketplaceGrantAuctionRewardSuccessful, error) {
	event := new(PublicAuctionMarketplaceGrantAuctionRewardSuccessful)
	if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "GrantAuctionRewardSuccessful", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicAuctionMarketplaceMarketplaceStorageUpdatedIterator is returned from FilterMarketplaceStorageUpdated and is used to iterate over the raw logs and unpacked data for MarketplaceStorageUpdated events raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceMarketplaceStorageUpdatedIterator struct {
	Event *PublicAuctionMarketplaceMarketplaceStorageUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicAuctionMarketplaceMarketplaceStorageUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicAuctionMarketplaceMarketplaceStorageUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicAuctionMarketplaceMarketplaceStorageUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicAuctionMarketplaceMarketplaceStorageUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicAuctionMarketplaceMarketplaceStorageUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicAuctionMarketplaceMarketplaceStorageUpdated represents a MarketplaceStorageUpdated event raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceMarketplaceStorageUpdated struct {
	MarketplaceStorage common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterMarketplaceStorageUpdated is a free log retrieval operation binding the contract event 0x19e07a962d0e1cab8b7d4be06b77a7225ca7ebb744994cb6546fdd815590dc9d.
//
// Solidity: event MarketplaceStorageUpdated(address _marketplaceStorage)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) FilterMarketplaceStorageUpdated(opts *bind.FilterOpts) (*PublicAuctionMarketplaceMarketplaceStorageUpdatedIterator, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.FilterLogs(opts, "MarketplaceStorageUpdated")
	if err != nil {
		return nil, err
	}
	return &PublicAuctionMarketplaceMarketplaceStorageUpdatedIterator{contract: _PublicAuctionMarketplace.contract, event: "MarketplaceStorageUpdated", logs: logs, sub: sub}, nil
}

// WatchMarketplaceStorageUpdated is a free log subscription operation binding the contract event 0x19e07a962d0e1cab8b7d4be06b77a7225ca7ebb744994cb6546fdd815590dc9d.
//
// Solidity: event MarketplaceStorageUpdated(address _marketplaceStorage)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) WatchMarketplaceStorageUpdated(opts *bind.WatchOpts, sink chan<- *PublicAuctionMarketplaceMarketplaceStorageUpdated) (event.Subscription, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.WatchLogs(opts, "MarketplaceStorageUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicAuctionMarketplaceMarketplaceStorageUpdated)
				if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "MarketplaceStorageUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMarketplaceStorageUpdated is a log parse operation binding the contract event 0x19e07a962d0e1cab8b7d4be06b77a7225ca7ebb744994cb6546fdd815590dc9d.
//
// Solidity: event MarketplaceStorageUpdated(address _marketplaceStorage)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) ParseMarketplaceStorageUpdated(log types.Log) (*PublicAuctionMarketplaceMarketplaceStorageUpdated, error) {
	event := new(PublicAuctionMarketplaceMarketplaceStorageUpdated)
	if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "MarketplaceStorageUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicAuctionMarketplaceOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceOwnershipTransferredIterator struct {
	Event *PublicAuctionMarketplaceOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicAuctionMarketplaceOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicAuctionMarketplaceOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicAuctionMarketplaceOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicAuctionMarketplaceOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicAuctionMarketplaceOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicAuctionMarketplaceOwnershipTransferred represents a OwnershipTransferred event raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PublicAuctionMarketplaceOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PublicAuctionMarketplace.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PublicAuctionMarketplaceOwnershipTransferredIterator{contract: _PublicAuctionMarketplace.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PublicAuctionMarketplaceOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PublicAuctionMarketplace.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicAuctionMarketplaceOwnershipTransferred)
				if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) ParseOwnershipTransferred(log types.Log) (*PublicAuctionMarketplaceOwnershipTransferred, error) {
	event := new(PublicAuctionMarketplaceOwnershipTransferred)
	if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicAuctionMarketplacePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplacePausedIterator struct {
	Event *PublicAuctionMarketplacePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicAuctionMarketplacePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicAuctionMarketplacePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicAuctionMarketplacePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicAuctionMarketplacePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicAuctionMarketplacePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicAuctionMarketplacePaused represents a Paused event raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplacePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) FilterPaused(opts *bind.FilterOpts) (*PublicAuctionMarketplacePausedIterator, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &PublicAuctionMarketplacePausedIterator{contract: _PublicAuctionMarketplace.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *PublicAuctionMarketplacePaused) (event.Subscription, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicAuctionMarketplacePaused)
				if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) ParsePaused(log types.Log) (*PublicAuctionMarketplacePaused, error) {
	event := new(PublicAuctionMarketplacePaused)
	if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicAuctionMarketplacePublicAuctionBidSuccessfulIterator is returned from FilterPublicAuctionBidSuccessful and is used to iterate over the raw logs and unpacked data for PublicAuctionBidSuccessful events raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplacePublicAuctionBidSuccessfulIterator struct {
	Event *PublicAuctionMarketplacePublicAuctionBidSuccessful // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicAuctionMarketplacePublicAuctionBidSuccessfulIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicAuctionMarketplacePublicAuctionBidSuccessful)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicAuctionMarketplacePublicAuctionBidSuccessful)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicAuctionMarketplacePublicAuctionBidSuccessfulIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicAuctionMarketplacePublicAuctionBidSuccessfulIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicAuctionMarketplacePublicAuctionBidSuccessful represents a PublicAuctionBidSuccessful event raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplacePublicAuctionBidSuccessful struct {
	Sender          common.Address
	PublicAuctionId [32]byte
	BidValue        *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterPublicAuctionBidSuccessful is a free log retrieval operation binding the contract event 0x9f541988b3aac74ac43a6f4b330ceed668244b74461b90850d199a38a172f7c2.
//
// Solidity: event PublicAuctionBidSuccessful(address sender, bytes32 publicAuctionId, uint256 bidValue)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) FilterPublicAuctionBidSuccessful(opts *bind.FilterOpts) (*PublicAuctionMarketplacePublicAuctionBidSuccessfulIterator, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.FilterLogs(opts, "PublicAuctionBidSuccessful")
	if err != nil {
		return nil, err
	}
	return &PublicAuctionMarketplacePublicAuctionBidSuccessfulIterator{contract: _PublicAuctionMarketplace.contract, event: "PublicAuctionBidSuccessful", logs: logs, sub: sub}, nil
}

// WatchPublicAuctionBidSuccessful is a free log subscription operation binding the contract event 0x9f541988b3aac74ac43a6f4b330ceed668244b74461b90850d199a38a172f7c2.
//
// Solidity: event PublicAuctionBidSuccessful(address sender, bytes32 publicAuctionId, uint256 bidValue)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) WatchPublicAuctionBidSuccessful(opts *bind.WatchOpts, sink chan<- *PublicAuctionMarketplacePublicAuctionBidSuccessful) (event.Subscription, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.WatchLogs(opts, "PublicAuctionBidSuccessful")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicAuctionMarketplacePublicAuctionBidSuccessful)
				if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "PublicAuctionBidSuccessful", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePublicAuctionBidSuccessful is a log parse operation binding the contract event 0x9f541988b3aac74ac43a6f4b330ceed668244b74461b90850d199a38a172f7c2.
//
// Solidity: event PublicAuctionBidSuccessful(address sender, bytes32 publicAuctionId, uint256 bidValue)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) ParsePublicAuctionBidSuccessful(log types.Log) (*PublicAuctionMarketplacePublicAuctionBidSuccessful, error) {
	event := new(PublicAuctionMarketplacePublicAuctionBidSuccessful)
	if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "PublicAuctionBidSuccessful", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicAuctionMarketplacePublicAuctionCreatedSuccessfulIterator is returned from FilterPublicAuctionCreatedSuccessful and is used to iterate over the raw logs and unpacked data for PublicAuctionCreatedSuccessful events raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplacePublicAuctionCreatedSuccessfulIterator struct {
	Event *PublicAuctionMarketplacePublicAuctionCreatedSuccessful // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicAuctionMarketplacePublicAuctionCreatedSuccessfulIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicAuctionMarketplacePublicAuctionCreatedSuccessful)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicAuctionMarketplacePublicAuctionCreatedSuccessful)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicAuctionMarketplacePublicAuctionCreatedSuccessfulIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicAuctionMarketplacePublicAuctionCreatedSuccessfulIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicAuctionMarketplacePublicAuctionCreatedSuccessful represents a PublicAuctionCreatedSuccessful event raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplacePublicAuctionCreatedSuccessful struct {
	AssetOwner      common.Address
	NftAddress      common.Address
	PublicAuctionId [32]byte
	AssetId         *big.Int
	BiddingEnd      *big.Int
	StartPriceInWei *big.Int
	MinIncrement    *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterPublicAuctionCreatedSuccessful is a free log retrieval operation binding the contract event 0x434b2123b16b34f2926e4eb774145d073f6d34a8caa5b3eca34237ea2ce835a3.
//
// Solidity: event PublicAuctionCreatedSuccessful(address assetOwner, address nftAddress, bytes32 publicAuctionId, uint256 assetId, uint256 biddingEnd, uint256 startPriceInWei, uint256 minIncrement)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) FilterPublicAuctionCreatedSuccessful(opts *bind.FilterOpts) (*PublicAuctionMarketplacePublicAuctionCreatedSuccessfulIterator, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.FilterLogs(opts, "PublicAuctionCreatedSuccessful")
	if err != nil {
		return nil, err
	}
	return &PublicAuctionMarketplacePublicAuctionCreatedSuccessfulIterator{contract: _PublicAuctionMarketplace.contract, event: "PublicAuctionCreatedSuccessful", logs: logs, sub: sub}, nil
}

// WatchPublicAuctionCreatedSuccessful is a free log subscription operation binding the contract event 0x434b2123b16b34f2926e4eb774145d073f6d34a8caa5b3eca34237ea2ce835a3.
//
// Solidity: event PublicAuctionCreatedSuccessful(address assetOwner, address nftAddress, bytes32 publicAuctionId, uint256 assetId, uint256 biddingEnd, uint256 startPriceInWei, uint256 minIncrement)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) WatchPublicAuctionCreatedSuccessful(opts *bind.WatchOpts, sink chan<- *PublicAuctionMarketplacePublicAuctionCreatedSuccessful) (event.Subscription, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.WatchLogs(opts, "PublicAuctionCreatedSuccessful")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicAuctionMarketplacePublicAuctionCreatedSuccessful)
				if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "PublicAuctionCreatedSuccessful", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePublicAuctionCreatedSuccessful is a log parse operation binding the contract event 0x434b2123b16b34f2926e4eb774145d073f6d34a8caa5b3eca34237ea2ce835a3.
//
// Solidity: event PublicAuctionCreatedSuccessful(address assetOwner, address nftAddress, bytes32 publicAuctionId, uint256 assetId, uint256 biddingEnd, uint256 startPriceInWei, uint256 minIncrement)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) ParsePublicAuctionCreatedSuccessful(log types.Log) (*PublicAuctionMarketplacePublicAuctionCreatedSuccessful, error) {
	event := new(PublicAuctionMarketplacePublicAuctionCreatedSuccessful)
	if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "PublicAuctionCreatedSuccessful", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicAuctionMarketplaceRemovedBlackListIterator is returned from FilterRemovedBlackList and is used to iterate over the raw logs and unpacked data for RemovedBlackList events raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceRemovedBlackListIterator struct {
	Event *PublicAuctionMarketplaceRemovedBlackList // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicAuctionMarketplaceRemovedBlackListIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicAuctionMarketplaceRemovedBlackList)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicAuctionMarketplaceRemovedBlackList)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicAuctionMarketplaceRemovedBlackListIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicAuctionMarketplaceRemovedBlackListIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicAuctionMarketplaceRemovedBlackList represents a RemovedBlackList event raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceRemovedBlackList struct {
	User common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRemovedBlackList is a free log retrieval operation binding the contract event 0xd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c.
//
// Solidity: event RemovedBlackList(address _user)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) FilterRemovedBlackList(opts *bind.FilterOpts) (*PublicAuctionMarketplaceRemovedBlackListIterator, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.FilterLogs(opts, "RemovedBlackList")
	if err != nil {
		return nil, err
	}
	return &PublicAuctionMarketplaceRemovedBlackListIterator{contract: _PublicAuctionMarketplace.contract, event: "RemovedBlackList", logs: logs, sub: sub}, nil
}

// WatchRemovedBlackList is a free log subscription operation binding the contract event 0xd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c.
//
// Solidity: event RemovedBlackList(address _user)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) WatchRemovedBlackList(opts *bind.WatchOpts, sink chan<- *PublicAuctionMarketplaceRemovedBlackList) (event.Subscription, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.WatchLogs(opts, "RemovedBlackList")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicAuctionMarketplaceRemovedBlackList)
				if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "RemovedBlackList", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemovedBlackList is a log parse operation binding the contract event 0xd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c.
//
// Solidity: event RemovedBlackList(address _user)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) ParseRemovedBlackList(log types.Log) (*PublicAuctionMarketplaceRemovedBlackList, error) {
	event := new(PublicAuctionMarketplaceRemovedBlackList)
	if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "RemovedBlackList", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicAuctionMarketplaceRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceRoleAdminChangedIterator struct {
	Event *PublicAuctionMarketplaceRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicAuctionMarketplaceRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicAuctionMarketplaceRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicAuctionMarketplaceRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicAuctionMarketplaceRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicAuctionMarketplaceRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicAuctionMarketplaceRoleAdminChanged represents a RoleAdminChanged event raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*PublicAuctionMarketplaceRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _PublicAuctionMarketplace.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &PublicAuctionMarketplaceRoleAdminChangedIterator{contract: _PublicAuctionMarketplace.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *PublicAuctionMarketplaceRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _PublicAuctionMarketplace.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicAuctionMarketplaceRoleAdminChanged)
				if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) ParseRoleAdminChanged(log types.Log) (*PublicAuctionMarketplaceRoleAdminChanged, error) {
	event := new(PublicAuctionMarketplaceRoleAdminChanged)
	if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicAuctionMarketplaceRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceRoleGrantedIterator struct {
	Event *PublicAuctionMarketplaceRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicAuctionMarketplaceRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicAuctionMarketplaceRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicAuctionMarketplaceRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicAuctionMarketplaceRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicAuctionMarketplaceRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicAuctionMarketplaceRoleGranted represents a RoleGranted event raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*PublicAuctionMarketplaceRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _PublicAuctionMarketplace.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &PublicAuctionMarketplaceRoleGrantedIterator{contract: _PublicAuctionMarketplace.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *PublicAuctionMarketplaceRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _PublicAuctionMarketplace.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicAuctionMarketplaceRoleGranted)
				if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) ParseRoleGranted(log types.Log) (*PublicAuctionMarketplaceRoleGranted, error) {
	event := new(PublicAuctionMarketplaceRoleGranted)
	if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicAuctionMarketplaceRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceRoleRevokedIterator struct {
	Event *PublicAuctionMarketplaceRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicAuctionMarketplaceRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicAuctionMarketplaceRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicAuctionMarketplaceRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicAuctionMarketplaceRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicAuctionMarketplaceRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicAuctionMarketplaceRoleRevoked represents a RoleRevoked event raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*PublicAuctionMarketplaceRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _PublicAuctionMarketplace.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &PublicAuctionMarketplaceRoleRevokedIterator{contract: _PublicAuctionMarketplace.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *PublicAuctionMarketplaceRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _PublicAuctionMarketplace.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicAuctionMarketplaceRoleRevoked)
				if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) ParseRoleRevoked(log types.Log) (*PublicAuctionMarketplaceRoleRevoked, error) {
	event := new(PublicAuctionMarketplaceRoleRevoked)
	if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicAuctionMarketplaceUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceUnpausedIterator struct {
	Event *PublicAuctionMarketplaceUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicAuctionMarketplaceUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicAuctionMarketplaceUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicAuctionMarketplaceUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicAuctionMarketplaceUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicAuctionMarketplaceUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicAuctionMarketplaceUnpaused represents a Unpaused event raised by the PublicAuctionMarketplace contract.
type PublicAuctionMarketplaceUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) FilterUnpaused(opts *bind.FilterOpts) (*PublicAuctionMarketplaceUnpausedIterator, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &PublicAuctionMarketplaceUnpausedIterator{contract: _PublicAuctionMarketplace.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *PublicAuctionMarketplaceUnpaused) (event.Subscription, error) {

	logs, sub, err := _PublicAuctionMarketplace.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicAuctionMarketplaceUnpaused)
				if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_PublicAuctionMarketplace *PublicAuctionMarketplaceFilterer) ParseUnpaused(log types.Log) (*PublicAuctionMarketplaceUnpaused, error) {
	event := new(PublicAuctionMarketplaceUnpaused)
	if err := _PublicAuctionMarketplace.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
