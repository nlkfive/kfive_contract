// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package Bething

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BethingMetaData contains all meta data concerning the Bething contract.
var BethingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acceptedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"raceList\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyReceived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BetFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RaceNotExisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TooEarly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TooLate\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"}],\"name\":\"AcceptTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betValue\",\"type\":\"uint256\"}],\"name\":\"BetSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ClaimCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimValue\",\"type\":\"uint256\"}],\"name\":\"ClaimSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundValue\",\"type\":\"uint256\"}],\"name\":\"FundSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"race\",\"type\":\"address\"}],\"name\":\"RaceListUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_acceptedToken\",\"outputs\":[{\"internalType\":\"contractIBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_raceList\",\"outputs\":[{\"internalType\":\"contractIRaceList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"betValue\",\"type\":\"uint256\"}],\"name\":\"bet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fundValue\",\"type\":\"uint256\"}],\"name\":\"fundRace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claimCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"totalSlotBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userSlotBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"}],\"name\":\"totalRaceBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"getSlotPosition\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"raceList\",\"type\":\"address\"}],\"name\":\"updateRaceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"}],\"name\":\"updateAcceptTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"destroySmartContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620048663803806200486683398181016040528101906200003791906200074f565b620000576200004b6200027960201b60201c565b6200028160201b60201c565b6000600260146101000a81548160ff021916908315150217905550620000966000801b6200008a6200027960201b60201c565b6200034760201b60201c565b620000d77fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775620000cb6200027960201b60201c565b6200034760201b60201c565b620001297f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756200035d60201b60201c565b620001558273ffffffffffffffffffffffffffffffffffffffff16620003c060201b62001e1f1760201c565b6200018c576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620001b88173ffffffffffffffffffffffffffffffffffffffff16620003c060201b62001e1f1760201c565b620001ef576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620007de565b600033905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620003598282620003d360201b60201c565b5050565b60006200037083620004a160201b60201c565b905081600080858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b600080823b905060008111915050919050565b620003ea8282620004c060201b62001e321760201c565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758214806200041b57506000801b82145b156200049d57620004587f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a82620004c060201b62001e321760201c565b6000801b8214156200049c576200049b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582620004c060201b62001e321760201c565b5b5b5050565b6000806000838152602001908152602001600020600101549050919050565b620004d782826200050860201b62001e661760201c565b620005038160016000858152602001908152602001600020620005f960201b62001f461790919060201c565b505050565b6200051a82826200063160201b60201c565b620005f557600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506200059a6200027960201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600062000629836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6200069b60201b60201c565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000620006af83836200071560201b60201c565b6200070a5782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506200070f565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000815190506200074981620007c4565b92915050565b600080604083850312156200076357600080fd5b6000620007738582860162000738565b9250506020620007868582860162000738565b9150509250929050565b60006200079d82620007a4565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620007cf8162000790565b8114620007db57600080fd5b50565b61407880620007ee6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c8063715018a61161010f578063b4a2fad0116100a2578063d7c4993811610071578063d7c4993814610568578063e63ab1e914610584578063e740582a146105a2578063f2fde38b146105d2576101e5565b8063b4a2fad0146104d0578063ca15c873146104ec578063d0b57c691461051c578063d547741f1461054c576101e5565b80639010d07c116100de5780639010d07c1461043657806391d148541461046657806394fc859b14610496578063a217fddf146104b2576101e5565b8063715018a6146103e657806375b238fc146103f05780638456cb591461040e5780638da5cb5b14610418576101e5565b806339df43ff116101875780635c975abb116101565780635c975abb146103725780635cce2b421461039057806363f44968146103ac5780636c76f620146103c8576101e5565b806339df43ff146102fe5780633f4ba83a1461031a5780634e5b3c7c146103245780635612174914610342576101e5565b80632e279801116101c35780632e2798011461027a5780632ebe4493146102aa5780632f2ff15d146102c657806336568abe146102e2576101e5565b806301ffc9a7146101ea5780632123c15e1461021a578063248a9ca31461024a575b600080fd5b61020460048036038101906101ff9190613476565b6105ee565b6040516102119190613818565b60405180910390f35b610234600480360381019061022f9190613386565b610668565b60405161024191906139c6565b60405180910390f35b610264600480360381019061025f9190613386565b610685565b6040516102719190613833565b60405180910390f35b610294600480360381019061028f9190613427565b6106a4565b6040516102a191906139c6565b60405180910390f35b6102c460048036038101906102bf91906133eb565b610711565b005b6102e060048036038101906102db91906133af565b6109ca565b005b6102fc60048036038101906102f791906133af565b6109f3565b005b61031860048036038101906103139190613334565b610a76565b005b610322610c6a565b005b61032c610ca7565b60405161033991906138ae565b60405180910390f35b61035c600480360381019061035791906133eb565b610ccd565b60405161036991906139c6565b60405180910390f35b61037a610e04565b6040516103879190613818565b60405180910390f35b6103aa60048036038101906103a591906133af565b610e1b565b005b6103c660048036038101906103c191906133eb565b61109d565b005b6103d061137a565b6040516103dd91906138c9565b60405180910390f35b6103ee6113a0565b005b6103f8611428565b6040516104059190613833565b60405180910390f35b61041661144c565b005b610420611489565b60405161042d9190613774565b60405180910390f35b610450600480360381019061044b91906133eb565b6114b3565b60405161045d9190613774565b60405180910390f35b610480600480360381019061047b91906133af565b6114e2565b60405161048d9190613818565b60405180910390f35b6104b060048036038101906104ab91906134f1565b61154c565b005b6104ba61198b565b6040516104c79190613833565b60405180910390f35b6104ea60048036038101906104e5919061330b565b611992565b005b61050660048036038101906105019190613386565b611a88565b60405161051391906139c6565b60405180910390f35b610536600480360381019061053191906133eb565b611aac565b6040516105439190613a18565b60405180910390f35b610566600480360381019061056191906133af565b611ba9565b005b610582600480360381019061057d919061330b565b611bd2565b005b61058c611cc8565b6040516105999190613833565b60405180910390f35b6105bc60048036038101906105b791906133eb565b611cec565b6040516105c991906139c6565b60405180910390f35b6105ec60048036038101906105e7919061330b565b611d1b565b005b60007fdeefbdd6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610661575061066082611f76565b5b9050919050565b600060076000838152602001908152602001600020549050919050565b6000806000838152602001908152602001600020600101549050919050565b600060056000858152602001908152602001600020600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509392505050565b610719610e04565b15610759576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075090613966565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f70125db846040518263ffffffff1660e01b81526004016107b69190613833565b60c06040518083038186803b1580156107ce57600080fd5b505afa1580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610806919061349f565b9050600081606001511415610847576040517fe2a9931a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108548160600151611ff0565b6108618160800151612037565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd6108a761207e565b30856040518463ffffffff1660e01b81526004016108c7939291906137b8565b602060405180830381600087803b1580156108e157600080fd5b505af11580156108f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610919919061335d565b61094f576040517f63955a1a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61097582600760008681526020019081526020016000205461208690919063ffffffff16565b60076000858152602001908152602001600020819055507f18828fa7a168b0db08e3e72ef21348f4c4fa1ee1b46803878b1195794aaad4c383836040516109bd92919061384e565b60405180910390a1505050565b6109d382610685565b6109e4816109df61207e565b61209c565b6109ee8383612139565b505050565b6109fb61207e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5f906139a6565b60405180910390fd5b610a7282826121dd565b5050565b610a7e61207e565b73ffffffffffffffffffffffffffffffffffffffff16610a9c611489565b73ffffffffffffffffffffffffffffffffffffffff1614610af2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae990613986565b60405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b4f9190613774565b60206040518083038186803b158015610b6757600080fd5b505afa158015610b7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9f91906134c8565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610bfe92919061378f565b602060405180830381600087803b158015610c1857600080fd5b505af1158015610c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c50919061335d565b508173ffffffffffffffffffffffffffffffffffffffff16ff5b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610c9c81610c9761207e565b61209c565b610ca4612281565b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f70125db856040518263ffffffff1660e01b8152600401610d2b9190613833565b60c06040518083038186803b158015610d4357600080fd5b505afa158015610d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7b919061349f565b9050600081606001511415610dbc576040517fe2a9931a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610dc98160800151611ff0565b6000610de38583604001518460a001518560200151612323565b9050610dfa8585846020015185600001518561260a565b9250505092915050565b6000600260149054906101000a900460ff16905090565b6008600083815260200190815260200160002060009054906101000a900460ff1615610e73576040517fe4136bc400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f70125db846040518263ffffffff1660e01b8152600401610ed09190613833565b60c06040518083038186803b158015610ee857600080fd5b505afa158015610efc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f20919061349f565b9050600081606001511415610f61576040517fe2a9931a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f6e8160800151611ff0565b6000610f7e848360000151612734565b905060016008600086815260200190815260200160002060006101000a81548160ff021916908315150217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b81526004016110099291906137ef565b602060405180830381600087803b15801561102357600080fd5b505af1158015611037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105b919061335d565b507f94fe36569bb216f6cb564fee8983d035c7cacba5679023a4ccabe33fdf6d4d8884828560405161108f93929190613877565b60405180910390a150505050565b6110a5610e04565b156110e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110dc90613966565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f70125db846040518263ffffffff1660e01b81526004016111429190613833565b60c06040518083038186803b15801561115a57600080fd5b505afa15801561116e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611192919061349f565b90506000816060015114156111d3576040517fe2a9931a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111e08160800151611ff0565b60006111fa8483604001518460a001518560200151612323565b905060006112138585856020015186600001518661260a565b90506000600560008781526020019081526020016000206000868152602001908152602001600020600061124561207e565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6112c961207e565b836040518363ffffffff1660e01b81526004016112e79291906137ef565b602060405180830381600087803b15801561130157600080fd5b505af1158015611315573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611339919061335d565b507f78d224c5b360f08891a0d6c82ec1fceea8a4e5b39dc51c1373ddfaa13d848df0858260405161136b92919061384e565b60405180910390a15050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6113a861207e565b73ffffffffffffffffffffffffffffffffffffffff166113c6611489565b73ffffffffffffffffffffffffffffffffffffffff161461141c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141390613986565b60405180910390fd5b611426600061276d565b565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61147e8161147961207e565b61209c565b611486612833565b50565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006114da82600160008681526020019081526020016000206128d690919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611554610e04565b15611594576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158b90613966565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f70125db846040518263ffffffff1660e01b81526004016115f19190613833565b60c06040518083038186803b15801561160957600080fd5b505afa15801561161d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611641919061349f565b9050600081606001511415611682576040517fe2a9931a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806040015184106116bf576040517f1258e44300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6116cc8160600151611ff0565b6116d98160800151612037565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd61171f61207e565b30856040518463ffffffff1660e01b815260040161173f939291906137b8565b602060405180830381600087803b15801561175957600080fd5b505af115801561176d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611791919061335d565b6117c7576040517ffc70bad400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118428260056000868152602001908152602001600020600087815260200190815260200160002060006117f961207e565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461208690919063ffffffff16565b600560008581526020019081526020016000206000868152602001908152602001600020600061187061207e565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118e5826006600086815260200190815260200160002060008781526020019081526020016000205461208690919063ffffffff16565b6006600085815260200190815260200160002060008681526020019081526020016000208190555061193382600760008681526020019081526020016000205461208690919063ffffffff16565b60076000858152602001908152602001600020819055507f90340911801212a3d95efe0dca9cdbd74549020af8cf33fc0861b74d82fe6dbd84848460405161197d939291906139e1565b60405180910390a150505050565b6000801b81565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756119c4816119bf61207e565b61209c565b6119cc610e04565b15611a0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0390613966565b60405180910390fd5b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f44c3b193081dd50818bc919dc1963ae03762174c9a89af5fbbce54ee71a13f9782604051611a7c9190613774565b60405180910390a15050565b6000611aa5600160008481526020019081526020016000206128f0565b9050919050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f70125db856040518263ffffffff1660e01b8152600401611b0a9190613833565b60c06040518083038186803b158015611b2257600080fd5b505afa158015611b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5a919061349f565b90508060a001518360208110611b99577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b60f81c91505092915050565b611bb282610685565b611bc381611bbe61207e565b61209c565b611bcd83836121dd565b505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611c0481611bff61207e565b61209c565b611c0c610e04565b15611c4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4390613966565b60405180910390fd5b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f7a659342c2b03e1c14729e3f1c86f414756d13bd8ff0636713cc22246182b42d82604051611cbc9190613774565b60405180910390a15050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b600060066000848152602001908152602001600020600083815260200190815260200160002054905092915050565b611d2361207e565b73ffffffffffffffffffffffffffffffffffffffff16611d41611489565b73ffffffffffffffffffffffffffffffffffffffff1614611d97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8e90613986565b60405180910390fd5b611dc17fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582612139565b611dce6000801b82612139565b611dff7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611dfa611489565b6121dd565b611e136000801b611e0e611489565b6121dd565b611e1c81612905565b50565b600080823b905060008111915050919050565b611e3c8282611e66565b611e618160016000858152602001908152602001600020611f4690919063ffffffff16565b505050565b611e7082826114e2565b611f4257600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611ee761207e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000611f6e836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6129fd565b905092915050565b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611fe95750611fe882612a6d565b5b9050919050565b80421161203457806040517f2a35a32400000000000000000000000000000000000000000000000000000000815260040161202b91906139c6565b60405180910390fd5b50565b80421061207b57806040517f691e568200000000000000000000000000000000000000000000000000000000815260040161207291906139c6565b60405180910390fd5b50565b600033905090565b600081836120949190613a7f565b905092915050565b6120a682826114e2565b612135576120cb8173ffffffffffffffffffffffffffffffffffffffff166014612ae7565b6120d98360001c6020612ae7565b6040516020016120ea92919061373a565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212c91906138e4565b60405180910390fd5b5050565b6121438282611e32565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582148061217357506000801b82145b156121d9576121a27f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a82611e32565b6000801b8214156121d8576121d77fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582611e32565b5b5b5050565b6121e78282612de1565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582148061221757506000801b82145b1561227d576122467f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a82612de1565b6000801b82141561227c5761227b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582611e32565b5b5b5050565b612289610e04565b6122c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122bf90613926565b60405180910390fd5b6000600260146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61230c61207e565b6040516123199190613774565b60405180910390a1565b600080600090505b8481101561260157600160f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916848260208110612393577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156124365761242f612420620f42406124128661240488600660008e8152602001908152602001600020600089815260200190815260200160002054612e1590919063ffffffff16565b612e1590919063ffffffff16565b612e2b90919063ffffffff16565b8361208690919063ffffffff16565b91506125ee565b600260f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916848260208110612496577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156125265761251f6125106103e861250286600660008c8152602001908152602001600020600087815260200190815260200160002054612e1590919063ffffffff16565b612e2b90919063ffffffff16565b8361208690919063ffffffff16565b91506125ed565b600360f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916848260208110612586577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156125ec576125e9600660008881526020019081526020016000206000838152602001908152602001600020548361208690919063ffffffff16565b91505b5b5b80806125f990613d3d565b91505061232b565b50949350505050565b6000806126178787611aac565b60ff16905060008111801561262d575060038111155b1561272a576126db836126cd6126438a88612734565b61264c8b610668565b6126569190613b60565b600560008c815260200190815260200160002060008b8152602001908152602001600020600061268461207e565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e1590919063ffffffff16565b612e2b90919063ffffffff16565b91506000600390505b81811115612728576127136103e86127058886612e1590919063ffffffff16565b612e2b90919063ffffffff16565b9250808061272090613ce2565b9150506126e4565b505b5095945050505050565b60006127656103e86127578461274987610668565b612e1590919063ffffffff16565b612e2b90919063ffffffff16565b905092915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61283b610e04565b1561287b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161287290613966565b60405180910390fd5b6001600260146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586128bf61207e565b6040516128cc9190613774565b60405180910390a1565b60006128e58360000183612e41565b60001c905092915050565b60006128fe82600001612e92565b9050919050565b61290d61207e565b73ffffffffffffffffffffffffffffffffffffffff1661292b611489565b73ffffffffffffffffffffffffffffffffffffffff1614612981576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161297890613986565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156129f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129e890613946565b60405180910390fd5b6129fa8161276d565b50565b6000612a098383612ea3565b612a62578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612a67565b600090505b92915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612ae05750612adf82612ec6565b5b9050919050565b606060006002836002612afa9190613b06565b612b049190613a7f565b67ffffffffffffffff811115612b43577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612b755781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612bd3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612c5d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612c9d9190613b06565b612ca79190613a7f565b90505b6001811115612d93577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612d0f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110612d4c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612d8c90613ce2565b9050612caa565b5060008414612dd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dce90613906565b60405180910390fd5b8091505092915050565b612deb8282612f30565b612e10816001600085815260200190815260200160002061301190919063ffffffff16565b505050565b60008183612e239190613b06565b905092915050565b60008183612e399190613ad5565b905092915050565b6000826000018281548110612e7f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b612f3a82826114e2565b1561300d57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612fb261207e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000613039836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613041565b905092915050565b600080836001016000848152602001908152602001600020549050600081146131bb5760006001826130739190613b60565b905060006001866000018054905061308b9190613b60565b90508181146131465760008660000182815481106130d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490508087600001848154811061311c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480613180577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506131c1565b60009150505b92915050565b6000813590506131d681613fb8565b92915050565b6000813590506131eb81613fcf565b92915050565b60008151905061320081613fe6565b92915050565b60008135905061321581613ffd565b92915050565b60008151905061322a81613ffd565b92915050565b60008135905061323f81614014565b92915050565b600060c0828403121561325757600080fd5b61326160c0613a33565b90506000613271848285016132f6565b6000830152506020613285848285016132f6565b6020830152506040613299848285016132f6565b60408301525060606132ad848285016132f6565b60608301525060806132c1848285016132f6565b60808301525060a06132d58482850161321b565b60a08301525092915050565b6000813590506132f08161402b565b92915050565b6000815190506133058161402b565b92915050565b60006020828403121561331d57600080fd5b600061332b848285016131c7565b91505092915050565b60006020828403121561334657600080fd5b6000613354848285016131dc565b91505092915050565b60006020828403121561336f57600080fd5b600061337d848285016131f1565b91505092915050565b60006020828403121561339857600080fd5b60006133a684828501613206565b91505092915050565b600080604083850312156133c257600080fd5b60006133d085828601613206565b92505060206133e1858286016131c7565b9150509250929050565b600080604083850312156133fe57600080fd5b600061340c85828601613206565b925050602061341d858286016132e1565b9150509250929050565b60008060006060848603121561343c57600080fd5b600061344a86828701613206565b935050602061345b868287016132e1565b925050604061346c868287016131c7565b9150509250925092565b60006020828403121561348857600080fd5b600061349684828501613230565b91505092915050565b600060c082840312156134b157600080fd5b60006134bf84828501613245565b91505092915050565b6000602082840312156134da57600080fd5b60006134e8848285016132f6565b91505092915050565b60008060006060848603121561350657600080fd5b6000613514868287016132e1565b935050602061352586828701613206565b9250506040613536868287016132e1565b9150509250925092565b61354981613c31565b82525050565b61355881613b94565b82525050565b61356781613bb8565b82525050565b61357681613bc4565b82525050565b61358581613c43565b82525050565b61359481613c67565b82525050565b60006135a582613a58565b6135af8185613a63565b93506135bf818560208601613caf565b6135c881613e13565b840191505092915050565b60006135de82613a58565b6135e88185613a74565b93506135f8818560208601613caf565b80840191505092915050565b6000613611602083613a63565b915061361c82613e24565b602082019050919050565b6000613634601483613a63565b915061363f82613e4d565b602082019050919050565b6000613657602683613a63565b915061366282613e76565b604082019050919050565b600061367a601083613a63565b915061368582613ec5565b602082019050919050565b600061369d602083613a63565b91506136a882613eee565b602082019050919050565b60006136c0601783613a74565b91506136cb82613f17565b601782019050919050565b60006136e3601183613a74565b91506136ee82613f40565b601182019050919050565b6000613706602f83613a63565b915061371182613f69565b604082019050919050565b61372581613c1a565b82525050565b61373481613c24565b82525050565b6000613745826136b3565b915061375182856135d3565b915061375c826136d6565b915061376882846135d3565b91508190509392505050565b6000602082019050613789600083018461354f565b92915050565b60006040820190506137a46000830185613540565b6137b1602083018461371c565b9392505050565b60006060820190506137cd600083018661354f565b6137da602083018561354f565b6137e7604083018461371c565b949350505050565b6000604082019050613804600083018561354f565b613811602083018461371c565b9392505050565b600060208201905061382d600083018461355e565b92915050565b6000602082019050613848600083018461356d565b92915050565b6000604082019050613863600083018561356d565b613870602083018461371c565b9392505050565b600060608201905061388c600083018661356d565b613899602083018561371c565b6138a6604083018461354f565b949350505050565b60006020820190506138c3600083018461357c565b92915050565b60006020820190506138de600083018461358b565b92915050565b600060208201905081810360008301526138fe818461359a565b905092915050565b6000602082019050818103600083015261391f81613604565b9050919050565b6000602082019050818103600083015261393f81613627565b9050919050565b6000602082019050818103600083015261395f8161364a565b9050919050565b6000602082019050818103600083015261397f8161366d565b9050919050565b6000602082019050818103600083015261399f81613690565b9050919050565b600060208201905081810360008301526139bf816136f9565b9050919050565b60006020820190506139db600083018461371c565b92915050565b60006060820190506139f6600083018661371c565b613a03602083018561356d565b613a10604083018461371c565b949350505050565b6000602082019050613a2d600083018461372b565b92915050565b6000613a3d613a4e565b9050613a498282613d0c565b919050565b6000604051905090565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000613a8a82613c1a565b9150613a9583613c1a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613aca57613ac9613d86565b5b828201905092915050565b6000613ae082613c1a565b9150613aeb83613c1a565b925082613afb57613afa613db5565b5b828204905092915050565b6000613b1182613c1a565b9150613b1c83613c1a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613b5557613b54613d86565b5b828202905092915050565b6000613b6b82613c1a565b9150613b7683613c1a565b925082821015613b8957613b88613d86565b5b828203905092915050565b6000613b9f82613bfa565b9050919050565b6000613bb182613bfa565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000613c3c82613c8b565b9050919050565b6000613c4e82613c55565b9050919050565b6000613c6082613bfa565b9050919050565b6000613c7282613c79565b9050919050565b6000613c8482613bfa565b9050919050565b6000613c9682613c9d565b9050919050565b6000613ca882613bfa565b9050919050565b60005b83811015613ccd578082015181840152602081019050613cb2565b83811115613cdc576000848401525b50505050565b6000613ced82613c1a565b91506000821415613d0157613d00613d86565b5b600182039050919050565b613d1582613e13565b810181811067ffffffffffffffff82111715613d3457613d33613de4565b5b80604052505050565b6000613d4882613c1a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613d7b57613d7a613d86565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b613fc181613b94565b8114613fcc57600080fd5b50565b613fd881613ba6565b8114613fe357600080fd5b50565b613fef81613bb8565b8114613ffa57600080fd5b50565b61400681613bc4565b811461401157600080fd5b50565b61401d81613bce565b811461402857600080fd5b50565b61403481613c1a565b811461403f57600080fd5b5056fea2646970667358221220a8aeaea60862c50dea78e94bf13c2b85b2f4329b8534e180fc1705538d84b4f564736f6c63430008040033",
}

// BethingABI is the input ABI used to generate the binding from.
// Deprecated: Use BethingMetaData.ABI instead.
var BethingABI = BethingMetaData.ABI

// BethingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BethingMetaData.Bin instead.
var BethingBin = BethingMetaData.Bin

// DeployBething deploys a new Ethereum contract, binding an instance of Bething to it.
func DeployBething(auth *bind.TransactOpts, backend bind.ContractBackend, acceptedToken common.Address, raceList common.Address) (common.Address, *types.Transaction, *Bething, error) {
	parsed, err := BethingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BethingBin), backend, acceptedToken, raceList)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bething{BethingCaller: BethingCaller{contract: contract}, BethingTransactor: BethingTransactor{contract: contract}, BethingFilterer: BethingFilterer{contract: contract}}, nil
}

// Bething is an auto generated Go binding around an Ethereum contract.
type Bething struct {
	BethingCaller     // Read-only binding to the contract
	BethingTransactor // Write-only binding to the contract
	BethingFilterer   // Log filterer for contract events
}

// BethingCaller is an auto generated read-only Go binding around an Ethereum contract.
type BethingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BethingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BethingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BethingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BethingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BethingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BethingSession struct {
	Contract     *Bething          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BethingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BethingCallerSession struct {
	Contract *BethingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// BethingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BethingTransactorSession struct {
	Contract     *BethingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// BethingRaw is an auto generated low-level Go binding around an Ethereum contract.
type BethingRaw struct {
	Contract *Bething // Generic contract binding to access the raw methods on
}

// BethingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BethingCallerRaw struct {
	Contract *BethingCaller // Generic read-only contract binding to access the raw methods on
}

// BethingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BethingTransactorRaw struct {
	Contract *BethingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBething creates a new instance of Bething, bound to a specific deployed contract.
func NewBething(address common.Address, backend bind.ContractBackend) (*Bething, error) {
	contract, err := bindBething(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bething{BethingCaller: BethingCaller{contract: contract}, BethingTransactor: BethingTransactor{contract: contract}, BethingFilterer: BethingFilterer{contract: contract}}, nil
}

// NewBethingCaller creates a new read-only instance of Bething, bound to a specific deployed contract.
func NewBethingCaller(address common.Address, caller bind.ContractCaller) (*BethingCaller, error) {
	contract, err := bindBething(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BethingCaller{contract: contract}, nil
}

// NewBethingTransactor creates a new write-only instance of Bething, bound to a specific deployed contract.
func NewBethingTransactor(address common.Address, transactor bind.ContractTransactor) (*BethingTransactor, error) {
	contract, err := bindBething(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BethingTransactor{contract: contract}, nil
}

// NewBethingFilterer creates a new log filterer instance of Bething, bound to a specific deployed contract.
func NewBethingFilterer(address common.Address, filterer bind.ContractFilterer) (*BethingFilterer, error) {
	contract, err := bindBething(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BethingFilterer{contract: contract}, nil
}

// bindBething binds a generic wrapper to an already deployed contract.
func bindBething(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BethingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bething *BethingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bething.Contract.BethingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bething *BethingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bething.Contract.BethingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bething *BethingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bething.Contract.BethingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bething *BethingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bething.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bething *BethingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bething.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bething *BethingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bething.Contract.contract.Transact(opts, method, params...)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_Bething *BethingCaller) ADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bething.contract.Call(opts, &out, "ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_Bething *BethingSession) ADMINROLE() ([32]byte, error) {
	return _Bething.Contract.ADMINROLE(&_Bething.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_Bething *BethingCallerSession) ADMINROLE() ([32]byte, error) {
	return _Bething.Contract.ADMINROLE(&_Bething.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Bething *BethingCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bething.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Bething *BethingSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Bething.Contract.DEFAULTADMINROLE(&_Bething.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Bething *BethingCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Bething.Contract.DEFAULTADMINROLE(&_Bething.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_Bething *BethingCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bething.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_Bething *BethingSession) PAUSERROLE() ([32]byte, error) {
	return _Bething.Contract.PAUSERROLE(&_Bething.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_Bething *BethingCallerSession) PAUSERROLE() ([32]byte, error) {
	return _Bething.Contract.PAUSERROLE(&_Bething.CallOpts)
}

// AcceptedToken is a free data retrieval call binding the contract method 0x4e5b3c7c.
//
// Solidity: function _acceptedToken() view returns(address)
func (_Bething *BethingCaller) AcceptedToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bething.contract.Call(opts, &out, "_acceptedToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AcceptedToken is a free data retrieval call binding the contract method 0x4e5b3c7c.
//
// Solidity: function _acceptedToken() view returns(address)
func (_Bething *BethingSession) AcceptedToken() (common.Address, error) {
	return _Bething.Contract.AcceptedToken(&_Bething.CallOpts)
}

// AcceptedToken is a free data retrieval call binding the contract method 0x4e5b3c7c.
//
// Solidity: function _acceptedToken() view returns(address)
func (_Bething *BethingCallerSession) AcceptedToken() (common.Address, error) {
	return _Bething.Contract.AcceptedToken(&_Bething.CallOpts)
}

// RaceList is a free data retrieval call binding the contract method 0x6c76f620.
//
// Solidity: function _raceList() view returns(address)
func (_Bething *BethingCaller) RaceList(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bething.contract.Call(opts, &out, "_raceList")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RaceList is a free data retrieval call binding the contract method 0x6c76f620.
//
// Solidity: function _raceList() view returns(address)
func (_Bething *BethingSession) RaceList() (common.Address, error) {
	return _Bething.Contract.RaceList(&_Bething.CallOpts)
}

// RaceList is a free data retrieval call binding the contract method 0x6c76f620.
//
// Solidity: function _raceList() view returns(address)
func (_Bething *BethingCallerSession) RaceList() (common.Address, error) {
	return _Bething.Contract.RaceList(&_Bething.CallOpts)
}

// CheckReward is a free data retrieval call binding the contract method 0x56121749.
//
// Solidity: function checkReward(bytes32 raceId, uint256 slotId) view returns(uint256 reward)
func (_Bething *BethingCaller) CheckReward(opts *bind.CallOpts, raceId [32]byte, slotId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Bething.contract.Call(opts, &out, "checkReward", raceId, slotId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CheckReward is a free data retrieval call binding the contract method 0x56121749.
//
// Solidity: function checkReward(bytes32 raceId, uint256 slotId) view returns(uint256 reward)
func (_Bething *BethingSession) CheckReward(raceId [32]byte, slotId *big.Int) (*big.Int, error) {
	return _Bething.Contract.CheckReward(&_Bething.CallOpts, raceId, slotId)
}

// CheckReward is a free data retrieval call binding the contract method 0x56121749.
//
// Solidity: function checkReward(bytes32 raceId, uint256 slotId) view returns(uint256 reward)
func (_Bething *BethingCallerSession) CheckReward(raceId [32]byte, slotId *big.Int) (*big.Int, error) {
	return _Bething.Contract.CheckReward(&_Bething.CallOpts, raceId, slotId)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Bething *BethingCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Bething.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Bething *BethingSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Bething.Contract.GetRoleAdmin(&_Bething.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Bething *BethingCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Bething.Contract.GetRoleAdmin(&_Bething.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Bething *BethingCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Bething.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Bething *BethingSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Bething.Contract.GetRoleMember(&_Bething.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Bething *BethingCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Bething.Contract.GetRoleMember(&_Bething.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Bething *BethingCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Bething.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Bething *BethingSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Bething.Contract.GetRoleMemberCount(&_Bething.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Bething *BethingCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Bething.Contract.GetRoleMemberCount(&_Bething.CallOpts, role)
}

// GetSlotPosition is a free data retrieval call binding the contract method 0xd0b57c69.
//
// Solidity: function getSlotPosition(bytes32 raceId, uint256 slotId) view returns(uint8)
func (_Bething *BethingCaller) GetSlotPosition(opts *bind.CallOpts, raceId [32]byte, slotId *big.Int) (uint8, error) {
	var out []interface{}
	err := _Bething.contract.Call(opts, &out, "getSlotPosition", raceId, slotId)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetSlotPosition is a free data retrieval call binding the contract method 0xd0b57c69.
//
// Solidity: function getSlotPosition(bytes32 raceId, uint256 slotId) view returns(uint8)
func (_Bething *BethingSession) GetSlotPosition(raceId [32]byte, slotId *big.Int) (uint8, error) {
	return _Bething.Contract.GetSlotPosition(&_Bething.CallOpts, raceId, slotId)
}

// GetSlotPosition is a free data retrieval call binding the contract method 0xd0b57c69.
//
// Solidity: function getSlotPosition(bytes32 raceId, uint256 slotId) view returns(uint8)
func (_Bething *BethingCallerSession) GetSlotPosition(raceId [32]byte, slotId *big.Int) (uint8, error) {
	return _Bething.Contract.GetSlotPosition(&_Bething.CallOpts, raceId, slotId)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Bething *BethingCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Bething.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Bething *BethingSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Bething.Contract.HasRole(&_Bething.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Bething *BethingCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Bething.Contract.HasRole(&_Bething.CallOpts, role, account)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bething *BethingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bething.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bething *BethingSession) Owner() (common.Address, error) {
	return _Bething.Contract.Owner(&_Bething.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bething *BethingCallerSession) Owner() (common.Address, error) {
	return _Bething.Contract.Owner(&_Bething.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bething *BethingCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Bething.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bething *BethingSession) Paused() (bool, error) {
	return _Bething.Contract.Paused(&_Bething.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bething *BethingCallerSession) Paused() (bool, error) {
	return _Bething.Contract.Paused(&_Bething.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Bething *BethingCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Bething.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Bething *BethingSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Bething.Contract.SupportsInterface(&_Bething.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Bething *BethingCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Bething.Contract.SupportsInterface(&_Bething.CallOpts, interfaceId)
}

// TotalRaceBet is a free data retrieval call binding the contract method 0x2123c15e.
//
// Solidity: function totalRaceBet(bytes32 raceId) view returns(uint256)
func (_Bething *BethingCaller) TotalRaceBet(opts *bind.CallOpts, raceId [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Bething.contract.Call(opts, &out, "totalRaceBet", raceId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalRaceBet is a free data retrieval call binding the contract method 0x2123c15e.
//
// Solidity: function totalRaceBet(bytes32 raceId) view returns(uint256)
func (_Bething *BethingSession) TotalRaceBet(raceId [32]byte) (*big.Int, error) {
	return _Bething.Contract.TotalRaceBet(&_Bething.CallOpts, raceId)
}

// TotalRaceBet is a free data retrieval call binding the contract method 0x2123c15e.
//
// Solidity: function totalRaceBet(bytes32 raceId) view returns(uint256)
func (_Bething *BethingCallerSession) TotalRaceBet(raceId [32]byte) (*big.Int, error) {
	return _Bething.Contract.TotalRaceBet(&_Bething.CallOpts, raceId)
}

// TotalSlotBet is a free data retrieval call binding the contract method 0xe740582a.
//
// Solidity: function totalSlotBet(bytes32 raceId, uint256 slotId) view returns(uint256)
func (_Bething *BethingCaller) TotalSlotBet(opts *bind.CallOpts, raceId [32]byte, slotId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Bething.contract.Call(opts, &out, "totalSlotBet", raceId, slotId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSlotBet is a free data retrieval call binding the contract method 0xe740582a.
//
// Solidity: function totalSlotBet(bytes32 raceId, uint256 slotId) view returns(uint256)
func (_Bething *BethingSession) TotalSlotBet(raceId [32]byte, slotId *big.Int) (*big.Int, error) {
	return _Bething.Contract.TotalSlotBet(&_Bething.CallOpts, raceId, slotId)
}

// TotalSlotBet is a free data retrieval call binding the contract method 0xe740582a.
//
// Solidity: function totalSlotBet(bytes32 raceId, uint256 slotId) view returns(uint256)
func (_Bething *BethingCallerSession) TotalSlotBet(raceId [32]byte, slotId *big.Int) (*big.Int, error) {
	return _Bething.Contract.TotalSlotBet(&_Bething.CallOpts, raceId, slotId)
}

// UserSlotBet is a free data retrieval call binding the contract method 0x2e279801.
//
// Solidity: function userSlotBet(bytes32 raceId, uint256 slotId, address user) view returns(uint256)
func (_Bething *BethingCaller) UserSlotBet(opts *bind.CallOpts, raceId [32]byte, slotId *big.Int, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bething.contract.Call(opts, &out, "userSlotBet", raceId, slotId, user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UserSlotBet is a free data retrieval call binding the contract method 0x2e279801.
//
// Solidity: function userSlotBet(bytes32 raceId, uint256 slotId, address user) view returns(uint256)
func (_Bething *BethingSession) UserSlotBet(raceId [32]byte, slotId *big.Int, user common.Address) (*big.Int, error) {
	return _Bething.Contract.UserSlotBet(&_Bething.CallOpts, raceId, slotId, user)
}

// UserSlotBet is a free data retrieval call binding the contract method 0x2e279801.
//
// Solidity: function userSlotBet(bytes32 raceId, uint256 slotId, address user) view returns(uint256)
func (_Bething *BethingCallerSession) UserSlotBet(raceId [32]byte, slotId *big.Int, user common.Address) (*big.Int, error) {
	return _Bething.Contract.UserSlotBet(&_Bething.CallOpts, raceId, slotId, user)
}

// Bet is a paid mutator transaction binding the contract method 0x94fc859b.
//
// Solidity: function bet(uint256 slotId, bytes32 raceId, uint256 betValue) returns()
func (_Bething *BethingTransactor) Bet(opts *bind.TransactOpts, slotId *big.Int, raceId [32]byte, betValue *big.Int) (*types.Transaction, error) {
	return _Bething.contract.Transact(opts, "bet", slotId, raceId, betValue)
}

// Bet is a paid mutator transaction binding the contract method 0x94fc859b.
//
// Solidity: function bet(uint256 slotId, bytes32 raceId, uint256 betValue) returns()
func (_Bething *BethingSession) Bet(slotId *big.Int, raceId [32]byte, betValue *big.Int) (*types.Transaction, error) {
	return _Bething.Contract.Bet(&_Bething.TransactOpts, slotId, raceId, betValue)
}

// Bet is a paid mutator transaction binding the contract method 0x94fc859b.
//
// Solidity: function bet(uint256 slotId, bytes32 raceId, uint256 betValue) returns()
func (_Bething *BethingTransactorSession) Bet(slotId *big.Int, raceId [32]byte, betValue *big.Int) (*types.Transaction, error) {
	return _Bething.Contract.Bet(&_Bething.TransactOpts, slotId, raceId, betValue)
}

// Claim is a paid mutator transaction binding the contract method 0x63f44968.
//
// Solidity: function claim(bytes32 raceId, uint256 slotId) returns()
func (_Bething *BethingTransactor) Claim(opts *bind.TransactOpts, raceId [32]byte, slotId *big.Int) (*types.Transaction, error) {
	return _Bething.contract.Transact(opts, "claim", raceId, slotId)
}

// Claim is a paid mutator transaction binding the contract method 0x63f44968.
//
// Solidity: function claim(bytes32 raceId, uint256 slotId) returns()
func (_Bething *BethingSession) Claim(raceId [32]byte, slotId *big.Int) (*types.Transaction, error) {
	return _Bething.Contract.Claim(&_Bething.TransactOpts, raceId, slotId)
}

// Claim is a paid mutator transaction binding the contract method 0x63f44968.
//
// Solidity: function claim(bytes32 raceId, uint256 slotId) returns()
func (_Bething *BethingTransactorSession) Claim(raceId [32]byte, slotId *big.Int) (*types.Transaction, error) {
	return _Bething.Contract.Claim(&_Bething.TransactOpts, raceId, slotId)
}

// ClaimCommission is a paid mutator transaction binding the contract method 0x5cce2b42.
//
// Solidity: function claimCommission(bytes32 raceId, address receiver) returns()
func (_Bething *BethingTransactor) ClaimCommission(opts *bind.TransactOpts, raceId [32]byte, receiver common.Address) (*types.Transaction, error) {
	return _Bething.contract.Transact(opts, "claimCommission", raceId, receiver)
}

// ClaimCommission is a paid mutator transaction binding the contract method 0x5cce2b42.
//
// Solidity: function claimCommission(bytes32 raceId, address receiver) returns()
func (_Bething *BethingSession) ClaimCommission(raceId [32]byte, receiver common.Address) (*types.Transaction, error) {
	return _Bething.Contract.ClaimCommission(&_Bething.TransactOpts, raceId, receiver)
}

// ClaimCommission is a paid mutator transaction binding the contract method 0x5cce2b42.
//
// Solidity: function claimCommission(bytes32 raceId, address receiver) returns()
func (_Bething *BethingTransactorSession) ClaimCommission(raceId [32]byte, receiver common.Address) (*types.Transaction, error) {
	return _Bething.Contract.ClaimCommission(&_Bething.TransactOpts, raceId, receiver)
}

// DestroySmartContract is a paid mutator transaction binding the contract method 0x39df43ff.
//
// Solidity: function destroySmartContract(address _to) returns()
func (_Bething *BethingTransactor) DestroySmartContract(opts *bind.TransactOpts, _to common.Address) (*types.Transaction, error) {
	return _Bething.contract.Transact(opts, "destroySmartContract", _to)
}

// DestroySmartContract is a paid mutator transaction binding the contract method 0x39df43ff.
//
// Solidity: function destroySmartContract(address _to) returns()
func (_Bething *BethingSession) DestroySmartContract(_to common.Address) (*types.Transaction, error) {
	return _Bething.Contract.DestroySmartContract(&_Bething.TransactOpts, _to)
}

// DestroySmartContract is a paid mutator transaction binding the contract method 0x39df43ff.
//
// Solidity: function destroySmartContract(address _to) returns()
func (_Bething *BethingTransactorSession) DestroySmartContract(_to common.Address) (*types.Transaction, error) {
	return _Bething.Contract.DestroySmartContract(&_Bething.TransactOpts, _to)
}

// FundRace is a paid mutator transaction binding the contract method 0x2ebe4493.
//
// Solidity: function fundRace(bytes32 raceId, uint256 fundValue) returns()
func (_Bething *BethingTransactor) FundRace(opts *bind.TransactOpts, raceId [32]byte, fundValue *big.Int) (*types.Transaction, error) {
	return _Bething.contract.Transact(opts, "fundRace", raceId, fundValue)
}

// FundRace is a paid mutator transaction binding the contract method 0x2ebe4493.
//
// Solidity: function fundRace(bytes32 raceId, uint256 fundValue) returns()
func (_Bething *BethingSession) FundRace(raceId [32]byte, fundValue *big.Int) (*types.Transaction, error) {
	return _Bething.Contract.FundRace(&_Bething.TransactOpts, raceId, fundValue)
}

// FundRace is a paid mutator transaction binding the contract method 0x2ebe4493.
//
// Solidity: function fundRace(bytes32 raceId, uint256 fundValue) returns()
func (_Bething *BethingTransactorSession) FundRace(raceId [32]byte, fundValue *big.Int) (*types.Transaction, error) {
	return _Bething.Contract.FundRace(&_Bething.TransactOpts, raceId, fundValue)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Bething *BethingTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bething.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Bething *BethingSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bething.Contract.GrantRole(&_Bething.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Bething *BethingTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bething.Contract.GrantRole(&_Bething.TransactOpts, role, account)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Bething *BethingTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bething.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Bething *BethingSession) Pause() (*types.Transaction, error) {
	return _Bething.Contract.Pause(&_Bething.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Bething *BethingTransactorSession) Pause() (*types.Transaction, error) {
	return _Bething.Contract.Pause(&_Bething.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bething *BethingTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bething.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bething *BethingSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bething.Contract.RenounceOwnership(&_Bething.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bething *BethingTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bething.Contract.RenounceOwnership(&_Bething.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Bething *BethingTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bething.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Bething *BethingSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bething.Contract.RenounceRole(&_Bething.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Bething *BethingTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bething.Contract.RenounceRole(&_Bething.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Bething *BethingTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bething.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Bething *BethingSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bething.Contract.RevokeRole(&_Bething.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Bething *BethingTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bething.Contract.RevokeRole(&_Bething.TransactOpts, role, account)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bething *BethingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Bething.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bething *BethingSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bething.Contract.TransferOwnership(&_Bething.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bething *BethingTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bething.Contract.TransferOwnership(&_Bething.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Bething *BethingTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bething.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Bething *BethingSession) Unpause() (*types.Transaction, error) {
	return _Bething.Contract.Unpause(&_Bething.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Bething *BethingTransactorSession) Unpause() (*types.Transaction, error) {
	return _Bething.Contract.Unpause(&_Bething.TransactOpts)
}

// UpdateAcceptTokenAddress is a paid mutator transaction binding the contract method 0xb4a2fad0.
//
// Solidity: function updateAcceptTokenAddress(address acceptToken) returns()
func (_Bething *BethingTransactor) UpdateAcceptTokenAddress(opts *bind.TransactOpts, acceptToken common.Address) (*types.Transaction, error) {
	return _Bething.contract.Transact(opts, "updateAcceptTokenAddress", acceptToken)
}

// UpdateAcceptTokenAddress is a paid mutator transaction binding the contract method 0xb4a2fad0.
//
// Solidity: function updateAcceptTokenAddress(address acceptToken) returns()
func (_Bething *BethingSession) UpdateAcceptTokenAddress(acceptToken common.Address) (*types.Transaction, error) {
	return _Bething.Contract.UpdateAcceptTokenAddress(&_Bething.TransactOpts, acceptToken)
}

// UpdateAcceptTokenAddress is a paid mutator transaction binding the contract method 0xb4a2fad0.
//
// Solidity: function updateAcceptTokenAddress(address acceptToken) returns()
func (_Bething *BethingTransactorSession) UpdateAcceptTokenAddress(acceptToken common.Address) (*types.Transaction, error) {
	return _Bething.Contract.UpdateAcceptTokenAddress(&_Bething.TransactOpts, acceptToken)
}

// UpdateRaceAddress is a paid mutator transaction binding the contract method 0xd7c49938.
//
// Solidity: function updateRaceAddress(address raceList) returns()
func (_Bething *BethingTransactor) UpdateRaceAddress(opts *bind.TransactOpts, raceList common.Address) (*types.Transaction, error) {
	return _Bething.contract.Transact(opts, "updateRaceAddress", raceList)
}

// UpdateRaceAddress is a paid mutator transaction binding the contract method 0xd7c49938.
//
// Solidity: function updateRaceAddress(address raceList) returns()
func (_Bething *BethingSession) UpdateRaceAddress(raceList common.Address) (*types.Transaction, error) {
	return _Bething.Contract.UpdateRaceAddress(&_Bething.TransactOpts, raceList)
}

// UpdateRaceAddress is a paid mutator transaction binding the contract method 0xd7c49938.
//
// Solidity: function updateRaceAddress(address raceList) returns()
func (_Bething *BethingTransactorSession) UpdateRaceAddress(raceList common.Address) (*types.Transaction, error) {
	return _Bething.Contract.UpdateRaceAddress(&_Bething.TransactOpts, raceList)
}

// BethingAcceptTokenUpdatedIterator is returned from FilterAcceptTokenUpdated and is used to iterate over the raw logs and unpacked data for AcceptTokenUpdated events raised by the Bething contract.
type BethingAcceptTokenUpdatedIterator struct {
	Event *BethingAcceptTokenUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BethingAcceptTokenUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BethingAcceptTokenUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BethingAcceptTokenUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BethingAcceptTokenUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BethingAcceptTokenUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BethingAcceptTokenUpdated represents a AcceptTokenUpdated event raised by the Bething contract.
type BethingAcceptTokenUpdated struct {
	AcceptToken common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAcceptTokenUpdated is a free log retrieval operation binding the contract event 0x44c3b193081dd50818bc919dc1963ae03762174c9a89af5fbbce54ee71a13f97.
//
// Solidity: event AcceptTokenUpdated(address acceptToken)
func (_Bething *BethingFilterer) FilterAcceptTokenUpdated(opts *bind.FilterOpts) (*BethingAcceptTokenUpdatedIterator, error) {

	logs, sub, err := _Bething.contract.FilterLogs(opts, "AcceptTokenUpdated")
	if err != nil {
		return nil, err
	}
	return &BethingAcceptTokenUpdatedIterator{contract: _Bething.contract, event: "AcceptTokenUpdated", logs: logs, sub: sub}, nil
}

// WatchAcceptTokenUpdated is a free log subscription operation binding the contract event 0x44c3b193081dd50818bc919dc1963ae03762174c9a89af5fbbce54ee71a13f97.
//
// Solidity: event AcceptTokenUpdated(address acceptToken)
func (_Bething *BethingFilterer) WatchAcceptTokenUpdated(opts *bind.WatchOpts, sink chan<- *BethingAcceptTokenUpdated) (event.Subscription, error) {

	logs, sub, err := _Bething.contract.WatchLogs(opts, "AcceptTokenUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BethingAcceptTokenUpdated)
				if err := _Bething.contract.UnpackLog(event, "AcceptTokenUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAcceptTokenUpdated is a log parse operation binding the contract event 0x44c3b193081dd50818bc919dc1963ae03762174c9a89af5fbbce54ee71a13f97.
//
// Solidity: event AcceptTokenUpdated(address acceptToken)
func (_Bething *BethingFilterer) ParseAcceptTokenUpdated(log types.Log) (*BethingAcceptTokenUpdated, error) {
	event := new(BethingAcceptTokenUpdated)
	if err := _Bething.contract.UnpackLog(event, "AcceptTokenUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BethingBetSuccessfulIterator is returned from FilterBetSuccessful and is used to iterate over the raw logs and unpacked data for BetSuccessful events raised by the Bething contract.
type BethingBetSuccessfulIterator struct {
	Event *BethingBetSuccessful // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BethingBetSuccessfulIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BethingBetSuccessful)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BethingBetSuccessful)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BethingBetSuccessfulIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BethingBetSuccessfulIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BethingBetSuccessful represents a BetSuccessful event raised by the Bething contract.
type BethingBetSuccessful struct {
	SlotId   *big.Int
	RaceId   [32]byte
	BetValue *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBetSuccessful is a free log retrieval operation binding the contract event 0x90340911801212a3d95efe0dca9cdbd74549020af8cf33fc0861b74d82fe6dbd.
//
// Solidity: event BetSuccessful(uint256 slotId, bytes32 raceId, uint256 betValue)
func (_Bething *BethingFilterer) FilterBetSuccessful(opts *bind.FilterOpts) (*BethingBetSuccessfulIterator, error) {

	logs, sub, err := _Bething.contract.FilterLogs(opts, "BetSuccessful")
	if err != nil {
		return nil, err
	}
	return &BethingBetSuccessfulIterator{contract: _Bething.contract, event: "BetSuccessful", logs: logs, sub: sub}, nil
}

// WatchBetSuccessful is a free log subscription operation binding the contract event 0x90340911801212a3d95efe0dca9cdbd74549020af8cf33fc0861b74d82fe6dbd.
//
// Solidity: event BetSuccessful(uint256 slotId, bytes32 raceId, uint256 betValue)
func (_Bething *BethingFilterer) WatchBetSuccessful(opts *bind.WatchOpts, sink chan<- *BethingBetSuccessful) (event.Subscription, error) {

	logs, sub, err := _Bething.contract.WatchLogs(opts, "BetSuccessful")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BethingBetSuccessful)
				if err := _Bething.contract.UnpackLog(event, "BetSuccessful", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBetSuccessful is a log parse operation binding the contract event 0x90340911801212a3d95efe0dca9cdbd74549020af8cf33fc0861b74d82fe6dbd.
//
// Solidity: event BetSuccessful(uint256 slotId, bytes32 raceId, uint256 betValue)
func (_Bething *BethingFilterer) ParseBetSuccessful(log types.Log) (*BethingBetSuccessful, error) {
	event := new(BethingBetSuccessful)
	if err := _Bething.contract.UnpackLog(event, "BetSuccessful", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BethingClaimCommissionIterator is returned from FilterClaimCommission and is used to iterate over the raw logs and unpacked data for ClaimCommission events raised by the Bething contract.
type BethingClaimCommissionIterator struct {
	Event *BethingClaimCommission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BethingClaimCommissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BethingClaimCommission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BethingClaimCommission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BethingClaimCommissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BethingClaimCommissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BethingClaimCommission represents a ClaimCommission event raised by the Bething contract.
type BethingClaimCommission struct {
	RaceId     [32]byte
	ClaimValue *big.Int
	Receiver   common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterClaimCommission is a free log retrieval operation binding the contract event 0x94fe36569bb216f6cb564fee8983d035c7cacba5679023a4ccabe33fdf6d4d88.
//
// Solidity: event ClaimCommission(bytes32 raceId, uint256 claimValue, address receiver)
func (_Bething *BethingFilterer) FilterClaimCommission(opts *bind.FilterOpts) (*BethingClaimCommissionIterator, error) {

	logs, sub, err := _Bething.contract.FilterLogs(opts, "ClaimCommission")
	if err != nil {
		return nil, err
	}
	return &BethingClaimCommissionIterator{contract: _Bething.contract, event: "ClaimCommission", logs: logs, sub: sub}, nil
}

// WatchClaimCommission is a free log subscription operation binding the contract event 0x94fe36569bb216f6cb564fee8983d035c7cacba5679023a4ccabe33fdf6d4d88.
//
// Solidity: event ClaimCommission(bytes32 raceId, uint256 claimValue, address receiver)
func (_Bething *BethingFilterer) WatchClaimCommission(opts *bind.WatchOpts, sink chan<- *BethingClaimCommission) (event.Subscription, error) {

	logs, sub, err := _Bething.contract.WatchLogs(opts, "ClaimCommission")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BethingClaimCommission)
				if err := _Bething.contract.UnpackLog(event, "ClaimCommission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimCommission is a log parse operation binding the contract event 0x94fe36569bb216f6cb564fee8983d035c7cacba5679023a4ccabe33fdf6d4d88.
//
// Solidity: event ClaimCommission(bytes32 raceId, uint256 claimValue, address receiver)
func (_Bething *BethingFilterer) ParseClaimCommission(log types.Log) (*BethingClaimCommission, error) {
	event := new(BethingClaimCommission)
	if err := _Bething.contract.UnpackLog(event, "ClaimCommission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BethingClaimSuccessfulIterator is returned from FilterClaimSuccessful and is used to iterate over the raw logs and unpacked data for ClaimSuccessful events raised by the Bething contract.
type BethingClaimSuccessfulIterator struct {
	Event *BethingClaimSuccessful // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BethingClaimSuccessfulIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BethingClaimSuccessful)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BethingClaimSuccessful)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BethingClaimSuccessfulIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BethingClaimSuccessfulIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BethingClaimSuccessful represents a ClaimSuccessful event raised by the Bething contract.
type BethingClaimSuccessful struct {
	RaceId     [32]byte
	ClaimValue *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterClaimSuccessful is a free log retrieval operation binding the contract event 0x78d224c5b360f08891a0d6c82ec1fceea8a4e5b39dc51c1373ddfaa13d848df0.
//
// Solidity: event ClaimSuccessful(bytes32 raceId, uint256 claimValue)
func (_Bething *BethingFilterer) FilterClaimSuccessful(opts *bind.FilterOpts) (*BethingClaimSuccessfulIterator, error) {

	logs, sub, err := _Bething.contract.FilterLogs(opts, "ClaimSuccessful")
	if err != nil {
		return nil, err
	}
	return &BethingClaimSuccessfulIterator{contract: _Bething.contract, event: "ClaimSuccessful", logs: logs, sub: sub}, nil
}

// WatchClaimSuccessful is a free log subscription operation binding the contract event 0x78d224c5b360f08891a0d6c82ec1fceea8a4e5b39dc51c1373ddfaa13d848df0.
//
// Solidity: event ClaimSuccessful(bytes32 raceId, uint256 claimValue)
func (_Bething *BethingFilterer) WatchClaimSuccessful(opts *bind.WatchOpts, sink chan<- *BethingClaimSuccessful) (event.Subscription, error) {

	logs, sub, err := _Bething.contract.WatchLogs(opts, "ClaimSuccessful")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BethingClaimSuccessful)
				if err := _Bething.contract.UnpackLog(event, "ClaimSuccessful", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimSuccessful is a log parse operation binding the contract event 0x78d224c5b360f08891a0d6c82ec1fceea8a4e5b39dc51c1373ddfaa13d848df0.
//
// Solidity: event ClaimSuccessful(bytes32 raceId, uint256 claimValue)
func (_Bething *BethingFilterer) ParseClaimSuccessful(log types.Log) (*BethingClaimSuccessful, error) {
	event := new(BethingClaimSuccessful)
	if err := _Bething.contract.UnpackLog(event, "ClaimSuccessful", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BethingFundSuccessfulIterator is returned from FilterFundSuccessful and is used to iterate over the raw logs and unpacked data for FundSuccessful events raised by the Bething contract.
type BethingFundSuccessfulIterator struct {
	Event *BethingFundSuccessful // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BethingFundSuccessfulIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BethingFundSuccessful)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BethingFundSuccessful)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BethingFundSuccessfulIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BethingFundSuccessfulIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BethingFundSuccessful represents a FundSuccessful event raised by the Bething contract.
type BethingFundSuccessful struct {
	RaceId    [32]byte
	FundValue *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterFundSuccessful is a free log retrieval operation binding the contract event 0x18828fa7a168b0db08e3e72ef21348f4c4fa1ee1b46803878b1195794aaad4c3.
//
// Solidity: event FundSuccessful(bytes32 raceId, uint256 fundValue)
func (_Bething *BethingFilterer) FilterFundSuccessful(opts *bind.FilterOpts) (*BethingFundSuccessfulIterator, error) {

	logs, sub, err := _Bething.contract.FilterLogs(opts, "FundSuccessful")
	if err != nil {
		return nil, err
	}
	return &BethingFundSuccessfulIterator{contract: _Bething.contract, event: "FundSuccessful", logs: logs, sub: sub}, nil
}

// WatchFundSuccessful is a free log subscription operation binding the contract event 0x18828fa7a168b0db08e3e72ef21348f4c4fa1ee1b46803878b1195794aaad4c3.
//
// Solidity: event FundSuccessful(bytes32 raceId, uint256 fundValue)
func (_Bething *BethingFilterer) WatchFundSuccessful(opts *bind.WatchOpts, sink chan<- *BethingFundSuccessful) (event.Subscription, error) {

	logs, sub, err := _Bething.contract.WatchLogs(opts, "FundSuccessful")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BethingFundSuccessful)
				if err := _Bething.contract.UnpackLog(event, "FundSuccessful", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFundSuccessful is a log parse operation binding the contract event 0x18828fa7a168b0db08e3e72ef21348f4c4fa1ee1b46803878b1195794aaad4c3.
//
// Solidity: event FundSuccessful(bytes32 raceId, uint256 fundValue)
func (_Bething *BethingFilterer) ParseFundSuccessful(log types.Log) (*BethingFundSuccessful, error) {
	event := new(BethingFundSuccessful)
	if err := _Bething.contract.UnpackLog(event, "FundSuccessful", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BethingOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Bething contract.
type BethingOwnershipTransferredIterator struct {
	Event *BethingOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BethingOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BethingOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BethingOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BethingOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BethingOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BethingOwnershipTransferred represents a OwnershipTransferred event raised by the Bething contract.
type BethingOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bething *BethingFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BethingOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bething.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BethingOwnershipTransferredIterator{contract: _Bething.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bething *BethingFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BethingOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bething.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BethingOwnershipTransferred)
				if err := _Bething.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bething *BethingFilterer) ParseOwnershipTransferred(log types.Log) (*BethingOwnershipTransferred, error) {
	event := new(BethingOwnershipTransferred)
	if err := _Bething.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BethingPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Bething contract.
type BethingPausedIterator struct {
	Event *BethingPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BethingPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BethingPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BethingPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BethingPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BethingPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BethingPaused represents a Paused event raised by the Bething contract.
type BethingPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bething *BethingFilterer) FilterPaused(opts *bind.FilterOpts) (*BethingPausedIterator, error) {

	logs, sub, err := _Bething.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &BethingPausedIterator{contract: _Bething.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bething *BethingFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *BethingPaused) (event.Subscription, error) {

	logs, sub, err := _Bething.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BethingPaused)
				if err := _Bething.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bething *BethingFilterer) ParsePaused(log types.Log) (*BethingPaused, error) {
	event := new(BethingPaused)
	if err := _Bething.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BethingRaceListUpdatedIterator is returned from FilterRaceListUpdated and is used to iterate over the raw logs and unpacked data for RaceListUpdated events raised by the Bething contract.
type BethingRaceListUpdatedIterator struct {
	Event *BethingRaceListUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BethingRaceListUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BethingRaceListUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BethingRaceListUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BethingRaceListUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BethingRaceListUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BethingRaceListUpdated represents a RaceListUpdated event raised by the Bething contract.
type BethingRaceListUpdated struct {
	Race common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRaceListUpdated is a free log retrieval operation binding the contract event 0x7a659342c2b03e1c14729e3f1c86f414756d13bd8ff0636713cc22246182b42d.
//
// Solidity: event RaceListUpdated(address race)
func (_Bething *BethingFilterer) FilterRaceListUpdated(opts *bind.FilterOpts) (*BethingRaceListUpdatedIterator, error) {

	logs, sub, err := _Bething.contract.FilterLogs(opts, "RaceListUpdated")
	if err != nil {
		return nil, err
	}
	return &BethingRaceListUpdatedIterator{contract: _Bething.contract, event: "RaceListUpdated", logs: logs, sub: sub}, nil
}

// WatchRaceListUpdated is a free log subscription operation binding the contract event 0x7a659342c2b03e1c14729e3f1c86f414756d13bd8ff0636713cc22246182b42d.
//
// Solidity: event RaceListUpdated(address race)
func (_Bething *BethingFilterer) WatchRaceListUpdated(opts *bind.WatchOpts, sink chan<- *BethingRaceListUpdated) (event.Subscription, error) {

	logs, sub, err := _Bething.contract.WatchLogs(opts, "RaceListUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BethingRaceListUpdated)
				if err := _Bething.contract.UnpackLog(event, "RaceListUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRaceListUpdated is a log parse operation binding the contract event 0x7a659342c2b03e1c14729e3f1c86f414756d13bd8ff0636713cc22246182b42d.
//
// Solidity: event RaceListUpdated(address race)
func (_Bething *BethingFilterer) ParseRaceListUpdated(log types.Log) (*BethingRaceListUpdated, error) {
	event := new(BethingRaceListUpdated)
	if err := _Bething.contract.UnpackLog(event, "RaceListUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BethingRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the Bething contract.
type BethingRoleAdminChangedIterator struct {
	Event *BethingRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BethingRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BethingRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BethingRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BethingRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BethingRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BethingRoleAdminChanged represents a RoleAdminChanged event raised by the Bething contract.
type BethingRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Bething *BethingFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*BethingRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Bething.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &BethingRoleAdminChangedIterator{contract: _Bething.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Bething *BethingFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *BethingRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Bething.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BethingRoleAdminChanged)
				if err := _Bething.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Bething *BethingFilterer) ParseRoleAdminChanged(log types.Log) (*BethingRoleAdminChanged, error) {
	event := new(BethingRoleAdminChanged)
	if err := _Bething.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BethingRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Bething contract.
type BethingRoleGrantedIterator struct {
	Event *BethingRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BethingRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BethingRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BethingRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BethingRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BethingRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BethingRoleGranted represents a RoleGranted event raised by the Bething contract.
type BethingRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bething *BethingFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BethingRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bething.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BethingRoleGrantedIterator{contract: _Bething.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bething *BethingFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *BethingRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bething.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BethingRoleGranted)
				if err := _Bething.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bething *BethingFilterer) ParseRoleGranted(log types.Log) (*BethingRoleGranted, error) {
	event := new(BethingRoleGranted)
	if err := _Bething.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BethingRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Bething contract.
type BethingRoleRevokedIterator struct {
	Event *BethingRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BethingRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BethingRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BethingRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BethingRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BethingRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BethingRoleRevoked represents a RoleRevoked event raised by the Bething contract.
type BethingRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bething *BethingFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BethingRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bething.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BethingRoleRevokedIterator{contract: _Bething.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bething *BethingFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *BethingRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bething.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BethingRoleRevoked)
				if err := _Bething.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bething *BethingFilterer) ParseRoleRevoked(log types.Log) (*BethingRoleRevoked, error) {
	event := new(BethingRoleRevoked)
	if err := _Bething.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BethingUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Bething contract.
type BethingUnpausedIterator struct {
	Event *BethingUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BethingUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BethingUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BethingUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BethingUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BethingUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BethingUnpaused represents a Unpaused event raised by the Bething contract.
type BethingUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bething *BethingFilterer) FilterUnpaused(opts *bind.FilterOpts) (*BethingUnpausedIterator, error) {

	logs, sub, err := _Bething.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &BethingUnpausedIterator{contract: _Bething.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bething *BethingFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *BethingUnpaused) (event.Subscription, error) {

	logs, sub, err := _Bething.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BethingUnpaused)
				if err := _Bething.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bething *BethingFilterer) ParseUnpaused(log types.Log) (*BethingUnpaused, error) {
	event := new(BethingUnpaused)
	if err := _Bething.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
