// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package BUSD

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BUSDMetaData contains all meta data concerning the BUSD contract.
var BUSDMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"offchain\",\"type\":\"bytes32\"}],\"name\":\"__issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"offchain\",\"type\":\"bytes32\"}],\"name\":\"__redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"offchain\",\"type\":\"bytes32\"}],\"name\":\"__transferByAdmin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxIssuingTokenPerTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalIssuingToken\",\"type\":\"uint256\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxIssuingTokenPerTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalIssuingToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingIssuingToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"offchain\",\"type\":\"bytes32\"}],\"name\":\"transferByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"offchain\",\"type\":\"bytes32\"}],\"name\":\"issue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"offchain\",\"type\":\"bytes32\"}],\"name\":\"issueByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"offchain\",\"type\":\"bytes32\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040518060400160405280600b81526020017f42696e616e6365205553440000000000000000000000000000000000000000008152506040518060400160405280600481526020017f42555344000000000000000000000000000000000000000000000000000000008152506012620000a0620000946200018360201b60201c565b6200018b60201b60201c565b8260069080519060200190620000b8929190620004c2565b508160059080519060200190620000d1929190620004c2565b5080600460006101000a81548160ff021916908360ff1602179055505050506000600760006101000a81548160ff02191690831515021790555033600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200017d33620001616200024f60201b60201c565b620001716200024f60201b60201c565b6200026160201b60201c565b6200084c565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600069e4b2ead51ac333000000905090565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620002f4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002eb906200069e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562000367576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200035e9062000638565b60405180910390fd5b80821115620003ad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003a4906200067c565b60405180910390fd5b620003bd6200024f60201b60201c565b81111562000402576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003f9906200065a565b60405180910390fd5b6200040c62000553565b600181600001901515908115158152505082816020018181525050818160400181815250508181606001818152505080600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160010155604082015181600201556060820151816003015590505050505050565b828054620004d090620006d1565b90600052602060002090601f016020900481019282620004f4576000855562000540565b82601f106200050f57805160ff191683800117855562000540565b8280016001018555821562000540579182015b828111156200053f57825182559160200191906001019062000522565b5b5090506200054f91906200057d565b5090565b60405180608001604052806000151581526020016000815260200160008152602001600081525090565b5b80821115620005985760008160009055506001016200057e565b5090565b6000620005ab600e83620006c0565b9150620005b88262000736565b602082019050919050565b6000620005d2603c83620006c0565b9150620005df826200075f565b604082019050919050565b6000620005f9604983620006c0565b91506200060682620007ae565b606082019050919050565b600062000620600f83620006c0565b91506200062d8262000823565b602082019050919050565b6000602082019050818103600083015262000653816200059c565b9050919050565b600060208201905081810360008301526200067581620005c3565b9050919050565b600060208201905081810360008301526200069781620005ea565b9050919050565b60006020820190508181036000830152620006b98162000611565b9050919050565b600082825260208201905092915050565b60006002820490506001821680620006ea57607f821691505b6020821081141562000701576200070062000707565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f61646472657373206973206e696c000000000000000000000000000000000000600082015250565b7f6d6178546f74616c49737375696e67546f6b656e206d757374206265206c657360008201527f73207468616e206f7220657175616c20746f206361702076616c756500000000602082015250565b7f6d617849737375696e67546f6b656e50657254696d65206d757374206265206c60008201527f657373207468616e206f7220657175616c20746f206d6178546f74616c49737360208201527f75696e67546f6b656e0000000000000000000000000000000000000000000000604082015250565b7f6e6f742073757065722061646d696e0000000000000000000000000000000000600082015250565b613738806200085c6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80638456cb591161010f578063d10601ec116100a2578063ea3f068d11610071578063ea3f068d14610595578063f2fde38b146105b1578063f3bdc228146105cd578063f9ba884f146105e9576101e5565b8063d10601ec146104fd578063dd62ed3e14610519578063e47d606014610549578063e4997dc514610579576101e5565b8063992c3e4b116100de578063992c3e4b14610451578063a0712d681461046d578063a457c2d71461049d578063a9059cbb146104cd576101e5565b80638456cb59146103ed578063893d20e8146103f75780638da5cb5b1461041557806395d89b4114610433576101e5565b806339509351116101875780635c975abb116101565780635c975abb1461036257806363a846f81461038057806370a08231146103b3578063715018a6146103e3576101e5565b806339509351146102dc5780633f4ba83a1461030c57806346f2ed2e1461031657806359bf1abe14610332576101e5565b80631785f53c116101c35780631785f53c1461025457806318160ddd1461027057806323b872dd1461028e578063313ce567146102be576101e5565b806306fdde03146101ea578063095ea7b3146102085780630ecb93c014610238575b600080fd5b6101f2610605565b6040516101ff9190612c9e565b60405180910390f35b610222600480360381019061021d91906127bf565b610697565b60405161022f9190612c23565b60405180910390f35b610252600480360381019061024d91906126a8565b6106b5565b005b61026e600480360381019061026991906126a8565b6107c3565b005b610278610921565b6040516102859190612f20565b60405180910390f35b6102a860048036038101906102a3919061270d565b61092b565b6040516102b59190612c23565b60405180910390f35b6102c66109e0565b6040516102d39190612f3b565b60405180910390f35b6102f660048036038101906102f191906127bf565b6109f7565b6040516103039190612c23565b60405180910390f35b610314610aaa565b005b610330600480360381019061032b919061284a565b610b30565b005b61034c600480360381019061034791906126a8565b610d7b565b6040516103599190612c23565b60405180910390f35b61036a610dd1565b6040516103779190612c23565b60405180910390f35b61039a600480360381019061039591906126a8565b610de8565b6040516103aa9493929190612c3e565b60405180910390f35b6103cd60048036038101906103c891906126a8565b610e25565b6040516103da9190612f20565b60405180910390f35b6103eb610e6e565b005b6103f5610ef6565b005b6103ff610f7c565b60405161040c9190612bdf565b60405180910390f35b61041d610f8b565b60405161042a9190612bdf565b60405180910390f35b61043b610fb4565b6040516104489190612c9e565b60405180910390f35b61046b600480360381019061046691906127fb565b611046565b005b61048760048036038101906104829190612899565b611108565b6040516104949190612c23565b60405180910390f35b6104b760048036038101906104b291906127bf565b6111a0565b6040516104c49190612c23565b60405180910390f35b6104e760048036038101906104e291906127bf565b61126d565b6040516104f49190612c23565b60405180910390f35b610517600480360381019061051291906127fb565b611320565b005b610533600480360381019061052e91906126d1565b611522565b6040516105409190612f20565b60405180910390f35b610563600480360381019061055e91906126a8565b6115a9565b6040516105709190612c23565b60405180910390f35b610593600480360381019061058e91906126a8565b6115c9565b005b6105af60048036038101906105aa91906127fb565b6116d7565b005b6105cb60048036038101906105c691906126a8565b611763565b005b6105e760048036038101906105e291906126a8565b61185b565b005b61060360048036038101906105fe919061275c565b6119b7565b005b6060600680546106149061308e565b80601f01602080910402602001604051908101604052809291908181526020018280546106409061308e565b801561068d5780601f106106625761010080835404028352916020019161068d565b820191906000526020600020905b81548152906001019060200180831161067057829003601f168201915b5050505050905090565b60006106ab6106a4611a7b565b8484611a83565b6001905092915050565b6106bd611a7b565b73ffffffffffffffffffffffffffffffffffffffff166106db610f8b565b73ffffffffffffffffffffffffffffffffffffffff1614610731576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072890612e00565b60405180910390fd5b6001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc816040516107b89190612bdf565b60405180910390a150565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610853576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084a90612ec0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ba90612cc0565b60405180910390fd5b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555050565b6000600354905090565b6000610935610dd1565b15610975576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096c90612dc0565b60405180910390fd5b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156109cc57600080fd5b6109d7848484611c4e565b90509392505050565b6000600460009054906101000a900460ff16905090565b6000610aa0610a04611a7b565b84610a9b8560026000610a15611a7b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d2790919063ffffffff16565b611a83565b6001905092915050565b610ab2611a7b565b73ffffffffffffffffffffffffffffffffffffffff16610ad0610f8b565b73ffffffffffffffffffffffffffffffffffffffff1614610b26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1d90612e00565b60405180910390fd5b610b2e611d3d565b565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb790612ec0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2790612cc0565b60405180910390fd5b80821115610c73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6a90612ea0565b60405180910390fd5b610c7b611ddf565b811115610cbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb490612e60565b60405180910390fd5b610cc561263f565b600181600001901515908115158152505082816020018181525050818160400181815250508181606001818152505080600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160010155604082015181600201556060820151816003015590505050505050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600760009054906101000a900460ff16905090565b600a6020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020154908060030154905084565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610e76611a7b565b73ffffffffffffffffffffffffffffffffffffffff16610e94610f8b565b73ffffffffffffffffffffffffffffffffffffffff1614610eea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee190612e00565b60405180910390fd5b610ef46000611df1565b565b610efe611a7b565b73ffffffffffffffffffffffffffffffffffffffff16610f1c610f8b565b73ffffffffffffffffffffffffffffffffffffffff1614610f72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6990612e00565b60405180910390fd5b610f7a611eb5565b565b6000610f86610f8b565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060058054610fc39061308e565b80601f0160208091040260200160405190810160405280929190818152602001828054610fef9061308e565b801561103c5780601f106110115761010080835404028352916020019161103c565b820191906000526020600020905b81548152906001019060200180831161101f57829003601f168201915b5050505050905090565b61104e611a7b565b73ffffffffffffffffffffffffffffffffffffffff1661106c610f8b565b73ffffffffffffffffffffffffffffffffffffffff16146110c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b990612e00565b60405180910390fd5b6110cc8383611f58565b7fb0de879351469d2741406aafc9ba1f44eb957cf44ee3391e59a7a9097050c927816040516110fb9190612c83565b60405180910390a1505050565b6000611112611a7b565b73ffffffffffffffffffffffffffffffffffffffff16611130610f8b565b73ffffffffffffffffffffffffffffffffffffffff1614611186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117d90612e00565b60405180910390fd5b611197611191611a7b565b836120fc565b60019050919050565b60006112636111ad611a7b565b8461125e856040518060600160405280602581526020016136bc60259139600260006111d7611a7b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122869092919063ffffffff16565b611a83565b6001905092915050565b6000611277610dd1565b156112b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ae90612dc0565b60405180910390fd5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561130e57600080fd5b61131883836122db565b905092915050565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166113af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a690612ee0565b60405180910390fd5b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154821115611434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142b90612da0565b60405180910390fd5b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301548211156114b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b090612e20565b60405180910390fd5b81600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600082825461150b9190612fc8565b9250508190555061151d8383836122f9565b505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60086020528060005260406000206000915054906101000a900460ff1681565b6115d1611a7b565b73ffffffffffffffffffffffffffffffffffffffff166115ef610f8b565b73ffffffffffffffffffffffffffffffffffffffff1614611645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163c90612e00565b60405180910390fd5b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c816040516116cc9190612bdf565b60405180910390a150565b6116df611a7b565b73ffffffffffffffffffffffffffffffffffffffff166116fd610f8b565b73ffffffffffffffffffffffffffffffffffffffff1614611753576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174a90612e00565b60405180910390fd5b61175e8383836122f9565b505050565b61176b611a7b565b73ffffffffffffffffffffffffffffffffffffffff16611789610f8b565b73ffffffffffffffffffffffffffffffffffffffff16146117df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d690612e00565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561184f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184690612d40565b60405180910390fd5b61185881611df1565b50565b611863611a7b565b73ffffffffffffffffffffffffffffffffffffffff16611881610f8b565b73ffffffffffffffffffffffffffffffffffffffff16146118d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ce90612e00565b60405180910390fd5b600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195a90612d80565b60405180910390fd5b600061196e82610e25565b905061197a8282611f58565b7f61e6e66b0d6339b2980aecc6ccc0039736791f0ccde9ed512e789a7fbdd698c682826040516119ab929190612bfa565b60405180910390a15050565b6119bf611a7b565b73ffffffffffffffffffffffffffffffffffffffff166119dd610f8b565b73ffffffffffffffffffffffffffffffffffffffff1614611a33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2a90612e00565b60405180910390fd5b611a3e84848461239b565b7f3b36ee6b35325f38e95938557be92853c842b7a9a19fd7ac4931a6d24db5268281604051611a6d9190612c83565b60405180910390a150505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611af3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aea90612d20565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5a90612f00565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611c419190612f20565b60405180910390a3505050565b6000611c5b84848461239b565b611d1c84611c67611a7b565b611d178560405180606001604052806028815260200161366e60289139600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000611ccd611a7b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122869092919063ffffffff16565b611a83565b600190509392505050565b60008183611d359190612f72565b905092915050565b611d45610dd1565b611d84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7b90612ce0565b60405180910390fd5b6000600760006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611dc8611a7b565b604051611dd59190612bdf565b60405180910390a1565b600069e4b2ead51ac333000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611ebd610dd1565b15611efd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef490612dc0565b60405180910390fd5b6001600760006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611f41611a7b565b604051611f4e9190612bdf565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611fc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbf90612e80565b60405180910390fd5b612034816040518060600160405280602281526020016136e160229139600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122869092919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061208c8160035461262990919063ffffffff16565b600381905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516120f09190612f20565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561216c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216390612de0565b60405180910390fd5b61218181600354611d2790919063ffffffff16565b6003819055506121d981600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d2790919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161227a9190612f20565b60405180910390a35050565b60008383111582906122ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122c59190612c9e565b60405180910390fd5b5082840390509392505050565b60006122ef6122e8611a7b565b848461239b565b6001905092915050565b612301611ddf565b8261230a610921565b6123149190612f72565b1115612355576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234c90612d60565b60405180910390fd5b61235f83836120fc565b7f182a88d3fbfcb38ffaddf26e6d63ecd93b4348141de1eb744c43c4fbb1ccfb228160405161238e9190612c83565b60405180910390a1505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561240b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240290612d00565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561247b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247290612e40565b60405180910390fd5b6124e78160405180606001604052806026815260200161369660269139600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122869092919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061257c81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d2790919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161261c9190612f20565b60405180910390a3505050565b600081836126379190612fc8565b905092915050565b60405180608001604052806000151581526020016000815260200160008152602001600081525090565b60008135905061267881613628565b92915050565b60008135905061268d8161363f565b92915050565b6000813590506126a281613656565b92915050565b6000602082840312156126ba57600080fd5b60006126c884828501612669565b91505092915050565b600080604083850312156126e457600080fd5b60006126f285828601612669565b925050602061270385828601612669565b9150509250929050565b60008060006060848603121561272257600080fd5b600061273086828701612669565b935050602061274186828701612669565b925050604061275286828701612693565b9150509250925092565b6000806000806080858703121561277257600080fd5b600061278087828801612669565b945050602061279187828801612669565b93505060406127a287828801612693565b92505060606127b38782880161267e565b91505092959194509250565b600080604083850312156127d257600080fd5b60006127e085828601612669565b92505060206127f185828601612693565b9150509250929050565b60008060006060848603121561281057600080fd5b600061281e86828701612669565b935050602061282f86828701612693565b92505060406128408682870161267e565b9150509250925092565b60008060006060848603121561285f57600080fd5b600061286d86828701612669565b935050602061287e86828701612693565b925050604061288f86828701612693565b9150509250925092565b6000602082840312156128ab57600080fd5b60006128b984828501612693565b91505092915050565b6128cb81612ffc565b82525050565b6128da8161300e565b82525050565b6128e98161301a565b82525050565b60006128fa82612f56565b6129048185612f61565b935061291481856020860161305b565b61291d8161311e565b840191505092915050565b6000612935600e83612f61565b91506129408261312f565b602082019050919050565b6000612958601483612f61565b915061296382613158565b602082019050919050565b600061297b602583612f61565b915061298682613181565b604082019050919050565b600061299e602483612f61565b91506129a9826131d0565b604082019050919050565b60006129c1602683612f61565b91506129cc8261321f565b604082019050919050565b60006129e4603e83612f61565b91506129ef8261326e565b604082019050919050565b6000612a07602383612f61565b9150612a12826132bd565b604082019050919050565b6000612a2a603883612f61565b9150612a358261330c565b604082019050919050565b6000612a4d601083612f61565b9150612a588261335b565b602082019050919050565b6000612a70601f83612f61565b9150612a7b82613384565b602082019050919050565b6000612a93602083612f61565b9150612a9e826133ad565b602082019050919050565b6000612ab6603b83612f61565b9150612ac1826133d6565b604082019050919050565b6000612ad9602383612f61565b9150612ae482613425565b604082019050919050565b6000612afc603c83612f61565b9150612b0782613474565b604082019050919050565b6000612b1f602183612f61565b9150612b2a826134c3565b604082019050919050565b6000612b42604983612f61565b9150612b4d82613512565b606082019050919050565b6000612b65600f83612f61565b9150612b7082613587565b602082019050919050565b6000612b88600983612f61565b9150612b93826135b0565b602082019050919050565b6000612bab602283612f61565b9150612bb6826135d9565b604082019050919050565b612bca81613044565b82525050565b612bd98161304e565b82525050565b6000602082019050612bf460008301846128c2565b92915050565b6000604082019050612c0f60008301856128c2565b612c1c6020830184612bc1565b9392505050565b6000602082019050612c3860008301846128d1565b92915050565b6000608082019050612c5360008301876128d1565b612c606020830186612bc1565b612c6d6040830185612bc1565b612c7a6060830184612bc1565b95945050505050565b6000602082019050612c9860008301846128e0565b92915050565b60006020820190508181036000830152612cb881846128ef565b905092915050565b60006020820190508181036000830152612cd981612928565b9050919050565b60006020820190508181036000830152612cf98161294b565b9050919050565b60006020820190508181036000830152612d198161296e565b9050919050565b60006020820190508181036000830152612d3981612991565b9050919050565b60006020820190508181036000830152612d59816129b4565b9050919050565b60006020820190508181036000830152612d79816129d7565b9050919050565b60006020820190508181036000830152612d99816129fa565b9050919050565b60006020820190508181036000830152612db981612a1d565b9050919050565b60006020820190508181036000830152612dd981612a40565b9050919050565b60006020820190508181036000830152612df981612a63565b9050919050565b60006020820190508181036000830152612e1981612a86565b9050919050565b60006020820190508181036000830152612e3981612aa9565b9050919050565b60006020820190508181036000830152612e5981612acc565b9050919050565b60006020820190508181036000830152612e7981612aef565b9050919050565b60006020820190508181036000830152612e9981612b12565b9050919050565b60006020820190508181036000830152612eb981612b35565b9050919050565b60006020820190508181036000830152612ed981612b58565b9050919050565b60006020820190508181036000830152612ef981612b7b565b9050919050565b60006020820190508181036000830152612f1981612b9e565b9050919050565b6000602082019050612f356000830184612bc1565b92915050565b6000602082019050612f506000830184612bd0565b92915050565b600081519050919050565b600082825260208201905092915050565b6000612f7d82613044565b9150612f8883613044565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612fbd57612fbc6130c0565b5b828201905092915050565b6000612fd382613044565b9150612fde83613044565b925082821015612ff157612ff06130c0565b5b828203905092915050565b600061300782613024565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561307957808201518184015260208101905061305e565b83811115613088576000848401525b50505050565b600060028204905060018216806130a657607f821691505b602082108114156130ba576130b96130ef565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f61646472657373206973206e696c000000000000000000000000000000000000600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f42455032303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f42455032303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f6d696e7465642076616c7565202b20746f74616c20737570706c79206d75737460008201527f20626520736d616c6c6572206f7220657175616c20746f6b656e206361700000602082015250565b7f7468652061646472657373206973206e6f7420696e2074686520626c61636b6c60008201527f6973740000000000000000000000000000000000000000000000000000000000602082015250565b7f6d696e7465642076616c7565206d75737420626520736d616c6c6572206f722060008201527f657175616c20746f2061646d696e206d61782069737375650000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f42455032303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f6d696e7465642076616c7565206d75737420626520736d616c6c6572206f722060008201527f657175616c20746f2072656d61696e2069737375652076616c75650000000000602082015250565b7f42455032303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f6d6178546f74616c49737375696e67546f6b656e206d757374206265206c657360008201527f73207468616e206f7220657175616c20746f206361702076616c756500000000602082015250565b7f42455032303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f6d617849737375696e67546f6b656e50657254696d65206d757374206265206c60008201527f657373207468616e206f7220657175616c20746f206d6178546f74616c49737360208201527f75696e67546f6b656e0000000000000000000000000000000000000000000000604082015250565b7f6e6f742073757065722061646d696e0000000000000000000000000000000000600082015250565b7f6e6f742061646d696e0000000000000000000000000000000000000000000000600082015250565b7f42455032303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b61363181612ffc565b811461363c57600080fd5b50565b6136488161301a565b811461365357600080fd5b50565b61365f81613044565b811461366a57600080fd5b5056fe42455032303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636542455032303a207472616e7366657220616d6f756e7420657863656564732062616c616e636542455032303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f42455032303a206275726e20616d6f756e7420657863656564732062616c616e6365a26469706673582212207445978d6969e95339c9d3c8b1708b24c2dade04454cc45949190df498cc52c964736f6c63430008040033",
}

// BUSDABI is the input ABI used to generate the binding from.
// Deprecated: Use BUSDMetaData.ABI instead.
var BUSDABI = BUSDMetaData.ABI

// BUSDBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BUSDMetaData.Bin instead.
var BUSDBin = BUSDMetaData.Bin

// DeployBUSD deploys a new Ethereum contract, binding an instance of BUSD to it.
func DeployBUSD(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BUSD, error) {
	parsed, err := BUSDMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BUSDBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BUSD{BUSDCaller: BUSDCaller{contract: contract}, BUSDTransactor: BUSDTransactor{contract: contract}, BUSDFilterer: BUSDFilterer{contract: contract}}, nil
}

// BUSD is an auto generated Go binding around an Ethereum contract.
type BUSD struct {
	BUSDCaller     // Read-only binding to the contract
	BUSDTransactor // Write-only binding to the contract
	BUSDFilterer   // Log filterer for contract events
}

// BUSDCaller is an auto generated read-only Go binding around an Ethereum contract.
type BUSDCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BUSDTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BUSDTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BUSDFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BUSDFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BUSDSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BUSDSession struct {
	Contract     *BUSD             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BUSDCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BUSDCallerSession struct {
	Contract *BUSDCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BUSDTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BUSDTransactorSession struct {
	Contract     *BUSDTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BUSDRaw is an auto generated low-level Go binding around an Ethereum contract.
type BUSDRaw struct {
	Contract *BUSD // Generic contract binding to access the raw methods on
}

// BUSDCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BUSDCallerRaw struct {
	Contract *BUSDCaller // Generic read-only contract binding to access the raw methods on
}

// BUSDTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BUSDTransactorRaw struct {
	Contract *BUSDTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBUSD creates a new instance of BUSD, bound to a specific deployed contract.
func NewBUSD(address common.Address, backend bind.ContractBackend) (*BUSD, error) {
	contract, err := bindBUSD(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BUSD{BUSDCaller: BUSDCaller{contract: contract}, BUSDTransactor: BUSDTransactor{contract: contract}, BUSDFilterer: BUSDFilterer{contract: contract}}, nil
}

// NewBUSDCaller creates a new read-only instance of BUSD, bound to a specific deployed contract.
func NewBUSDCaller(address common.Address, caller bind.ContractCaller) (*BUSDCaller, error) {
	contract, err := bindBUSD(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BUSDCaller{contract: contract}, nil
}

// NewBUSDTransactor creates a new write-only instance of BUSD, bound to a specific deployed contract.
func NewBUSDTransactor(address common.Address, transactor bind.ContractTransactor) (*BUSDTransactor, error) {
	contract, err := bindBUSD(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BUSDTransactor{contract: contract}, nil
}

// NewBUSDFilterer creates a new log filterer instance of BUSD, bound to a specific deployed contract.
func NewBUSDFilterer(address common.Address, filterer bind.ContractFilterer) (*BUSDFilterer, error) {
	contract, err := bindBUSD(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BUSDFilterer{contract: contract}, nil
}

// bindBUSD binds a generic wrapper to an already deployed contract.
func bindBUSD(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BUSDABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BUSD *BUSDRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BUSD.Contract.BUSDCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BUSD *BUSDRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BUSD.Contract.BUSDTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BUSD *BUSDRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BUSD.Contract.BUSDTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BUSD *BUSDCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BUSD.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BUSD *BUSDTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BUSD.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BUSD *BUSDTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BUSD.Contract.contract.Transact(opts, method, params...)
}

// Admin is a free data retrieval call binding the contract method 0x63a846f8.
//
// Solidity: function admin(address ) view returns(bool status, uint256 maxIssuingTokenPerTime, uint256 maxTotalIssuingToken, uint256 remainingIssuingToken)
func (_BUSD *BUSDCaller) Admin(opts *bind.CallOpts, arg0 common.Address) (struct {
	Status                 bool
	MaxIssuingTokenPerTime *big.Int
	MaxTotalIssuingToken   *big.Int
	RemainingIssuingToken  *big.Int
}, error) {
	var out []interface{}
	err := _BUSD.contract.Call(opts, &out, "admin", arg0)

	outstruct := new(struct {
		Status                 bool
		MaxIssuingTokenPerTime *big.Int
		MaxTotalIssuingToken   *big.Int
		RemainingIssuingToken  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Status = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.MaxIssuingTokenPerTime = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.MaxTotalIssuingToken = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.RemainingIssuingToken = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Admin is a free data retrieval call binding the contract method 0x63a846f8.
//
// Solidity: function admin(address ) view returns(bool status, uint256 maxIssuingTokenPerTime, uint256 maxTotalIssuingToken, uint256 remainingIssuingToken)
func (_BUSD *BUSDSession) Admin(arg0 common.Address) (struct {
	Status                 bool
	MaxIssuingTokenPerTime *big.Int
	MaxTotalIssuingToken   *big.Int
	RemainingIssuingToken  *big.Int
}, error) {
	return _BUSD.Contract.Admin(&_BUSD.CallOpts, arg0)
}

// Admin is a free data retrieval call binding the contract method 0x63a846f8.
//
// Solidity: function admin(address ) view returns(bool status, uint256 maxIssuingTokenPerTime, uint256 maxTotalIssuingToken, uint256 remainingIssuingToken)
func (_BUSD *BUSDCallerSession) Admin(arg0 common.Address) (struct {
	Status                 bool
	MaxIssuingTokenPerTime *big.Int
	MaxTotalIssuingToken   *big.Int
	RemainingIssuingToken  *big.Int
}, error) {
	return _BUSD.Contract.Admin(&_BUSD.CallOpts, arg0)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_BUSD *BUSDCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BUSD.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_BUSD *BUSDSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _BUSD.Contract.Allowance(&_BUSD.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_BUSD *BUSDCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _BUSD.Contract.Allowance(&_BUSD.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_BUSD *BUSDCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BUSD.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_BUSD *BUSDSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _BUSD.Contract.BalanceOf(&_BUSD.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_BUSD *BUSDCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _BUSD.Contract.BalanceOf(&_BUSD.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_BUSD *BUSDCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BUSD.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_BUSD *BUSDSession) Decimals() (uint8, error) {
	return _BUSD.Contract.Decimals(&_BUSD.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_BUSD *BUSDCallerSession) Decimals() (uint8, error) {
	return _BUSD.Contract.Decimals(&_BUSD.CallOpts)
}

// GetBlackListStatus is a free data retrieval call binding the contract method 0x59bf1abe.
//
// Solidity: function getBlackListStatus(address _maker) view returns(bool)
func (_BUSD *BUSDCaller) GetBlackListStatus(opts *bind.CallOpts, _maker common.Address) (bool, error) {
	var out []interface{}
	err := _BUSD.contract.Call(opts, &out, "getBlackListStatus", _maker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetBlackListStatus is a free data retrieval call binding the contract method 0x59bf1abe.
//
// Solidity: function getBlackListStatus(address _maker) view returns(bool)
func (_BUSD *BUSDSession) GetBlackListStatus(_maker common.Address) (bool, error) {
	return _BUSD.Contract.GetBlackListStatus(&_BUSD.CallOpts, _maker)
}

// GetBlackListStatus is a free data retrieval call binding the contract method 0x59bf1abe.
//
// Solidity: function getBlackListStatus(address _maker) view returns(bool)
func (_BUSD *BUSDCallerSession) GetBlackListStatus(_maker common.Address) (bool, error) {
	return _BUSD.Contract.GetBlackListStatus(&_BUSD.CallOpts, _maker)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_BUSD *BUSDCaller) GetOwner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BUSD.contract.Call(opts, &out, "getOwner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_BUSD *BUSDSession) GetOwner() (common.Address, error) {
	return _BUSD.Contract.GetOwner(&_BUSD.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_BUSD *BUSDCallerSession) GetOwner() (common.Address, error) {
	return _BUSD.Contract.GetOwner(&_BUSD.CallOpts)
}

// IsBlackListed is a free data retrieval call binding the contract method 0xe47d6060.
//
// Solidity: function isBlackListed(address ) view returns(bool)
func (_BUSD *BUSDCaller) IsBlackListed(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _BUSD.contract.Call(opts, &out, "isBlackListed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBlackListed is a free data retrieval call binding the contract method 0xe47d6060.
//
// Solidity: function isBlackListed(address ) view returns(bool)
func (_BUSD *BUSDSession) IsBlackListed(arg0 common.Address) (bool, error) {
	return _BUSD.Contract.IsBlackListed(&_BUSD.CallOpts, arg0)
}

// IsBlackListed is a free data retrieval call binding the contract method 0xe47d6060.
//
// Solidity: function isBlackListed(address ) view returns(bool)
func (_BUSD *BUSDCallerSession) IsBlackListed(arg0 common.Address) (bool, error) {
	return _BUSD.Contract.IsBlackListed(&_BUSD.CallOpts, arg0)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_BUSD *BUSDCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BUSD.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_BUSD *BUSDSession) Name() (string, error) {
	return _BUSD.Contract.Name(&_BUSD.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_BUSD *BUSDCallerSession) Name() (string, error) {
	return _BUSD.Contract.Name(&_BUSD.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BUSD *BUSDCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BUSD.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BUSD *BUSDSession) Owner() (common.Address, error) {
	return _BUSD.Contract.Owner(&_BUSD.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BUSD *BUSDCallerSession) Owner() (common.Address, error) {
	return _BUSD.Contract.Owner(&_BUSD.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_BUSD *BUSDCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BUSD.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_BUSD *BUSDSession) Paused() (bool, error) {
	return _BUSD.Contract.Paused(&_BUSD.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_BUSD *BUSDCallerSession) Paused() (bool, error) {
	return _BUSD.Contract.Paused(&_BUSD.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_BUSD *BUSDCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BUSD.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_BUSD *BUSDSession) Symbol() (string, error) {
	return _BUSD.Contract.Symbol(&_BUSD.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_BUSD *BUSDCallerSession) Symbol() (string, error) {
	return _BUSD.Contract.Symbol(&_BUSD.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BUSD *BUSDCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BUSD.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BUSD *BUSDSession) TotalSupply() (*big.Int, error) {
	return _BUSD.Contract.TotalSupply(&_BUSD.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BUSD *BUSDCallerSession) TotalSupply() (*big.Int, error) {
	return _BUSD.Contract.TotalSupply(&_BUSD.CallOpts)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x46f2ed2e.
//
// Solidity: function addAdmin(address a, uint256 maxIssuingTokenPerTime, uint256 maxTotalIssuingToken) returns()
func (_BUSD *BUSDTransactor) AddAdmin(opts *bind.TransactOpts, a common.Address, maxIssuingTokenPerTime *big.Int, maxTotalIssuingToken *big.Int) (*types.Transaction, error) {
	return _BUSD.contract.Transact(opts, "addAdmin", a, maxIssuingTokenPerTime, maxTotalIssuingToken)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x46f2ed2e.
//
// Solidity: function addAdmin(address a, uint256 maxIssuingTokenPerTime, uint256 maxTotalIssuingToken) returns()
func (_BUSD *BUSDSession) AddAdmin(a common.Address, maxIssuingTokenPerTime *big.Int, maxTotalIssuingToken *big.Int) (*types.Transaction, error) {
	return _BUSD.Contract.AddAdmin(&_BUSD.TransactOpts, a, maxIssuingTokenPerTime, maxTotalIssuingToken)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x46f2ed2e.
//
// Solidity: function addAdmin(address a, uint256 maxIssuingTokenPerTime, uint256 maxTotalIssuingToken) returns()
func (_BUSD *BUSDTransactorSession) AddAdmin(a common.Address, maxIssuingTokenPerTime *big.Int, maxTotalIssuingToken *big.Int) (*types.Transaction, error) {
	return _BUSD.Contract.AddAdmin(&_BUSD.TransactOpts, a, maxIssuingTokenPerTime, maxTotalIssuingToken)
}

// AddBlackList is a paid mutator transaction binding the contract method 0x0ecb93c0.
//
// Solidity: function addBlackList(address _evilUser) returns()
func (_BUSD *BUSDTransactor) AddBlackList(opts *bind.TransactOpts, _evilUser common.Address) (*types.Transaction, error) {
	return _BUSD.contract.Transact(opts, "addBlackList", _evilUser)
}

// AddBlackList is a paid mutator transaction binding the contract method 0x0ecb93c0.
//
// Solidity: function addBlackList(address _evilUser) returns()
func (_BUSD *BUSDSession) AddBlackList(_evilUser common.Address) (*types.Transaction, error) {
	return _BUSD.Contract.AddBlackList(&_BUSD.TransactOpts, _evilUser)
}

// AddBlackList is a paid mutator transaction binding the contract method 0x0ecb93c0.
//
// Solidity: function addBlackList(address _evilUser) returns()
func (_BUSD *BUSDTransactorSession) AddBlackList(_evilUser common.Address) (*types.Transaction, error) {
	return _BUSD.Contract.AddBlackList(&_BUSD.TransactOpts, _evilUser)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_BUSD *BUSDTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BUSD.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_BUSD *BUSDSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BUSD.Contract.Approve(&_BUSD.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_BUSD *BUSDTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BUSD.Contract.Approve(&_BUSD.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_BUSD *BUSDTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _BUSD.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_BUSD *BUSDSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _BUSD.Contract.DecreaseAllowance(&_BUSD.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_BUSD *BUSDTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _BUSD.Contract.DecreaseAllowance(&_BUSD.TransactOpts, spender, subtractedValue)
}

// DestroyBlackFunds is a paid mutator transaction binding the contract method 0xf3bdc228.
//
// Solidity: function destroyBlackFunds(address _blackListedUser) returns()
func (_BUSD *BUSDTransactor) DestroyBlackFunds(opts *bind.TransactOpts, _blackListedUser common.Address) (*types.Transaction, error) {
	return _BUSD.contract.Transact(opts, "destroyBlackFunds", _blackListedUser)
}

// DestroyBlackFunds is a paid mutator transaction binding the contract method 0xf3bdc228.
//
// Solidity: function destroyBlackFunds(address _blackListedUser) returns()
func (_BUSD *BUSDSession) DestroyBlackFunds(_blackListedUser common.Address) (*types.Transaction, error) {
	return _BUSD.Contract.DestroyBlackFunds(&_BUSD.TransactOpts, _blackListedUser)
}

// DestroyBlackFunds is a paid mutator transaction binding the contract method 0xf3bdc228.
//
// Solidity: function destroyBlackFunds(address _blackListedUser) returns()
func (_BUSD *BUSDTransactorSession) DestroyBlackFunds(_blackListedUser common.Address) (*types.Transaction, error) {
	return _BUSD.Contract.DestroyBlackFunds(&_BUSD.TransactOpts, _blackListedUser)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_BUSD *BUSDTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _BUSD.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_BUSD *BUSDSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _BUSD.Contract.IncreaseAllowance(&_BUSD.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_BUSD *BUSDTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _BUSD.Contract.IncreaseAllowance(&_BUSD.TransactOpts, spender, addedValue)
}

// Issue is a paid mutator transaction binding the contract method 0xea3f068d.
//
// Solidity: function issue(address issuer, uint256 value, bytes32 offchain) returns()
func (_BUSD *BUSDTransactor) Issue(opts *bind.TransactOpts, issuer common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _BUSD.contract.Transact(opts, "issue", issuer, value, offchain)
}

// Issue is a paid mutator transaction binding the contract method 0xea3f068d.
//
// Solidity: function issue(address issuer, uint256 value, bytes32 offchain) returns()
func (_BUSD *BUSDSession) Issue(issuer common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _BUSD.Contract.Issue(&_BUSD.TransactOpts, issuer, value, offchain)
}

// Issue is a paid mutator transaction binding the contract method 0xea3f068d.
//
// Solidity: function issue(address issuer, uint256 value, bytes32 offchain) returns()
func (_BUSD *BUSDTransactorSession) Issue(issuer common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _BUSD.Contract.Issue(&_BUSD.TransactOpts, issuer, value, offchain)
}

// IssueByAdmin is a paid mutator transaction binding the contract method 0xd10601ec.
//
// Solidity: function issueByAdmin(address issuer, uint256 value, bytes32 offchain) returns()
func (_BUSD *BUSDTransactor) IssueByAdmin(opts *bind.TransactOpts, issuer common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _BUSD.contract.Transact(opts, "issueByAdmin", issuer, value, offchain)
}

// IssueByAdmin is a paid mutator transaction binding the contract method 0xd10601ec.
//
// Solidity: function issueByAdmin(address issuer, uint256 value, bytes32 offchain) returns()
func (_BUSD *BUSDSession) IssueByAdmin(issuer common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _BUSD.Contract.IssueByAdmin(&_BUSD.TransactOpts, issuer, value, offchain)
}

// IssueByAdmin is a paid mutator transaction binding the contract method 0xd10601ec.
//
// Solidity: function issueByAdmin(address issuer, uint256 value, bytes32 offchain) returns()
func (_BUSD *BUSDTransactorSession) IssueByAdmin(issuer common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _BUSD.Contract.IssueByAdmin(&_BUSD.TransactOpts, issuer, value, offchain)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount) returns(bool)
func (_BUSD *BUSDTransactor) Mint(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _BUSD.contract.Transact(opts, "mint", amount)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount) returns(bool)
func (_BUSD *BUSDSession) Mint(amount *big.Int) (*types.Transaction, error) {
	return _BUSD.Contract.Mint(&_BUSD.TransactOpts, amount)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount) returns(bool)
func (_BUSD *BUSDTransactorSession) Mint(amount *big.Int) (*types.Transaction, error) {
	return _BUSD.Contract.Mint(&_BUSD.TransactOpts, amount)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_BUSD *BUSDTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BUSD.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_BUSD *BUSDSession) Pause() (*types.Transaction, error) {
	return _BUSD.Contract.Pause(&_BUSD.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_BUSD *BUSDTransactorSession) Pause() (*types.Transaction, error) {
	return _BUSD.Contract.Pause(&_BUSD.TransactOpts)
}

// Redeem is a paid mutator transaction binding the contract method 0x992c3e4b.
//
// Solidity: function redeem(address redeemer, uint256 value, bytes32 offchain) returns()
func (_BUSD *BUSDTransactor) Redeem(opts *bind.TransactOpts, redeemer common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _BUSD.contract.Transact(opts, "redeem", redeemer, value, offchain)
}

// Redeem is a paid mutator transaction binding the contract method 0x992c3e4b.
//
// Solidity: function redeem(address redeemer, uint256 value, bytes32 offchain) returns()
func (_BUSD *BUSDSession) Redeem(redeemer common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _BUSD.Contract.Redeem(&_BUSD.TransactOpts, redeemer, value, offchain)
}

// Redeem is a paid mutator transaction binding the contract method 0x992c3e4b.
//
// Solidity: function redeem(address redeemer, uint256 value, bytes32 offchain) returns()
func (_BUSD *BUSDTransactorSession) Redeem(redeemer common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _BUSD.Contract.Redeem(&_BUSD.TransactOpts, redeemer, value, offchain)
}

// RemoveAdmin is a paid mutator transaction binding the contract method 0x1785f53c.
//
// Solidity: function removeAdmin(address a) returns()
func (_BUSD *BUSDTransactor) RemoveAdmin(opts *bind.TransactOpts, a common.Address) (*types.Transaction, error) {
	return _BUSD.contract.Transact(opts, "removeAdmin", a)
}

// RemoveAdmin is a paid mutator transaction binding the contract method 0x1785f53c.
//
// Solidity: function removeAdmin(address a) returns()
func (_BUSD *BUSDSession) RemoveAdmin(a common.Address) (*types.Transaction, error) {
	return _BUSD.Contract.RemoveAdmin(&_BUSD.TransactOpts, a)
}

// RemoveAdmin is a paid mutator transaction binding the contract method 0x1785f53c.
//
// Solidity: function removeAdmin(address a) returns()
func (_BUSD *BUSDTransactorSession) RemoveAdmin(a common.Address) (*types.Transaction, error) {
	return _BUSD.Contract.RemoveAdmin(&_BUSD.TransactOpts, a)
}

// RemoveBlackList is a paid mutator transaction binding the contract method 0xe4997dc5.
//
// Solidity: function removeBlackList(address _clearedUser) returns()
func (_BUSD *BUSDTransactor) RemoveBlackList(opts *bind.TransactOpts, _clearedUser common.Address) (*types.Transaction, error) {
	return _BUSD.contract.Transact(opts, "removeBlackList", _clearedUser)
}

// RemoveBlackList is a paid mutator transaction binding the contract method 0xe4997dc5.
//
// Solidity: function removeBlackList(address _clearedUser) returns()
func (_BUSD *BUSDSession) RemoveBlackList(_clearedUser common.Address) (*types.Transaction, error) {
	return _BUSD.Contract.RemoveBlackList(&_BUSD.TransactOpts, _clearedUser)
}

// RemoveBlackList is a paid mutator transaction binding the contract method 0xe4997dc5.
//
// Solidity: function removeBlackList(address _clearedUser) returns()
func (_BUSD *BUSDTransactorSession) RemoveBlackList(_clearedUser common.Address) (*types.Transaction, error) {
	return _BUSD.Contract.RemoveBlackList(&_BUSD.TransactOpts, _clearedUser)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BUSD *BUSDTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BUSD.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BUSD *BUSDSession) RenounceOwnership() (*types.Transaction, error) {
	return _BUSD.Contract.RenounceOwnership(&_BUSD.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BUSD *BUSDTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BUSD.Contract.RenounceOwnership(&_BUSD.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _value) returns(bool)
func (_BUSD *BUSDTransactor) Transfer(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _BUSD.contract.Transact(opts, "transfer", _to, _value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _value) returns(bool)
func (_BUSD *BUSDSession) Transfer(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _BUSD.Contract.Transfer(&_BUSD.TransactOpts, _to, _value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _value) returns(bool)
func (_BUSD *BUSDTransactorSession) Transfer(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _BUSD.Contract.Transfer(&_BUSD.TransactOpts, _to, _value)
}

// TransferByAdmin is a paid mutator transaction binding the contract method 0xf9ba884f.
//
// Solidity: function transferByAdmin(address from, address to, uint256 value, bytes32 offchain) returns()
func (_BUSD *BUSDTransactor) TransferByAdmin(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _BUSD.contract.Transact(opts, "transferByAdmin", from, to, value, offchain)
}

// TransferByAdmin is a paid mutator transaction binding the contract method 0xf9ba884f.
//
// Solidity: function transferByAdmin(address from, address to, uint256 value, bytes32 offchain) returns()
func (_BUSD *BUSDSession) TransferByAdmin(from common.Address, to common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _BUSD.Contract.TransferByAdmin(&_BUSD.TransactOpts, from, to, value, offchain)
}

// TransferByAdmin is a paid mutator transaction binding the contract method 0xf9ba884f.
//
// Solidity: function transferByAdmin(address from, address to, uint256 value, bytes32 offchain) returns()
func (_BUSD *BUSDTransactorSession) TransferByAdmin(from common.Address, to common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _BUSD.Contract.TransferByAdmin(&_BUSD.TransactOpts, from, to, value, offchain)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _value) returns(bool)
func (_BUSD *BUSDTransactor) TransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _BUSD.contract.Transact(opts, "transferFrom", _from, _to, _value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _value) returns(bool)
func (_BUSD *BUSDSession) TransferFrom(_from common.Address, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _BUSD.Contract.TransferFrom(&_BUSD.TransactOpts, _from, _to, _value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _value) returns(bool)
func (_BUSD *BUSDTransactorSession) TransferFrom(_from common.Address, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _BUSD.Contract.TransferFrom(&_BUSD.TransactOpts, _from, _to, _value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BUSD *BUSDTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BUSD.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BUSD *BUSDSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BUSD.Contract.TransferOwnership(&_BUSD.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BUSD *BUSDTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BUSD.Contract.TransferOwnership(&_BUSD.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_BUSD *BUSDTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BUSD.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_BUSD *BUSDSession) Unpause() (*types.Transaction, error) {
	return _BUSD.Contract.Unpause(&_BUSD.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_BUSD *BUSDTransactorSession) Unpause() (*types.Transaction, error) {
	return _BUSD.Contract.Unpause(&_BUSD.TransactOpts)
}

// BUSDAddedBlackListIterator is returned from FilterAddedBlackList and is used to iterate over the raw logs and unpacked data for AddedBlackList events raised by the BUSD contract.
type BUSDAddedBlackListIterator struct {
	Event *BUSDAddedBlackList // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BUSDAddedBlackListIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BUSDAddedBlackList)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BUSDAddedBlackList)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BUSDAddedBlackListIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BUSDAddedBlackListIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BUSDAddedBlackList represents a AddedBlackList event raised by the BUSD contract.
type BUSDAddedBlackList struct {
	User common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAddedBlackList is a free log retrieval operation binding the contract event 0x42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc.
//
// Solidity: event AddedBlackList(address _user)
func (_BUSD *BUSDFilterer) FilterAddedBlackList(opts *bind.FilterOpts) (*BUSDAddedBlackListIterator, error) {

	logs, sub, err := _BUSD.contract.FilterLogs(opts, "AddedBlackList")
	if err != nil {
		return nil, err
	}
	return &BUSDAddedBlackListIterator{contract: _BUSD.contract, event: "AddedBlackList", logs: logs, sub: sub}, nil
}

// WatchAddedBlackList is a free log subscription operation binding the contract event 0x42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc.
//
// Solidity: event AddedBlackList(address _user)
func (_BUSD *BUSDFilterer) WatchAddedBlackList(opts *bind.WatchOpts, sink chan<- *BUSDAddedBlackList) (event.Subscription, error) {

	logs, sub, err := _BUSD.contract.WatchLogs(opts, "AddedBlackList")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BUSDAddedBlackList)
				if err := _BUSD.contract.UnpackLog(event, "AddedBlackList", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddedBlackList is a log parse operation binding the contract event 0x42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc.
//
// Solidity: event AddedBlackList(address _user)
func (_BUSD *BUSDFilterer) ParseAddedBlackList(log types.Log) (*BUSDAddedBlackList, error) {
	event := new(BUSDAddedBlackList)
	if err := _BUSD.contract.UnpackLog(event, "AddedBlackList", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BUSDApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the BUSD contract.
type BUSDApprovalIterator struct {
	Event *BUSDApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BUSDApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BUSDApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BUSDApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BUSDApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BUSDApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BUSDApproval represents a Approval event raised by the BUSD contract.
type BUSDApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_BUSD *BUSDFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*BUSDApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _BUSD.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &BUSDApprovalIterator{contract: _BUSD.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_BUSD *BUSDFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *BUSDApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _BUSD.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BUSDApproval)
				if err := _BUSD.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_BUSD *BUSDFilterer) ParseApproval(log types.Log) (*BUSDApproval, error) {
	event := new(BUSDApproval)
	if err := _BUSD.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BUSDDestroyedBlackFundsIterator is returned from FilterDestroyedBlackFunds and is used to iterate over the raw logs and unpacked data for DestroyedBlackFunds events raised by the BUSD contract.
type BUSDDestroyedBlackFundsIterator struct {
	Event *BUSDDestroyedBlackFunds // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BUSDDestroyedBlackFundsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BUSDDestroyedBlackFunds)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BUSDDestroyedBlackFunds)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BUSDDestroyedBlackFundsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BUSDDestroyedBlackFundsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BUSDDestroyedBlackFunds represents a DestroyedBlackFunds event raised by the BUSD contract.
type BUSDDestroyedBlackFunds struct {
	BlackListedUser common.Address
	Balance         *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDestroyedBlackFunds is a free log retrieval operation binding the contract event 0x61e6e66b0d6339b2980aecc6ccc0039736791f0ccde9ed512e789a7fbdd698c6.
//
// Solidity: event DestroyedBlackFunds(address _blackListedUser, uint256 _balance)
func (_BUSD *BUSDFilterer) FilterDestroyedBlackFunds(opts *bind.FilterOpts) (*BUSDDestroyedBlackFundsIterator, error) {

	logs, sub, err := _BUSD.contract.FilterLogs(opts, "DestroyedBlackFunds")
	if err != nil {
		return nil, err
	}
	return &BUSDDestroyedBlackFundsIterator{contract: _BUSD.contract, event: "DestroyedBlackFunds", logs: logs, sub: sub}, nil
}

// WatchDestroyedBlackFunds is a free log subscription operation binding the contract event 0x61e6e66b0d6339b2980aecc6ccc0039736791f0ccde9ed512e789a7fbdd698c6.
//
// Solidity: event DestroyedBlackFunds(address _blackListedUser, uint256 _balance)
func (_BUSD *BUSDFilterer) WatchDestroyedBlackFunds(opts *bind.WatchOpts, sink chan<- *BUSDDestroyedBlackFunds) (event.Subscription, error) {

	logs, sub, err := _BUSD.contract.WatchLogs(opts, "DestroyedBlackFunds")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BUSDDestroyedBlackFunds)
				if err := _BUSD.contract.UnpackLog(event, "DestroyedBlackFunds", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDestroyedBlackFunds is a log parse operation binding the contract event 0x61e6e66b0d6339b2980aecc6ccc0039736791f0ccde9ed512e789a7fbdd698c6.
//
// Solidity: event DestroyedBlackFunds(address _blackListedUser, uint256 _balance)
func (_BUSD *BUSDFilterer) ParseDestroyedBlackFunds(log types.Log) (*BUSDDestroyedBlackFunds, error) {
	event := new(BUSDDestroyedBlackFunds)
	if err := _BUSD.contract.UnpackLog(event, "DestroyedBlackFunds", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BUSDOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the BUSD contract.
type BUSDOwnershipTransferredIterator struct {
	Event *BUSDOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BUSDOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BUSDOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BUSDOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BUSDOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BUSDOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BUSDOwnershipTransferred represents a OwnershipTransferred event raised by the BUSD contract.
type BUSDOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BUSD *BUSDFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BUSDOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BUSD.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BUSDOwnershipTransferredIterator{contract: _BUSD.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BUSD *BUSDFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BUSDOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BUSD.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BUSDOwnershipTransferred)
				if err := _BUSD.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BUSD *BUSDFilterer) ParseOwnershipTransferred(log types.Log) (*BUSDOwnershipTransferred, error) {
	event := new(BUSDOwnershipTransferred)
	if err := _BUSD.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BUSDPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the BUSD contract.
type BUSDPausedIterator struct {
	Event *BUSDPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BUSDPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BUSDPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BUSDPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BUSDPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BUSDPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BUSDPaused represents a Paused event raised by the BUSD contract.
type BUSDPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_BUSD *BUSDFilterer) FilterPaused(opts *bind.FilterOpts) (*BUSDPausedIterator, error) {

	logs, sub, err := _BUSD.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &BUSDPausedIterator{contract: _BUSD.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_BUSD *BUSDFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *BUSDPaused) (event.Subscription, error) {

	logs, sub, err := _BUSD.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BUSDPaused)
				if err := _BUSD.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_BUSD *BUSDFilterer) ParsePaused(log types.Log) (*BUSDPaused, error) {
	event := new(BUSDPaused)
	if err := _BUSD.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BUSDRemovedBlackListIterator is returned from FilterRemovedBlackList and is used to iterate over the raw logs and unpacked data for RemovedBlackList events raised by the BUSD contract.
type BUSDRemovedBlackListIterator struct {
	Event *BUSDRemovedBlackList // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BUSDRemovedBlackListIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BUSDRemovedBlackList)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BUSDRemovedBlackList)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BUSDRemovedBlackListIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BUSDRemovedBlackListIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BUSDRemovedBlackList represents a RemovedBlackList event raised by the BUSD contract.
type BUSDRemovedBlackList struct {
	User common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRemovedBlackList is a free log retrieval operation binding the contract event 0xd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c.
//
// Solidity: event RemovedBlackList(address _user)
func (_BUSD *BUSDFilterer) FilterRemovedBlackList(opts *bind.FilterOpts) (*BUSDRemovedBlackListIterator, error) {

	logs, sub, err := _BUSD.contract.FilterLogs(opts, "RemovedBlackList")
	if err != nil {
		return nil, err
	}
	return &BUSDRemovedBlackListIterator{contract: _BUSD.contract, event: "RemovedBlackList", logs: logs, sub: sub}, nil
}

// WatchRemovedBlackList is a free log subscription operation binding the contract event 0xd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c.
//
// Solidity: event RemovedBlackList(address _user)
func (_BUSD *BUSDFilterer) WatchRemovedBlackList(opts *bind.WatchOpts, sink chan<- *BUSDRemovedBlackList) (event.Subscription, error) {

	logs, sub, err := _BUSD.contract.WatchLogs(opts, "RemovedBlackList")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BUSDRemovedBlackList)
				if err := _BUSD.contract.UnpackLog(event, "RemovedBlackList", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemovedBlackList is a log parse operation binding the contract event 0xd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c.
//
// Solidity: event RemovedBlackList(address _user)
func (_BUSD *BUSDFilterer) ParseRemovedBlackList(log types.Log) (*BUSDRemovedBlackList, error) {
	event := new(BUSDRemovedBlackList)
	if err := _BUSD.contract.UnpackLog(event, "RemovedBlackList", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BUSDTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the BUSD contract.
type BUSDTransferIterator struct {
	Event *BUSDTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BUSDTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BUSDTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BUSDTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BUSDTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BUSDTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BUSDTransfer represents a Transfer event raised by the BUSD contract.
type BUSDTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_BUSD *BUSDFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*BUSDTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BUSD.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BUSDTransferIterator{contract: _BUSD.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_BUSD *BUSDFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *BUSDTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BUSD.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BUSDTransfer)
				if err := _BUSD.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_BUSD *BUSDFilterer) ParseTransfer(log types.Log) (*BUSDTransfer, error) {
	event := new(BUSDTransfer)
	if err := _BUSD.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BUSDUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the BUSD contract.
type BUSDUnpausedIterator struct {
	Event *BUSDUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BUSDUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BUSDUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BUSDUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BUSDUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BUSDUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BUSDUnpaused represents a Unpaused event raised by the BUSD contract.
type BUSDUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_BUSD *BUSDFilterer) FilterUnpaused(opts *bind.FilterOpts) (*BUSDUnpausedIterator, error) {

	logs, sub, err := _BUSD.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &BUSDUnpausedIterator{contract: _BUSD.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_BUSD *BUSDFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *BUSDUnpaused) (event.Subscription, error) {

	logs, sub, err := _BUSD.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BUSDUnpaused)
				if err := _BUSD.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_BUSD *BUSDFilterer) ParseUnpaused(log types.Log) (*BUSDUnpaused, error) {
	event := new(BUSDUnpaused)
	if err := _BUSD.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BUSDIssueIterator is returned from FilterIssue and is used to iterate over the raw logs and unpacked data for Issue events raised by the BUSD contract.
type BUSDIssueIterator struct {
	Event *BUSDIssue // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BUSDIssueIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BUSDIssue)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BUSDIssue)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BUSDIssueIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BUSDIssueIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BUSDIssue represents a Issue event raised by the BUSD contract.
type BUSDIssue struct {
	Offchain [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterIssue is a free log retrieval operation binding the contract event 0x182a88d3fbfcb38ffaddf26e6d63ecd93b4348141de1eb744c43c4fbb1ccfb22.
//
// Solidity: event __issue(bytes32 offchain)
func (_BUSD *BUSDFilterer) FilterIssue(opts *bind.FilterOpts) (*BUSDIssueIterator, error) {

	logs, sub, err := _BUSD.contract.FilterLogs(opts, "__issue")
	if err != nil {
		return nil, err
	}
	return &BUSDIssueIterator{contract: _BUSD.contract, event: "__issue", logs: logs, sub: sub}, nil
}

// WatchIssue is a free log subscription operation binding the contract event 0x182a88d3fbfcb38ffaddf26e6d63ecd93b4348141de1eb744c43c4fbb1ccfb22.
//
// Solidity: event __issue(bytes32 offchain)
func (_BUSD *BUSDFilterer) WatchIssue(opts *bind.WatchOpts, sink chan<- *BUSDIssue) (event.Subscription, error) {

	logs, sub, err := _BUSD.contract.WatchLogs(opts, "__issue")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BUSDIssue)
				if err := _BUSD.contract.UnpackLog(event, "__issue", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIssue is a log parse operation binding the contract event 0x182a88d3fbfcb38ffaddf26e6d63ecd93b4348141de1eb744c43c4fbb1ccfb22.
//
// Solidity: event __issue(bytes32 offchain)
func (_BUSD *BUSDFilterer) ParseIssue(log types.Log) (*BUSDIssue, error) {
	event := new(BUSDIssue)
	if err := _BUSD.contract.UnpackLog(event, "__issue", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BUSDRedeemIterator is returned from FilterRedeem and is used to iterate over the raw logs and unpacked data for Redeem events raised by the BUSD contract.
type BUSDRedeemIterator struct {
	Event *BUSDRedeem // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BUSDRedeemIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BUSDRedeem)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BUSDRedeem)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BUSDRedeemIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BUSDRedeemIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BUSDRedeem represents a Redeem event raised by the BUSD contract.
type BUSDRedeem struct {
	Offchain [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRedeem is a free log retrieval operation binding the contract event 0xb0de879351469d2741406aafc9ba1f44eb957cf44ee3391e59a7a9097050c927.
//
// Solidity: event __redeem(bytes32 offchain)
func (_BUSD *BUSDFilterer) FilterRedeem(opts *bind.FilterOpts) (*BUSDRedeemIterator, error) {

	logs, sub, err := _BUSD.contract.FilterLogs(opts, "__redeem")
	if err != nil {
		return nil, err
	}
	return &BUSDRedeemIterator{contract: _BUSD.contract, event: "__redeem", logs: logs, sub: sub}, nil
}

// WatchRedeem is a free log subscription operation binding the contract event 0xb0de879351469d2741406aafc9ba1f44eb957cf44ee3391e59a7a9097050c927.
//
// Solidity: event __redeem(bytes32 offchain)
func (_BUSD *BUSDFilterer) WatchRedeem(opts *bind.WatchOpts, sink chan<- *BUSDRedeem) (event.Subscription, error) {

	logs, sub, err := _BUSD.contract.WatchLogs(opts, "__redeem")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BUSDRedeem)
				if err := _BUSD.contract.UnpackLog(event, "__redeem", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeem is a log parse operation binding the contract event 0xb0de879351469d2741406aafc9ba1f44eb957cf44ee3391e59a7a9097050c927.
//
// Solidity: event __redeem(bytes32 offchain)
func (_BUSD *BUSDFilterer) ParseRedeem(log types.Log) (*BUSDRedeem, error) {
	event := new(BUSDRedeem)
	if err := _BUSD.contract.UnpackLog(event, "__redeem", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BUSDTransferByAdminIterator is returned from FilterTransferByAdmin and is used to iterate over the raw logs and unpacked data for TransferByAdmin events raised by the BUSD contract.
type BUSDTransferByAdminIterator struct {
	Event *BUSDTransferByAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BUSDTransferByAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BUSDTransferByAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BUSDTransferByAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BUSDTransferByAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BUSDTransferByAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BUSDTransferByAdmin represents a TransferByAdmin event raised by the BUSD contract.
type BUSDTransferByAdmin struct {
	Offchain [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferByAdmin is a free log retrieval operation binding the contract event 0x3b36ee6b35325f38e95938557be92853c842b7a9a19fd7ac4931a6d24db52682.
//
// Solidity: event __transferByAdmin(bytes32 offchain)
func (_BUSD *BUSDFilterer) FilterTransferByAdmin(opts *bind.FilterOpts) (*BUSDTransferByAdminIterator, error) {

	logs, sub, err := _BUSD.contract.FilterLogs(opts, "__transferByAdmin")
	if err != nil {
		return nil, err
	}
	return &BUSDTransferByAdminIterator{contract: _BUSD.contract, event: "__transferByAdmin", logs: logs, sub: sub}, nil
}

// WatchTransferByAdmin is a free log subscription operation binding the contract event 0x3b36ee6b35325f38e95938557be92853c842b7a9a19fd7ac4931a6d24db52682.
//
// Solidity: event __transferByAdmin(bytes32 offchain)
func (_BUSD *BUSDFilterer) WatchTransferByAdmin(opts *bind.WatchOpts, sink chan<- *BUSDTransferByAdmin) (event.Subscription, error) {

	logs, sub, err := _BUSD.contract.WatchLogs(opts, "__transferByAdmin")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BUSDTransferByAdmin)
				if err := _BUSD.contract.UnpackLog(event, "__transferByAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferByAdmin is a log parse operation binding the contract event 0x3b36ee6b35325f38e95938557be92853c842b7a9a19fd7ac4931a6d24db52682.
//
// Solidity: event __transferByAdmin(bytes32 offchain)
func (_BUSD *BUSDFilterer) ParseTransferByAdmin(log types.Log) (*BUSDTransferByAdmin, error) {
	event := new(BUSDTransferByAdmin)
	if err := _BUSD.contract.UnpackLog(event, "__transferByAdmin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
