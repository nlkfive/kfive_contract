// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package LF5Exchange

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// LF5ExchangeMetaData contains all meta data concerning the LF5Exchange contract.
var LF5ExchangeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"magicBoxReward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReceiveLF5Failed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumLF5Exchange.BoxType\",\"name\":\"boxType\",\"type\":\"uint8\"}],\"name\":\"ExchangeSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"nftData\",\"type\":\"bytes\"}],\"name\":\"exchangeForLF5\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620031ab380380620031ab833981810160405281019062000037919062000900565b620000576200004b6200041a60201b60201c565b6200042260201b60201c565b6000600260146101000a81548160ff021916908315150217905550620000966000801b6200008a6200041a60201b60201c565b620004e860201b60201c565b620000d77fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775620000cb6200041a60201b60201c565b620004e860201b60201c565b620001297f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775620004fe60201b60201c565b620001558273ffffffffffffffffffffffffffffffffffffffff166200056160201b62000bbc1760201c565b6200018c576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620001b88173ffffffffffffffffffffffffffffffffffffffff166200056160201b62000bbc1760201c565b620001ef576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600f60056000806002811115620002b1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811115620002ea577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001908152602001600020819055506005806000600160028111156200033c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281111562000375577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b815260200190815260200160002081905550600160056000600280811115620003c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281111562000400577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020019081526020016000208190555050506200098f565b600033905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620004fa82826200058460201b60201c565b5050565b600062000511836200065260201b60201c565b905081600080858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6200059b82826200067160201b62000bdf1760201c565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775821480620005cc57506000801b82145b156200064e57620006097f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a826200067160201b62000bdf1760201c565b6000801b8214156200064d576200064c7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775826200067160201b62000bdf1760201c565b5b5b5050565b6000806000838152602001908152602001600020600101549050919050565b620006888282620006b960201b62000c131760201c565b620006b48160016000858152602001908152602001600020620007aa60201b62000cf31790919060201c565b505050565b620006cb8282620007e260201b60201c565b620007a657600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506200074b6200041a60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000620007da836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6200084c60201b60201c565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000620008608383620008c660201b60201c565b620008bb578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050620008c0565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081519050620008fa8162000975565b92915050565b600080604083850312156200091457600080fd5b60006200092485828601620008e9565b92505060206200093785828601620008e9565b9150509250929050565b60006200094e8262000955565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620009808162000941565b81146200098c57600080fd5b50565b61280c806200099f6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806375b238fc116100ad578063a217fddf11610071578063a217fddf146102e2578063ca15c87314610300578063d547741f14610330578063e63ab1e91461034c578063f2fde38b1461036a57610121565b806375b238fc1461023c5780638456cb591461025a5780638da5cb5b146102645780639010d07c1461028257806391d14854146102b257610121565b806336568abe116100f457806336568abe146101d25780633f4ba83a146101ee5780635c975abb146101f85780635ebea16114610216578063715018a61461023257610121565b806301ffc9a714610126578063150b7a0214610156578063248a9ca3146101865780632f2ff15d146101b6575b600080fd5b610140600480360381019061013b9190611df7565b610386565b60405161014d9190612105565b60405180910390f35b610170600480360381019061016b9190611cad565b610400565b60405161017d919061213b565b60405180910390f35b6101a0600480360381019061019b9190611d56565b61042e565b6040516101ad9190612120565b60405180910390f35b6101d060048036038101906101cb9190611d7f565b61044d565b005b6101ec60048036038101906101e79190611d7f565b61046e565b005b6101f66104f1565b005b610200610526565b60405161020d9190612105565b60405180910390f35b610230600480360381019061022b9190611e20565b61053d565b005b61023a6108a4565b005b61024461092c565b6040516102519190612120565b60405180910390f35b610262610950565b005b61026c610985565b604051610279919061208a565b60405180910390f35b61029c60048036038101906102979190611dbb565b6109af565b6040516102a9919061208a565b60405180910390f35b6102cc60048036038101906102c79190611d7f565b6109de565b6040516102d99190612105565b60405180910390f35b6102ea610a48565b6040516102f79190612120565b60405180910390f35b61031a60048036038101906103159190611d56565b610a4f565b6040516103279190612238565b60405180910390f35b61034a60048036038101906103459190611d7f565b610a73565b005b610354610a94565b6040516103619190612120565b60405180910390f35b610384600480360381019061037f9190611c5b565b610ab8565b005b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103f957506103f882610d23565b5b9050919050565b60007f150b7a023d4804d13e8c85fb27262cb750cf6ba9f9dd3bb30d90f482ceeb4b1f905095945050505050565b6000806000838152602001908152602001600020600101549050919050565b6104568261042e565b61045f81610d9d565b6104698383610db1565b505050565b610476610e55565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146104e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104da90612218565b60405180910390fd5b6104ed8282610e5d565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61051b81610d9d565b610523610f01565b50565b6000600260149054906101000a900460ff16905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b815260040161059a9190612238565b60206040518083038186803b1580156105b257600080fd5b505afa1580156105c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ea9190611c84565b905060006105f6610e55565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461065d576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006106698585610fa3565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e8330886040518463ffffffff1660e01b81526004016106ca939291906120a5565b600060405180830381600087803b1580156106e457600080fd5b505af11580156106f8573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360056000856002811115610778577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028111156107b0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001908152602001600020546040518363ffffffff1660e01b81526004016107dc9291906120dc565b602060405180830381600087803b1580156107f657600080fd5b505af115801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e9190611d2d565b610864576040517fa74238ad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0cfeb5169f7535d536dc42591d3c91c677b7a0dfa52372816ddea02da64614dc8582604051610895929190612253565b60405180910390a15050505050565b6108ac610e55565b73ffffffffffffffffffffffffffffffffffffffff166108ca610985565b73ffffffffffffffffffffffffffffffffffffffff1614610920576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610917906121f8565b60405180910390fd5b61092a60006110cc565b565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61097a81610d9d565b610982611192565b50565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006109d6826001600086815260200190815260200160002061123590919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b6000610a6c6001600084815260200190815260200160002061124f565b9050919050565b610a7c8261042e565b610a8581610d9d565b610a8f8383610e5d565b505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b610ac0610e55565b73ffffffffffffffffffffffffffffffffffffffff16610ade610985565b73ffffffffffffffffffffffffffffffffffffffff1614610b34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2b906121f8565b60405180910390fd5b610b5e7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582610db1565b610b6b6000801b82610db1565b610b9c7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610b97610985565b610e5d565b610bb06000801b610bab610985565b610e5d565b610bb981611264565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b610be98282610c13565b610c0e8160016000858152602001908152602001600020610cf390919063ffffffff16565b505050565b610c1d82826109de565b610cef57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610c94610e55565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000610d1b836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61135c565b905092915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610d965750610d95826113cc565b5b9050919050565b610dae81610da9610e55565b611436565b50565b610dbb8282610bdf565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775821480610deb57506000801b82145b15610e5157610e1a7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a82610bdf565b6000801b821415610e5057610e4f7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582610bdf565b5b5b5050565b600033905090565b610e6782826114d3565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775821480610e9757506000801b82145b15610efd57610ec67f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a826114d3565b6000801b821415610efc57610efb7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582610bdf565b5b5b5050565b610f09610526565b610f48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3f90612198565b60405180910390fd5b6000600260146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610f8c610e55565b604051610f99919061208a565b60405180910390a1565b6000818051906020012060001c8314610fe8576040517f28829e8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610ff383611507565b90507f7b226e616d65223a224f70656e20476f6c6420426f78222c22676966745f636f60001b81141561102957600091506110c5565b7f7b226e616d65223a224f70656e2053696c76657220426f78222c22676966745f60001b81141561105d57600191506110c4565b7f7b226e616d65223a224f70656e2042726f6e7a6520426f78222c22676966745f60001b81141561109157600291506110c3565b6040517f28829e8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5b5092915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61119a610526565b156111da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d1906121d8565b60405180910390fd5b6001600260146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861121e610e55565b60405161122b919061208a565b60405180910390a1565b60006112448360000183611515565b60001c905092915050565b600061125d82600001611566565b9050919050565b61126c610e55565b73ffffffffffffffffffffffffffffffffffffffff1661128a610985565b73ffffffffffffffffffffffffffffffffffffffff16146112e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d7906121f8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611350576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611347906121b8565b60405180910390fd5b611359816110cc565b50565b60006113688383611577565b6113c15782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506113c6565b600090505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61144082826109de565b6114cf576114658173ffffffffffffffffffffffffffffffffffffffff16601461159a565b6114738360001c602061159a565b604051602001611484929190612050565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c69190612156565b60405180910390fd5b5050565b6114dd8282611894565b611502816001600085815260200190815260200160002061197590919063ffffffff16565b505050565b600060208201519050919050565b6000826000018281548110611553577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b6060600060028360026115ad919061234f565b6115b791906122f9565b67ffffffffffffffff8111156115f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156116285781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611686577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611710577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611750919061234f565b61175a91906122f9565b90505b6001811115611846577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106117c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8282815181106117ff577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061183f906124c2565b905061175d565b506000841461188a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188190612178565b60405180910390fd5b8091505092915050565b61189e82826109de565b1561197157600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611916610e55565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600061199d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6119a5565b905092915050565b60008083600101600084815260200190815260200160002054905060008114611b1f5760006001826119d791906123a9565b90506000600186600001805490506119ef91906123a9565b9050818114611aaa576000866000018281548110611a36577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110611a80577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480611ae4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611b25565b60009150505b92915050565b6000611b3e611b39846122a1565b61227c565b905082815260208101848484011115611b5657600080fd5b611b61848285612480565b509392505050565b600081359050611b7881612763565b92915050565b600081519050611b8d81612763565b92915050565b600081519050611ba28161277a565b92915050565b600081359050611bb781612791565b92915050565b600081359050611bcc816127a8565b92915050565b60008083601f840112611be457600080fd5b8235905067ffffffffffffffff811115611bfd57600080fd5b602083019150836001820283011115611c1557600080fd5b9250929050565b600082601f830112611c2d57600080fd5b8135611c3d848260208601611b2b565b91505092915050565b600081359050611c55816127bf565b92915050565b600060208284031215611c6d57600080fd5b6000611c7b84828501611b69565b91505092915050565b600060208284031215611c9657600080fd5b6000611ca484828501611b7e565b91505092915050565b600080600080600060808688031215611cc557600080fd5b6000611cd388828901611b69565b9550506020611ce488828901611b69565b9450506040611cf588828901611c46565b935050606086013567ffffffffffffffff811115611d1257600080fd5b611d1e88828901611bd2565b92509250509295509295909350565b600060208284031215611d3f57600080fd5b6000611d4d84828501611b93565b91505092915050565b600060208284031215611d6857600080fd5b6000611d7684828501611ba8565b91505092915050565b60008060408385031215611d9257600080fd5b6000611da085828601611ba8565b9250506020611db185828601611b69565b9150509250929050565b60008060408385031215611dce57600080fd5b6000611ddc85828601611ba8565b9250506020611ded85828601611c46565b9150509250929050565b600060208284031215611e0957600080fd5b6000611e1784828501611bbd565b91505092915050565b60008060408385031215611e3357600080fd5b6000611e4185828601611c46565b925050602083013567ffffffffffffffff811115611e5e57600080fd5b611e6a85828601611c1c565b9150509250929050565b611e7d816123dd565b82525050565b611e8c816123ef565b82525050565b611e9b816123fb565b82525050565b611eaa81612405565b82525050565b611eb98161246e565b82525050565b6000611eca826122d2565b611ed481856122dd565b9350611ee481856020860161248f565b611eed816125aa565b840191505092915050565b6000611f03826122d2565b611f0d81856122ee565b9350611f1d81856020860161248f565b80840191505092915050565b6000611f366020836122dd565b9150611f41826125bb565b602082019050919050565b6000611f596014836122dd565b9150611f64826125e4565b602082019050919050565b6000611f7c6026836122dd565b9150611f878261260d565b604082019050919050565b6000611f9f6010836122dd565b9150611faa8261265c565b602082019050919050565b6000611fc26020836122dd565b9150611fcd82612685565b602082019050919050565b6000611fe56017836122ee565b9150611ff0826126ae565b601782019050919050565b60006120086011836122ee565b9150612013826126d7565b601182019050919050565b600061202b602f836122dd565b915061203682612700565b604082019050919050565b61204a81612464565b82525050565b600061205b82611fd8565b91506120678285611ef8565b915061207282611ffb565b915061207e8284611ef8565b91508190509392505050565b600060208201905061209f6000830184611e74565b92915050565b60006060820190506120ba6000830186611e74565b6120c76020830185611e74565b6120d46040830184612041565b949350505050565b60006040820190506120f16000830185611e74565b6120fe6020830184612041565b9392505050565b600060208201905061211a6000830184611e83565b92915050565b60006020820190506121356000830184611e92565b92915050565b60006020820190506121506000830184611ea1565b92915050565b600060208201905081810360008301526121708184611ebf565b905092915050565b6000602082019050818103600083015261219181611f29565b9050919050565b600060208201905081810360008301526121b181611f4c565b9050919050565b600060208201905081810360008301526121d181611f6f565b9050919050565b600060208201905081810360008301526121f181611f92565b9050919050565b6000602082019050818103600083015261221181611fb5565b9050919050565b600060208201905081810360008301526122318161201e565b9050919050565b600060208201905061224d6000830184612041565b92915050565b60006040820190506122686000830185612041565b6122756020830184611eb0565b9392505050565b6000612286612297565b905061229282826124ec565b919050565b6000604051905090565b600067ffffffffffffffff8211156122bc576122bb61257b565b5b6122c5826125aa565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061230482612464565b915061230f83612464565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156123445761234361251d565b5b828201905092915050565b600061235a82612464565b915061236583612464565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561239e5761239d61251d565b5b828202905092915050565b60006123b482612464565b91506123bf83612464565b9250828210156123d2576123d161251d565b5b828203905092915050565b60006123e882612444565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600081905061243f8261274f565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061247982612431565b9050919050565b82818337600083830152505050565b60005b838110156124ad578082015181840152602081019050612492565b838111156124bc576000848401525b50505050565b60006124cd82612464565b915060008214156124e1576124e061251d565b5b600182039050919050565b6124f5826125aa565b810181811067ffffffffffffffff821117156125145761251361257b565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600381106127605761275f61254c565b5b50565b61276c816123dd565b811461277757600080fd5b50565b612783816123ef565b811461278e57600080fd5b50565b61279a816123fb565b81146127a557600080fd5b50565b6127b181612405565b81146127bc57600080fd5b50565b6127c881612464565b81146127d357600080fd5b5056fea26469706673582212207ba1fb306bdcacaf80d6055e23ea1e43124603bf460b8cfb631a3a25fcc95aac64736f6c63430008040033",
}

// LF5ExchangeABI is the input ABI used to generate the binding from.
// Deprecated: Use LF5ExchangeMetaData.ABI instead.
var LF5ExchangeABI = LF5ExchangeMetaData.ABI

// LF5ExchangeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LF5ExchangeMetaData.Bin instead.
var LF5ExchangeBin = LF5ExchangeMetaData.Bin

// DeployLF5Exchange deploys a new Ethereum contract, binding an instance of LF5Exchange to it.
func DeployLF5Exchange(auth *bind.TransactOpts, backend bind.ContractBackend, magicBoxReward common.Address, rewardToken common.Address) (common.Address, *types.Transaction, *LF5Exchange, error) {
	parsed, err := LF5ExchangeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LF5ExchangeBin), backend, magicBoxReward, rewardToken)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LF5Exchange{LF5ExchangeCaller: LF5ExchangeCaller{contract: contract}, LF5ExchangeTransactor: LF5ExchangeTransactor{contract: contract}, LF5ExchangeFilterer: LF5ExchangeFilterer{contract: contract}}, nil
}

// LF5Exchange is an auto generated Go binding around an Ethereum contract.
type LF5Exchange struct {
	LF5ExchangeCaller     // Read-only binding to the contract
	LF5ExchangeTransactor // Write-only binding to the contract
	LF5ExchangeFilterer   // Log filterer for contract events
}

// LF5ExchangeCaller is an auto generated read-only Go binding around an Ethereum contract.
type LF5ExchangeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LF5ExchangeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LF5ExchangeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LF5ExchangeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LF5ExchangeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LF5ExchangeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LF5ExchangeSession struct {
	Contract     *LF5Exchange      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LF5ExchangeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LF5ExchangeCallerSession struct {
	Contract *LF5ExchangeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// LF5ExchangeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LF5ExchangeTransactorSession struct {
	Contract     *LF5ExchangeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// LF5ExchangeRaw is an auto generated low-level Go binding around an Ethereum contract.
type LF5ExchangeRaw struct {
	Contract *LF5Exchange // Generic contract binding to access the raw methods on
}

// LF5ExchangeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LF5ExchangeCallerRaw struct {
	Contract *LF5ExchangeCaller // Generic read-only contract binding to access the raw methods on
}

// LF5ExchangeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LF5ExchangeTransactorRaw struct {
	Contract *LF5ExchangeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLF5Exchange creates a new instance of LF5Exchange, bound to a specific deployed contract.
func NewLF5Exchange(address common.Address, backend bind.ContractBackend) (*LF5Exchange, error) {
	contract, err := bindLF5Exchange(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LF5Exchange{LF5ExchangeCaller: LF5ExchangeCaller{contract: contract}, LF5ExchangeTransactor: LF5ExchangeTransactor{contract: contract}, LF5ExchangeFilterer: LF5ExchangeFilterer{contract: contract}}, nil
}

// NewLF5ExchangeCaller creates a new read-only instance of LF5Exchange, bound to a specific deployed contract.
func NewLF5ExchangeCaller(address common.Address, caller bind.ContractCaller) (*LF5ExchangeCaller, error) {
	contract, err := bindLF5Exchange(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LF5ExchangeCaller{contract: contract}, nil
}

// NewLF5ExchangeTransactor creates a new write-only instance of LF5Exchange, bound to a specific deployed contract.
func NewLF5ExchangeTransactor(address common.Address, transactor bind.ContractTransactor) (*LF5ExchangeTransactor, error) {
	contract, err := bindLF5Exchange(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LF5ExchangeTransactor{contract: contract}, nil
}

// NewLF5ExchangeFilterer creates a new log filterer instance of LF5Exchange, bound to a specific deployed contract.
func NewLF5ExchangeFilterer(address common.Address, filterer bind.ContractFilterer) (*LF5ExchangeFilterer, error) {
	contract, err := bindLF5Exchange(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LF5ExchangeFilterer{contract: contract}, nil
}

// bindLF5Exchange binds a generic wrapper to an already deployed contract.
func bindLF5Exchange(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LF5ExchangeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LF5Exchange *LF5ExchangeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LF5Exchange.Contract.LF5ExchangeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LF5Exchange *LF5ExchangeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LF5Exchange.Contract.LF5ExchangeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LF5Exchange *LF5ExchangeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LF5Exchange.Contract.LF5ExchangeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LF5Exchange *LF5ExchangeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LF5Exchange.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LF5Exchange *LF5ExchangeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LF5Exchange.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LF5Exchange *LF5ExchangeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LF5Exchange.Contract.contract.Transact(opts, method, params...)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_LF5Exchange *LF5ExchangeCaller) ADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LF5Exchange.contract.Call(opts, &out, "ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_LF5Exchange *LF5ExchangeSession) ADMINROLE() ([32]byte, error) {
	return _LF5Exchange.Contract.ADMINROLE(&_LF5Exchange.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_LF5Exchange *LF5ExchangeCallerSession) ADMINROLE() ([32]byte, error) {
	return _LF5Exchange.Contract.ADMINROLE(&_LF5Exchange.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_LF5Exchange *LF5ExchangeCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LF5Exchange.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_LF5Exchange *LF5ExchangeSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _LF5Exchange.Contract.DEFAULTADMINROLE(&_LF5Exchange.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_LF5Exchange *LF5ExchangeCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _LF5Exchange.Contract.DEFAULTADMINROLE(&_LF5Exchange.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_LF5Exchange *LF5ExchangeCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LF5Exchange.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_LF5Exchange *LF5ExchangeSession) PAUSERROLE() ([32]byte, error) {
	return _LF5Exchange.Contract.PAUSERROLE(&_LF5Exchange.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_LF5Exchange *LF5ExchangeCallerSession) PAUSERROLE() ([32]byte, error) {
	return _LF5Exchange.Contract.PAUSERROLE(&_LF5Exchange.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_LF5Exchange *LF5ExchangeCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _LF5Exchange.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_LF5Exchange *LF5ExchangeSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _LF5Exchange.Contract.GetRoleAdmin(&_LF5Exchange.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_LF5Exchange *LF5ExchangeCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _LF5Exchange.Contract.GetRoleAdmin(&_LF5Exchange.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_LF5Exchange *LF5ExchangeCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _LF5Exchange.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_LF5Exchange *LF5ExchangeSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _LF5Exchange.Contract.GetRoleMember(&_LF5Exchange.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_LF5Exchange *LF5ExchangeCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _LF5Exchange.Contract.GetRoleMember(&_LF5Exchange.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_LF5Exchange *LF5ExchangeCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _LF5Exchange.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_LF5Exchange *LF5ExchangeSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _LF5Exchange.Contract.GetRoleMemberCount(&_LF5Exchange.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_LF5Exchange *LF5ExchangeCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _LF5Exchange.Contract.GetRoleMemberCount(&_LF5Exchange.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_LF5Exchange *LF5ExchangeCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _LF5Exchange.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_LF5Exchange *LF5ExchangeSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _LF5Exchange.Contract.HasRole(&_LF5Exchange.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_LF5Exchange *LF5ExchangeCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _LF5Exchange.Contract.HasRole(&_LF5Exchange.CallOpts, role, account)
}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_LF5Exchange *LF5ExchangeCaller) OnERC721Received(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	var out []interface{}
	err := _LF5Exchange.contract.Call(opts, &out, "onERC721Received", arg0, arg1, arg2, arg3)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_LF5Exchange *LF5ExchangeSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	return _LF5Exchange.Contract.OnERC721Received(&_LF5Exchange.CallOpts, arg0, arg1, arg2, arg3)
}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_LF5Exchange *LF5ExchangeCallerSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	return _LF5Exchange.Contract.OnERC721Received(&_LF5Exchange.CallOpts, arg0, arg1, arg2, arg3)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LF5Exchange *LF5ExchangeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LF5Exchange.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LF5Exchange *LF5ExchangeSession) Owner() (common.Address, error) {
	return _LF5Exchange.Contract.Owner(&_LF5Exchange.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LF5Exchange *LF5ExchangeCallerSession) Owner() (common.Address, error) {
	return _LF5Exchange.Contract.Owner(&_LF5Exchange.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LF5Exchange *LF5ExchangeCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _LF5Exchange.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LF5Exchange *LF5ExchangeSession) Paused() (bool, error) {
	return _LF5Exchange.Contract.Paused(&_LF5Exchange.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LF5Exchange *LF5ExchangeCallerSession) Paused() (bool, error) {
	return _LF5Exchange.Contract.Paused(&_LF5Exchange.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_LF5Exchange *LF5ExchangeCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _LF5Exchange.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_LF5Exchange *LF5ExchangeSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _LF5Exchange.Contract.SupportsInterface(&_LF5Exchange.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_LF5Exchange *LF5ExchangeCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _LF5Exchange.Contract.SupportsInterface(&_LF5Exchange.CallOpts, interfaceId)
}

// ExchangeForLF5 is a paid mutator transaction binding the contract method 0x5ebea161.
//
// Solidity: function exchangeForLF5(uint256 nftId, bytes nftData) returns()
func (_LF5Exchange *LF5ExchangeTransactor) ExchangeForLF5(opts *bind.TransactOpts, nftId *big.Int, nftData []byte) (*types.Transaction, error) {
	return _LF5Exchange.contract.Transact(opts, "exchangeForLF5", nftId, nftData)
}

// ExchangeForLF5 is a paid mutator transaction binding the contract method 0x5ebea161.
//
// Solidity: function exchangeForLF5(uint256 nftId, bytes nftData) returns()
func (_LF5Exchange *LF5ExchangeSession) ExchangeForLF5(nftId *big.Int, nftData []byte) (*types.Transaction, error) {
	return _LF5Exchange.Contract.ExchangeForLF5(&_LF5Exchange.TransactOpts, nftId, nftData)
}

// ExchangeForLF5 is a paid mutator transaction binding the contract method 0x5ebea161.
//
// Solidity: function exchangeForLF5(uint256 nftId, bytes nftData) returns()
func (_LF5Exchange *LF5ExchangeTransactorSession) ExchangeForLF5(nftId *big.Int, nftData []byte) (*types.Transaction, error) {
	return _LF5Exchange.Contract.ExchangeForLF5(&_LF5Exchange.TransactOpts, nftId, nftData)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_LF5Exchange *LF5ExchangeTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LF5Exchange.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_LF5Exchange *LF5ExchangeSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LF5Exchange.Contract.GrantRole(&_LF5Exchange.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_LF5Exchange *LF5ExchangeTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LF5Exchange.Contract.GrantRole(&_LF5Exchange.TransactOpts, role, account)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_LF5Exchange *LF5ExchangeTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LF5Exchange.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_LF5Exchange *LF5ExchangeSession) Pause() (*types.Transaction, error) {
	return _LF5Exchange.Contract.Pause(&_LF5Exchange.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_LF5Exchange *LF5ExchangeTransactorSession) Pause() (*types.Transaction, error) {
	return _LF5Exchange.Contract.Pause(&_LF5Exchange.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LF5Exchange *LF5ExchangeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LF5Exchange.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LF5Exchange *LF5ExchangeSession) RenounceOwnership() (*types.Transaction, error) {
	return _LF5Exchange.Contract.RenounceOwnership(&_LF5Exchange.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LF5Exchange *LF5ExchangeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _LF5Exchange.Contract.RenounceOwnership(&_LF5Exchange.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_LF5Exchange *LF5ExchangeTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LF5Exchange.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_LF5Exchange *LF5ExchangeSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LF5Exchange.Contract.RenounceRole(&_LF5Exchange.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_LF5Exchange *LF5ExchangeTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LF5Exchange.Contract.RenounceRole(&_LF5Exchange.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_LF5Exchange *LF5ExchangeTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LF5Exchange.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_LF5Exchange *LF5ExchangeSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LF5Exchange.Contract.RevokeRole(&_LF5Exchange.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_LF5Exchange *LF5ExchangeTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LF5Exchange.Contract.RevokeRole(&_LF5Exchange.TransactOpts, role, account)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LF5Exchange *LF5ExchangeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _LF5Exchange.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LF5Exchange *LF5ExchangeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LF5Exchange.Contract.TransferOwnership(&_LF5Exchange.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LF5Exchange *LF5ExchangeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LF5Exchange.Contract.TransferOwnership(&_LF5Exchange.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_LF5Exchange *LF5ExchangeTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LF5Exchange.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_LF5Exchange *LF5ExchangeSession) Unpause() (*types.Transaction, error) {
	return _LF5Exchange.Contract.Unpause(&_LF5Exchange.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_LF5Exchange *LF5ExchangeTransactorSession) Unpause() (*types.Transaction, error) {
	return _LF5Exchange.Contract.Unpause(&_LF5Exchange.TransactOpts)
}

// LF5ExchangeExchangeSuccessIterator is returned from FilterExchangeSuccess and is used to iterate over the raw logs and unpacked data for ExchangeSuccess events raised by the LF5Exchange contract.
type LF5ExchangeExchangeSuccessIterator struct {
	Event *LF5ExchangeExchangeSuccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LF5ExchangeExchangeSuccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LF5ExchangeExchangeSuccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LF5ExchangeExchangeSuccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LF5ExchangeExchangeSuccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LF5ExchangeExchangeSuccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LF5ExchangeExchangeSuccess represents a ExchangeSuccess event raised by the LF5Exchange contract.
type LF5ExchangeExchangeSuccess struct {
	NftId   *big.Int
	BoxType uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterExchangeSuccess is a free log retrieval operation binding the contract event 0x0cfeb5169f7535d536dc42591d3c91c677b7a0dfa52372816ddea02da64614dc.
//
// Solidity: event ExchangeSuccess(uint256 nftId, uint8 boxType)
func (_LF5Exchange *LF5ExchangeFilterer) FilterExchangeSuccess(opts *bind.FilterOpts) (*LF5ExchangeExchangeSuccessIterator, error) {

	logs, sub, err := _LF5Exchange.contract.FilterLogs(opts, "ExchangeSuccess")
	if err != nil {
		return nil, err
	}
	return &LF5ExchangeExchangeSuccessIterator{contract: _LF5Exchange.contract, event: "ExchangeSuccess", logs: logs, sub: sub}, nil
}

// WatchExchangeSuccess is a free log subscription operation binding the contract event 0x0cfeb5169f7535d536dc42591d3c91c677b7a0dfa52372816ddea02da64614dc.
//
// Solidity: event ExchangeSuccess(uint256 nftId, uint8 boxType)
func (_LF5Exchange *LF5ExchangeFilterer) WatchExchangeSuccess(opts *bind.WatchOpts, sink chan<- *LF5ExchangeExchangeSuccess) (event.Subscription, error) {

	logs, sub, err := _LF5Exchange.contract.WatchLogs(opts, "ExchangeSuccess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LF5ExchangeExchangeSuccess)
				if err := _LF5Exchange.contract.UnpackLog(event, "ExchangeSuccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExchangeSuccess is a log parse operation binding the contract event 0x0cfeb5169f7535d536dc42591d3c91c677b7a0dfa52372816ddea02da64614dc.
//
// Solidity: event ExchangeSuccess(uint256 nftId, uint8 boxType)
func (_LF5Exchange *LF5ExchangeFilterer) ParseExchangeSuccess(log types.Log) (*LF5ExchangeExchangeSuccess, error) {
	event := new(LF5ExchangeExchangeSuccess)
	if err := _LF5Exchange.contract.UnpackLog(event, "ExchangeSuccess", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LF5ExchangeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the LF5Exchange contract.
type LF5ExchangeOwnershipTransferredIterator struct {
	Event *LF5ExchangeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LF5ExchangeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LF5ExchangeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LF5ExchangeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LF5ExchangeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LF5ExchangeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LF5ExchangeOwnershipTransferred represents a OwnershipTransferred event raised by the LF5Exchange contract.
type LF5ExchangeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LF5Exchange *LF5ExchangeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*LF5ExchangeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LF5Exchange.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &LF5ExchangeOwnershipTransferredIterator{contract: _LF5Exchange.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LF5Exchange *LF5ExchangeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *LF5ExchangeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LF5Exchange.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LF5ExchangeOwnershipTransferred)
				if err := _LF5Exchange.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LF5Exchange *LF5ExchangeFilterer) ParseOwnershipTransferred(log types.Log) (*LF5ExchangeOwnershipTransferred, error) {
	event := new(LF5ExchangeOwnershipTransferred)
	if err := _LF5Exchange.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LF5ExchangePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the LF5Exchange contract.
type LF5ExchangePausedIterator struct {
	Event *LF5ExchangePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LF5ExchangePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LF5ExchangePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LF5ExchangePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LF5ExchangePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LF5ExchangePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LF5ExchangePaused represents a Paused event raised by the LF5Exchange contract.
type LF5ExchangePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_LF5Exchange *LF5ExchangeFilterer) FilterPaused(opts *bind.FilterOpts) (*LF5ExchangePausedIterator, error) {

	logs, sub, err := _LF5Exchange.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &LF5ExchangePausedIterator{contract: _LF5Exchange.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_LF5Exchange *LF5ExchangeFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *LF5ExchangePaused) (event.Subscription, error) {

	logs, sub, err := _LF5Exchange.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LF5ExchangePaused)
				if err := _LF5Exchange.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_LF5Exchange *LF5ExchangeFilterer) ParsePaused(log types.Log) (*LF5ExchangePaused, error) {
	event := new(LF5ExchangePaused)
	if err := _LF5Exchange.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LF5ExchangeRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the LF5Exchange contract.
type LF5ExchangeRoleAdminChangedIterator struct {
	Event *LF5ExchangeRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LF5ExchangeRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LF5ExchangeRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LF5ExchangeRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LF5ExchangeRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LF5ExchangeRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LF5ExchangeRoleAdminChanged represents a RoleAdminChanged event raised by the LF5Exchange contract.
type LF5ExchangeRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_LF5Exchange *LF5ExchangeFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*LF5ExchangeRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _LF5Exchange.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &LF5ExchangeRoleAdminChangedIterator{contract: _LF5Exchange.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_LF5Exchange *LF5ExchangeFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *LF5ExchangeRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _LF5Exchange.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LF5ExchangeRoleAdminChanged)
				if err := _LF5Exchange.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_LF5Exchange *LF5ExchangeFilterer) ParseRoleAdminChanged(log types.Log) (*LF5ExchangeRoleAdminChanged, error) {
	event := new(LF5ExchangeRoleAdminChanged)
	if err := _LF5Exchange.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LF5ExchangeRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the LF5Exchange contract.
type LF5ExchangeRoleGrantedIterator struct {
	Event *LF5ExchangeRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LF5ExchangeRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LF5ExchangeRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LF5ExchangeRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LF5ExchangeRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LF5ExchangeRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LF5ExchangeRoleGranted represents a RoleGranted event raised by the LF5Exchange contract.
type LF5ExchangeRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_LF5Exchange *LF5ExchangeFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*LF5ExchangeRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _LF5Exchange.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &LF5ExchangeRoleGrantedIterator{contract: _LF5Exchange.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_LF5Exchange *LF5ExchangeFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *LF5ExchangeRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _LF5Exchange.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LF5ExchangeRoleGranted)
				if err := _LF5Exchange.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_LF5Exchange *LF5ExchangeFilterer) ParseRoleGranted(log types.Log) (*LF5ExchangeRoleGranted, error) {
	event := new(LF5ExchangeRoleGranted)
	if err := _LF5Exchange.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LF5ExchangeRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the LF5Exchange contract.
type LF5ExchangeRoleRevokedIterator struct {
	Event *LF5ExchangeRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LF5ExchangeRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LF5ExchangeRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LF5ExchangeRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LF5ExchangeRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LF5ExchangeRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LF5ExchangeRoleRevoked represents a RoleRevoked event raised by the LF5Exchange contract.
type LF5ExchangeRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_LF5Exchange *LF5ExchangeFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*LF5ExchangeRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _LF5Exchange.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &LF5ExchangeRoleRevokedIterator{contract: _LF5Exchange.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_LF5Exchange *LF5ExchangeFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *LF5ExchangeRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _LF5Exchange.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LF5ExchangeRoleRevoked)
				if err := _LF5Exchange.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_LF5Exchange *LF5ExchangeFilterer) ParseRoleRevoked(log types.Log) (*LF5ExchangeRoleRevoked, error) {
	event := new(LF5ExchangeRoleRevoked)
	if err := _LF5Exchange.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LF5ExchangeUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the LF5Exchange contract.
type LF5ExchangeUnpausedIterator struct {
	Event *LF5ExchangeUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LF5ExchangeUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LF5ExchangeUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LF5ExchangeUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LF5ExchangeUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LF5ExchangeUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LF5ExchangeUnpaused represents a Unpaused event raised by the LF5Exchange contract.
type LF5ExchangeUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_LF5Exchange *LF5ExchangeFilterer) FilterUnpaused(opts *bind.FilterOpts) (*LF5ExchangeUnpausedIterator, error) {

	logs, sub, err := _LF5Exchange.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &LF5ExchangeUnpausedIterator{contract: _LF5Exchange.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_LF5Exchange *LF5ExchangeFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *LF5ExchangeUnpaused) (event.Subscription, error) {

	logs, sub, err := _LF5Exchange.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LF5ExchangeUnpaused)
				if err := _LF5Exchange.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_LF5Exchange *LF5ExchangeFilterer) ParseUnpaused(log types.Log) (*LF5ExchangeUnpaused, error) {
	event := new(LF5ExchangeUnpaused)
	if err := _LF5Exchange.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
