// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package OrderMarketplace

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OrderMarketplaceMetaData contains all meta data concerning the OrderMarketplace contract.
var OrderMarketplaceMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_acceptedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketplaceStorage\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ownerCutPerMillion\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExpiredTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unavailable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"ChangedOwnerCutPerMillion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"publicationFee\",\"type\":\"uint256\"}],\"name\":\"ChangedPublicationFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_marketplaceStorage\",\"type\":\"address\"}],\"name\":\"MarketplaceStorageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"OrderSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CANCEL_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721_Interface\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptedToken\",\"outputs\":[{\"internalType\":\"contractIBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplaceStorage\",\"outputs\":[{\"internalType\":\"contractIMarketplaceStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStageDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerCutPerMillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicationFeeInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficary\",\"type\":\"address\"}],\"name\":\"setBeneficary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setMinStageDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ownerCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"setOwnerCutPerMillion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicationFee\",\"type\":\"uint256\"}],\"name\":\"setPublicationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketplaceStorage\",\"type\":\"address\"}],\"name\":\"updateStorageAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nftAsset\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"executeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620059ab380380620059ab8339818101604052810190620000379190620013ef565b838383838180620000698173ffffffffffffffffffffffffffffffffffffffff166200042760201b620011e31760201c565b620000ab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a29062001678565b60405180910390fd5b600081905082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506000600260146101000a81548160ff0219169083151502179055506200012f620001236200044a60201b60201c565b620004fd60201b60201c565b6200014f620001436200044a60201b60201c565b620005c360201b60201c565b6200017b8473ffffffffffffffffffffffffffffffffffffffff166200042760201b620011e31760201c565b620001b2576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620002586000801b6200024c6200044a60201b60201c565b6200078a60201b60201c565b620002997fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756200028d6200044a60201b60201c565b6200078a60201b60201c565b620002da7f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d7620002ce6200044a60201b60201c565b6200078a60201b60201c565b6200031b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6200030f6200044a60201b60201c565b6200078a60201b60201c565b6200036d7f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d77fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775620007a060201b60201c565b620003bf7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775620007a060201b60201c565b620003d0816200080360201b60201c565b600160088190555082600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050505062001a2c565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415620004f657600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff818301511692505050620004fa565b3390505b90565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620005d36200044a60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620005f9620008b860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000652576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000649906200169a565b60405180910390fd5b620006847f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d7826200078a60201b60201c565b620006b67f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a826200078a60201b60201c565b620006cb6000801b826200078a60201b60201c565b6200070c7f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d762000700620008b860201b60201c565b620008e260201b60201c565b6200074d7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a62000741620008b860201b60201c565b620008e260201b60201c565b620007716000801b62000765620008b860201b60201c565b620008e260201b60201c565b62000787816200091b60201b620012061760201c565b50565b6200079c828262000a3160201b60201c565b5050565b6000620007b38362000a7960201b60201c565b905081600080858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775620008358162000a9860201b60201c565b620f4240821062000872576040517f7e0d5ce600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816006819055507ffa406a120a9e7f2b332bfb7a43d3bf1c3f079262202907a6b69c94b2821a02c6600654604051620008ac9190620016bc565b60405180910390a15050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b620008f38262000a7960201b60201c565b620009048162000a9860201b60201c565b62000916838362000abc60201b60201c565b505050565b6200092b6200044a60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1662000951620008b860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620009aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009a1906200169a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000a1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a149062001656565b60405180910390fd5b62000a2e81620004fd60201b60201c565b50565b62000a48828262000b0460201b620012fe1760201c565b62000a74816001600085815260200190815260200160002062000bf560201b620013de1790919060201c565b505050565b6000806000838152602001908152602001600020600101549050919050565b62000ab98162000aad6200044a60201b60201c565b62000c2d60201b60201c565b50565b62000ad3828262000cf160201b6200140e1760201c565b62000aff816001600085815260200190815260200160002062000de360201b620014ef1790919060201c565b505050565b62000b16828262000e1b60201b60201c565b62000bf157600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555062000b966200044a60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600062000c25836000018373ffffffffffffffffffffffffffffffffffffffff1660001b62000e8560201b60201c565b905092915050565b62000c3f828262000e1b60201b60201c565b62000ced5762000c728173ffffffffffffffffffffffffffffffffffffffff16601462000eff60201b6200151f1760201c565b62000c8d8360001c602062000eff60201b6200151f1760201c565b60405160200162000ca0929190620015ce565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000ce4919062001610565b60405180910390fd5b5050565b62000d03828262000e1b60201b60201c565b1562000ddf57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555062000d846200044a60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600062000e13836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6200120e60201b60201c565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600062000e9983836200139e60201b60201c565b62000ef457826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905062000ef9565b600090505b92915050565b60606000600283600262000f1491906200175d565b62000f20919062001700565b67ffffffffffffffff81111562000f60577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801562000f935781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811062000ff2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106200107d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002620010bf91906200175d565b620010cb919062001700565b90505b6001811115620011bd577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811062001135577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b82828151811062001173577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080620011b5906200186d565b9050620010ce565b506000841462001204576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620011fb9062001634565b60405180910390fd5b8091505092915050565b6000808360010160008481526020019081526020016000205490506000811462001392576000600182620012439190620017be565b90506000600186600001805490506200125d9190620017be565b90508181146200131b576000866000018281548110620012a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110620012f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548062001356577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505062001398565b60009150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081519050620013d281620019f8565b92915050565b600081519050620013e98162001a12565b92915050565b600080600080608085870312156200140657600080fd5b60006200141687828801620013c1565b94505060206200142987828801620013c1565b93505060406200143c87828801620013c1565b92505060606200144f87828801620013d8565b91505092959194509250565b60006200146882620016d9565b620014748185620016e4565b93506200148681856020860162001837565b6200149181620018cb565b840191505092915050565b6000620014a982620016d9565b620014b58185620016f5565b9350620014c781856020860162001837565b80840191505092915050565b6000620014e2602083620016e4565b9150620014ef82620018dc565b602082019050919050565b600062001509602683620016e4565b9150620015168262001905565b604082019050919050565b600062001530601083620016e4565b91506200153d8262001954565b602082019050919050565b600062001557602083620016e4565b915062001564826200197d565b602082019050919050565b60006200157e601783620016f5565b91506200158b82620019a6565b601782019050919050565b6000620015a5601183620016f5565b9150620015b282620019cf565b601182019050919050565b620015c8816200182d565b82525050565b6000620015db826200156f565b9150620015e982856200149c565b9150620015f68262001596565b91506200160482846200149c565b91508190509392505050565b600060208201905081810360008301526200162c81846200145b565b905092915050565b600060208201905081810360008301526200164f81620014d3565b9050919050565b600060208201905081810360008301526200167181620014fa565b9050919050565b60006020820190508181036000830152620016938162001521565b9050919050565b60006020820190508181036000830152620016b58162001548565b9050919050565b6000602082019050620016d36000830184620015bd565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006200170d826200182d565b91506200171a836200182d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200175257620017516200189c565b5b828201905092915050565b60006200176a826200182d565b915062001777836200182d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620017b357620017b26200189c565b5b828202905092915050565b6000620017cb826200182d565b9150620017d8836200182d565b925082821015620017ee57620017ed6200189c565b5b828203905092915050565b600062001806826200180d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620018575780820151818401526020810190506200183a565b8381111562001867576000848401525b50505050565b60006200187a826200182d565b915060008214156200189157620018906200189c565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c696420636f6e747261637400000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b62001a0381620017f9565b811462001a0f57600080fd5b50565b62001a1d816200182d565b811462001a2957600080fd5b50565b613f6f8062001a3c6000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c80638456cb5911610130578063af8996f1116100b8578063e47d60601161007c578063e47d606014610606578063e4997dc514610636578063e63ab1e914610652578063f2fde38b14610670578063f60218841461068c57610227565b8063af8996f114610562578063b42cf9291461057e578063ca15c8731461059c578063cbfda1c5146105cc578063d547741f146105ea57610227565b806391d14854116100ff57806391d14854146104bc578063a01f79d4146104ec578063a217fddf1461050a578063ae4f119814610528578063ae7b03331461054657610227565b80638456cb5914610448578063889e2129146104525780638da5cb5b1461046e5780639010d07c1461048c57610227565b80633f4ba83a116101b35780635c975abb116101825780635c975abb146103ca5780636f652e1a146103e8578063715018a6146104045780637489ec231461040e57806375b238fc1461042a57610227565b80633f4ba83a14610354578063451c3d801461035e57806346b3aec61461037c57806359bf1abe1461039a57610227565b806319dad16d116101fa57806319dad16d146102b2578063248a9ca3146102ce5780632b4c32be146102fe5780632f2ff15d1461031c57806336568abe1461033857610227565b806301ffc9a71461022c5780630db3cc051461025c5780630ecb93c01461027857806313c27ca714610294575b600080fd5b6102466004803603810190610241919061332a565b6106a8565b6040516102539190613788565b60405180910390f35b6102766004803603810190610271919061315c565b610722565b005b610292600480360381019061028d919061315c565b610791565b005b61029c61089f565b6040516102a991906137a3565b60405180910390f35b6102cc60048036038101906102c7919061337c565b6108c3565b005b6102e860048036038101906102e39190613289565b61096d565b6040516102f591906137a3565b60405180910390f35b61030661098c565b6040516103139190613856565b60405180910390f35b610336600480360381019061033191906132b2565b610997565b005b610352600480360381019061034d91906132b2565b6109b8565b005b61035c610a3b565b005b610366610a70565b6040516103739190613871565b60405180910390f35b610384610a96565b604051610391919061388c565b60405180910390f35b6103b460048036038101906103af919061315c565b610abc565b6040516103c19190613788565b60405180910390f35b6103d2610b12565b6040516103df9190613788565b60405180910390f35b61040260048036038101906103fd91906131fd565b610b29565b005b61040c610b83565b005b61042860048036038101906104239190613289565b610c0b565b005b610432610c5f565b60405161043f91906137a3565b60405180910390f35b610450610c83565b005b61046c6004803603810190610467919061315c565b610cb8565b005b610476610cef565b6040516104839190613683565b60405180910390f35b6104a660048036038101906104a191906132ee565b610d19565b6040516104b39190613683565b60405180910390f35b6104d660048036038101906104d191906132b2565b610d48565b6040516104e39190613788565b60405180910390f35b6104f4610db2565b6040516105019190613989565b60405180910390f35b610512610db8565b60405161051f91906137a3565b60405180910390f35b610530610dbf565b60405161053d9190613989565b60405180910390f35b610560600480360381019061055b91906131ae565b610dc5565b005b61057c6004803603810190610577919061337c565b610e1e565b005b610586610e8c565b6040516105939190613989565b60405180910390f35b6105b660048036038101906105b19190613289565b610e92565b6040516105c39190613989565b60405180910390f35b6105d4610eb6565b6040516105e19190613683565b60405180910390f35b61060460048036038101906105ff91906132b2565b610edc565b005b610620600480360381019061061b919061315c565b610efd565b60405161062d9190613788565b60405180910390f35b610650600480360381019061064b919061315c565b610f1d565b005b61065a61102b565b60405161066791906137a3565b60405180910390f35b61068a6004803603810190610685919061315c565b61104f565b005b6106a660048036038101906106a1919061337c565b6111ae565b005b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061071b575061071a82611819565b5b9050919050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561074c81611893565b81600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6107996118a7565b73ffffffffffffffffffffffffffffffffffffffff166107b7610cef565b73ffffffffffffffffffffffffffffffffffffffff161461080d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080490613949565b60405180910390fd5b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc816040516108949190613683565b60405180910390a150565b7f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d781565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756108ed81611893565b620f42408210610929576040517f7e0d5ce600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816006819055507ffa406a120a9e7f2b332bfb7a43d3bf1c3f079262202907a6b69c94b2821a02c66006546040516109619190613989565b60405180910390a15050565b6000806000838152602001908152602001600020600101549050919050565b6380ac58cd60e01b81565b6109a08261096d565b6109a981611893565b6109b38383611958565b505050565b6109c06118a7565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2490613969565b60405180910390fd5b610a37828261198c565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610a6581611893565b610a6d6119c0565b50565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600260149054906101000a900460ff16905090565b610b31610b12565b15610b71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6890613929565b60405180910390fd5b610b7d84848484611a62565b50505050565b610b8b6118a7565b73ffffffffffffffffffffffffffffffffffffffff16610ba9610cef565b73ffffffffffffffffffffffffffffffffffffffff1614610bff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf690613949565b60405180910390fd5b610c096000612136565b565b610c13610b12565b15610c53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4a90613929565b60405180910390fd5b610c5c816121fc565b50565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610cad81611893565b610cb561246a565b50565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610ce281611893565b610ceb8261250d565b5050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610d40826001600086815260200190815260200160002061258890919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60065481565b6000801b81565b60075481565b610dcd610b12565b15610e0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0490613929565b60405180910390fd5b610e188383836125a2565b50505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610e4881611893565b816007819055507fe7fa8737293f41b5dfa0d5c3e552860a06275bed7015581b083c7be7003308ba600754604051610e809190613989565b60405180910390a15050565b60085481565b6000610eaf60016000848152602001908152602001600020612bd1565b9050919050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610ee58261096d565b610eee81611893565b610ef8838361198c565b505050565b60046020528060005260406000206000915054906101000a900460ff1681565b610f256118a7565b73ffffffffffffffffffffffffffffffffffffffff16610f43610cef565b73ffffffffffffffffffffffffffffffffffffffff1614610f99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9090613949565b60405180910390fd5b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c816040516110209190613683565b60405180910390a150565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6110576118a7565b73ffffffffffffffffffffffffffffffffffffffff16611075610cef565b73ffffffffffffffffffffffffffffffffffffffff16146110cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c290613949565b60405180910390fd5b6110f57f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d782612be6565b61111f7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a82612be6565b61112c6000801b82612be6565b61115d7f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d7611158610cef565b610edc565b61118e7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a611189610cef565b610edc565b6111a26000801b61119d610cef565b610edc565b6111ab81611206565b50565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756111d881611893565b816008819055505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b61120e6118a7565b73ffffffffffffffffffffffffffffffffffffffff1661122c610cef565b73ffffffffffffffffffffffffffffffffffffffff1614611282576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127990613949565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156112f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e990613909565b60405180910390fd5b6112fb81612136565b50565b6113088282610d48565b6113da57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061137f6118a7565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000611406836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612bf4565b905092915050565b6114188282610d48565b156114eb57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506114906118a7565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000611517836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612c64565b905092915050565b6060600060028360026115329190613a77565b61153c91906139f0565b67ffffffffffffffff81111561157b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115ad5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061160b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611695577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026116d59190613a77565b6116df91906139f0565b90505b60018111156117cb577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611747577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110611784577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806117c490613bfe565b90506116e2565b506000841461180f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611806906138c9565b60405180910390fd5b8091505092915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061188c575061188b82612dea565b5b9050919050565b6118a48161189f6118a7565b612e54565b50565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561195157600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff818301511692505050611955565b3390505b90565b61196282826112fe565b61198781600160008581526020019081526020016000206113de90919063ffffffff16565b505050565b611996828261140e565b6119bb81600160008581526020019081526020016000206114ef90919063ffffffff16565b505050565b6119c8610b12565b611a07576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fe906138e9565b60405180910390fd5b6000600260146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611a4b6118a7565b604051611a589190613683565b60405180910390a1565b83611a828173ffffffffffffffffffffffffffffffffffffffff166111e3565b611ab8576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166301ffc9a76380ac58cd60e01b6040518263ffffffff1660e01b8152600401611af89190613856565b60206040518083038186803b158015611b1057600080fd5b505afa158015611b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b489190613260565b611b5157600080fd5b6000611b5b6118a7565b9050600086905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e886040518263ffffffff1660e01b8152600401611b9d9190613989565b60206040518083038186803b158015611bb557600080fd5b505afa158015611bc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bed9190613185565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580611d7057503073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663081812fc896040518263ffffffff1660e01b8152600401611c759190613989565b60206040518083038186803b158015611c8d57600080fd5b505afa158015611ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc59190613185565b73ffffffffffffffffffffffffffffffffffffffff161480611d6e57508173ffffffffffffffffffffffffffffffffffffffff1663e985e9c582306040518363ffffffff1660e01b8152600401611d1d92919061369e565b60206040518083038186803b158015611d3557600080fd5b505afa158015611d49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6d9190613260565b5b155b15611da7576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000861415611de1576040517ebfc92100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611df660085442612ef190919063ffffffff16565b851015611e2f576040517fea52bd4700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008888604051602001611e449291906135be565b604051602081830303815290604052805190602001209050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630a7f8977826040518263ffffffff1660e01b8152600401611eb791906137a3565b60206040518083038186803b158015611ecf57600080fd5b505afa158015611ee3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f079190613260565b611f3d576040517fa3b8915f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600042838a8c8b604051602001611f58959493929190613624565b604051602081830303815290604052805190602001209050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663930ca094848c8c858d8d6040518763ffffffff1660e01b8152600401611fd5969594939291906136fe565b600060405180830381600087803b158015611fef57600080fd5b505af1158015612003573d6000803e3d6000fd5b50505050600060075411156120e957600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd86600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007546040518463ffffffff1660e01b8152600401612095939291906136c7565b602060405180830381600087803b1580156120af57600080fd5b505af11580156120c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e79190613260565b505b7f84c66c3f7ba4b390e20e8e8233e2a516f3ce34a72749e4f12bd010dfba238039818a858d8c8c604051612122969594939291906137f5565b60405180910390a150505050505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006122066118a7565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635778472a846040518263ffffffff1660e01b815260040161226591906137a3565b60a06040518083038186803b15801561227d57600080fd5b505afa158015612291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b59190613353565b90506000816000015190506000801b8114156122fd576040517fafdd489000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff16148061236857506123677f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d76123626118a7565b610d48565b5b61239e576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166387a61cbd856040518263ffffffff1660e01b81526004016123f991906137a3565b600060405180830381600087803b15801561241357600080fd5b505af1158015612427573d6000803e3d6000fd5b505050507f35974c4230d53fb4c6e8553fd900c88ba92747dbc689a79bcd6ba755cb936985838260405161245c92919061375f565b60405180910390a150505050565b612472610b12565b156124b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a990613929565b60405180910390fd5b6001600260146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586124f66118a7565b6040516125039190613683565b60405180910390a1565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f19e07a962d0e1cab8b7d4be06b77a7225ca7ebb744994cb6546fdd815590dc9d8160405161257d9190613683565b60405180910390a150565b60006125978360000183612f07565b60001c905092915050565b6125aa612fce565b600084846040516020016125bf9291906135be565b6040516020818303038152906040528051906020012090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635778472a836040518263ffffffff1660e01b815260040161263491906137a3565b60a06040518083038186803b15801561264c57600080fd5b505afa158015612660573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126849190613353565b90506000801b816000015114156126c7576040517fafdd489000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160200151905060006126da6118a7565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612742576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8583606001511461277e576040517ebfc92100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82608001514211156127bc576040517fc56873ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008890508073ffffffffffffffffffffffffffffffffffffffff16636352211e896040518263ffffffff1660e01b81526004016127fa9190613989565b60206040518083038186803b15801561281257600080fd5b505afa158015612826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284a9190613185565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146128ae576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000846000015190506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166387a61cbd886040518263ffffffff1660e01b815260040161291491906137a3565b600060405180830381600087803b15801561292e57600080fd5b505af1158015612942573d6000803e3d6000fd5b5050505060006006541115612a525761297b620f424061296d6006548c612f5890919063ffffffff16565b612f6e90919063ffffffff16565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd85600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b81526004016129fe939291906136c7565b602060405180830381600087803b158015612a1857600080fd5b505af1158015612a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a509190613260565b505b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8587612aa5858e612f8490919063ffffffff16565b6040518463ffffffff1660e01b8152600401612ac3939291906136c7565b602060405180830381600087803b158015612add57600080fd5b505af1158015612af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b159190613260565b50508173ffffffffffffffffffffffffffffffffffffffff166342842e0e85858c6040518463ffffffff1660e01b8152600401612b54939291906136c7565b600060405180830381600087803b158015612b6e57600080fd5b505af1158015612b82573d6000803e3d6000fd5b505050507fa3fe2a6ffb1ad0de1c1ee8e3513d205b99980c40af9de82e502095245debabbb818486604051612bb9939291906137be565b60405180910390a18496505050505050509392505050565b6000612bdf82600001612f9a565b9050919050565b612bf08282611958565b5050565b6000612c008383612fab565b612c59578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612c5e565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114612dde576000600182612c969190613ad1565b9050600060018660000180549050612cae9190613ad1565b9050818114612d69576000866000018281548110612cf5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110612d3f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612da3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612de4565b60009150505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b612e5e8282610d48565b612eed57612e838173ffffffffffffffffffffffffffffffffffffffff16601461151f565b612e918360001c602061151f565b604051602001612ea29291906135ea565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ee491906138a7565b60405180910390fd5b5050565b60008183612eff91906139f0565b905092915050565b6000826000018281548110612f45577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b60008183612f669190613a77565b905092915050565b60008183612f7c9190613a46565b905092915050565b60008183612f929190613ad1565b905092915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b60008135905061303b81613ec6565b92915050565b60008151905061305081613ec6565b92915050565b60008151905061306581613edd565b92915050565b60008135905061307a81613ef4565b92915050565b60008151905061308f81613ef4565b92915050565b6000813590506130a481613f0b565b92915050565b600060a082840312156130bc57600080fd5b6130c660a06139a4565b905060006130d684828501613080565b60008301525060206130ea84828501613041565b60208301525060406130fe84828501613041565b604083015250606061311284828501613147565b606083015250608061312684828501613147565b60808301525092915050565b60008135905061314181613f22565b92915050565b60008151905061315681613f22565b92915050565b60006020828403121561316e57600080fd5b600061317c8482850161302c565b91505092915050565b60006020828403121561319757600080fd5b60006131a584828501613041565b91505092915050565b6000806000606084860312156131c357600080fd5b60006131d18682870161302c565b93505060206131e286828701613132565b92505060406131f386828701613132565b9150509250925092565b6000806000806080858703121561321357600080fd5b60006132218782880161302c565b945050602061323287828801613132565b935050604061324387828801613132565b925050606061325487828801613132565b91505092959194509250565b60006020828403121561327257600080fd5b600061328084828501613056565b91505092915050565b60006020828403121561329b57600080fd5b60006132a98482850161306b565b91505092915050565b600080604083850312156132c557600080fd5b60006132d38582860161306b565b92505060206132e48582860161302c565b9150509250929050565b6000806040838503121561330157600080fd5b600061330f8582860161306b565b925050602061332085828601613132565b9150509250929050565b60006020828403121561333c57600080fd5b600061334a84828501613095565b91505092915050565b600060a0828403121561336557600080fd5b6000613373848285016130aa565b91505092915050565b60006020828403121561338e57600080fd5b600061339c84828501613132565b91505092915050565b6133ae81613b05565b82525050565b6133c56133c082613b05565b613c59565b82525050565b6133d481613b17565b82525050565b6133e381613b23565b82525050565b6133f281613b2d565b82525050565b61340181613b83565b82525050565b61341081613ba7565b82525050565b6000613421826139c9565b61342b81856139d4565b935061343b818560208601613bcb565b61344481613d14565b840191505092915050565b600061345a826139c9565b61346481856139e5565b9350613474818560208601613bcb565b80840191505092915050565b600061348d6020836139d4565b915061349882613d32565b602082019050919050565b60006134b06014836139d4565b91506134bb82613d5b565b602082019050919050565b60006134d36026836139d4565b91506134de82613d84565b604082019050919050565b60006134f66010836139d4565b915061350182613dd3565b602082019050919050565b60006135196020836139d4565b915061352482613dfc565b602082019050919050565b600061353c6017836139e5565b915061354782613e25565b601782019050919050565b600061355f6011836139e5565b915061356a82613e4e565b601182019050919050565b6000613582602f836139d4565b915061358d82613e77565b604082019050919050565b6135a181613b79565b82525050565b6135b86135b382613b79565b613c7d565b82525050565b60006135ca82856133b4565b6014820191506135da82846135a7565b6020820191508190509392505050565b60006135f58261352f565b9150613601828561344f565b915061360c82613552565b9150613618828461344f565b91508190509392505050565b600061363082886135a7565b60208201915061364082876133b4565b60148201915061365082866135a7565b60208201915061366082856133b4565b60148201915061367082846135a7565b6020820191508190509695505050505050565b600060208201905061369860008301846133a5565b92915050565b60006040820190506136b360008301856133a5565b6136c060208301846133a5565b9392505050565b60006060820190506136dc60008301866133a5565b6136e960208301856133a5565b6136f66040830184613598565b949350505050565b600060c08201905061371360008301896133a5565b61372060208301886133a5565b61372d6040830187613598565b61373a60608301866133da565b6137476080830185613598565b61375460a0830184613598565b979650505050505050565b600060408201905061377460008301856133a5565b61378160208301846133da565b9392505050565b600060208201905061379d60008301846133cb565b92915050565b60006020820190506137b860008301846133da565b92915050565b60006060820190506137d360008301866133da565b6137e060208301856133a5565b6137ed60408301846133a5565b949350505050565b600060c08201905061380a60008301896133da565b6138176020830188613598565b61382460408301876133a5565b61383160608301866133a5565b61383e6080830185613598565b61384b60a0830184613598565b979650505050505050565b600060208201905061386b60008301846133e9565b92915050565b600060208201905061388660008301846133f8565b92915050565b60006020820190506138a16000830184613407565b92915050565b600060208201905081810360008301526138c18184613416565b905092915050565b600060208201905081810360008301526138e281613480565b9050919050565b60006020820190508181036000830152613902816134a3565b9050919050565b60006020820190508181036000830152613922816134c6565b9050919050565b60006020820190508181036000830152613942816134e9565b9050919050565b600060208201905081810360008301526139628161350c565b9050919050565b6000602082019050818103600083015261398281613575565b9050919050565b600060208201905061399e6000830184613598565b92915050565b60006139ae6139bf565b90506139ba8282613c28565b919050565b6000604051905090565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006139fb82613b79565b9150613a0683613b79565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613a3b57613a3a613c87565b5b828201905092915050565b6000613a5182613b79565b9150613a5c83613b79565b925082613a6c57613a6b613cb6565b5b828204905092915050565b6000613a8282613b79565b9150613a8d83613b79565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613ac657613ac5613c87565b5b828202905092915050565b6000613adc82613b79565b9150613ae783613b79565b925082821015613afa57613af9613c87565b5b828203905092915050565b6000613b1082613b59565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613b8e82613b95565b9050919050565b6000613ba082613b59565b9050919050565b6000613bb282613bb9565b9050919050565b6000613bc482613b59565b9050919050565b60005b83811015613be9578082015181840152602081019050613bce565b83811115613bf8576000848401525b50505050565b6000613c0982613b79565b91506000821415613c1d57613c1c613c87565b5b600182039050919050565b613c3182613d14565b810181811067ffffffffffffffff82111715613c5057613c4f613ce5565b5b80604052505050565b6000613c6482613c6b565b9050919050565b6000613c7682613d25565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b613ecf81613b05565b8114613eda57600080fd5b50565b613ee681613b17565b8114613ef157600080fd5b50565b613efd81613b23565b8114613f0857600080fd5b50565b613f1481613b2d565b8114613f1f57600080fd5b50565b613f2b81613b79565b8114613f3657600080fd5b5056fea2646970667358221220f873bc9c0b4ad7fc7ca5ef26a7efb2f6c2ffb5d5a22d6cf43faf57437f8e050a64736f6c63430008040033",
}

// OrderMarketplaceABI is the input ABI used to generate the binding from.
// Deprecated: Use OrderMarketplaceMetaData.ABI instead.
var OrderMarketplaceABI = OrderMarketplaceMetaData.ABI

// OrderMarketplaceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OrderMarketplaceMetaData.Bin instead.
var OrderMarketplaceBin = OrderMarketplaceMetaData.Bin

// DeployOrderMarketplace deploys a new Ethereum contract, binding an instance of OrderMarketplace to it.
func DeployOrderMarketplace(auth *bind.TransactOpts, backend bind.ContractBackend, _acceptedToken common.Address, _beneficary common.Address, _marketplaceStorage common.Address, _ownerCutPerMillion *big.Int) (common.Address, *types.Transaction, *OrderMarketplace, error) {
	parsed, err := OrderMarketplaceMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OrderMarketplaceBin), backend, _acceptedToken, _beneficary, _marketplaceStorage, _ownerCutPerMillion)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OrderMarketplace{OrderMarketplaceCaller: OrderMarketplaceCaller{contract: contract}, OrderMarketplaceTransactor: OrderMarketplaceTransactor{contract: contract}, OrderMarketplaceFilterer: OrderMarketplaceFilterer{contract: contract}}, nil
}

// OrderMarketplace is an auto generated Go binding around an Ethereum contract.
type OrderMarketplace struct {
	OrderMarketplaceCaller     // Read-only binding to the contract
	OrderMarketplaceTransactor // Write-only binding to the contract
	OrderMarketplaceFilterer   // Log filterer for contract events
}

// OrderMarketplaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type OrderMarketplaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OrderMarketplaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OrderMarketplaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OrderMarketplaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OrderMarketplaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OrderMarketplaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OrderMarketplaceSession struct {
	Contract     *OrderMarketplace // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OrderMarketplaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OrderMarketplaceCallerSession struct {
	Contract *OrderMarketplaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// OrderMarketplaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OrderMarketplaceTransactorSession struct {
	Contract     *OrderMarketplaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// OrderMarketplaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type OrderMarketplaceRaw struct {
	Contract *OrderMarketplace // Generic contract binding to access the raw methods on
}

// OrderMarketplaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OrderMarketplaceCallerRaw struct {
	Contract *OrderMarketplaceCaller // Generic read-only contract binding to access the raw methods on
}

// OrderMarketplaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OrderMarketplaceTransactorRaw struct {
	Contract *OrderMarketplaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOrderMarketplace creates a new instance of OrderMarketplace, bound to a specific deployed contract.
func NewOrderMarketplace(address common.Address, backend bind.ContractBackend) (*OrderMarketplace, error) {
	contract, err := bindOrderMarketplace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OrderMarketplace{OrderMarketplaceCaller: OrderMarketplaceCaller{contract: contract}, OrderMarketplaceTransactor: OrderMarketplaceTransactor{contract: contract}, OrderMarketplaceFilterer: OrderMarketplaceFilterer{contract: contract}}, nil
}

// NewOrderMarketplaceCaller creates a new read-only instance of OrderMarketplace, bound to a specific deployed contract.
func NewOrderMarketplaceCaller(address common.Address, caller bind.ContractCaller) (*OrderMarketplaceCaller, error) {
	contract, err := bindOrderMarketplace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceCaller{contract: contract}, nil
}

// NewOrderMarketplaceTransactor creates a new write-only instance of OrderMarketplace, bound to a specific deployed contract.
func NewOrderMarketplaceTransactor(address common.Address, transactor bind.ContractTransactor) (*OrderMarketplaceTransactor, error) {
	contract, err := bindOrderMarketplace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceTransactor{contract: contract}, nil
}

// NewOrderMarketplaceFilterer creates a new log filterer instance of OrderMarketplace, bound to a specific deployed contract.
func NewOrderMarketplaceFilterer(address common.Address, filterer bind.ContractFilterer) (*OrderMarketplaceFilterer, error) {
	contract, err := bindOrderMarketplace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceFilterer{contract: contract}, nil
}

// bindOrderMarketplace binds a generic wrapper to an already deployed contract.
func bindOrderMarketplace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OrderMarketplaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OrderMarketplace *OrderMarketplaceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OrderMarketplace.Contract.OrderMarketplaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OrderMarketplace *OrderMarketplaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.OrderMarketplaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OrderMarketplace *OrderMarketplaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.OrderMarketplaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OrderMarketplace *OrderMarketplaceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OrderMarketplace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OrderMarketplace *OrderMarketplaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OrderMarketplace *OrderMarketplaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.contract.Transact(opts, method, params...)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceCaller) ADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceSession) ADMINROLE() ([32]byte, error) {
	return _OrderMarketplace.Contract.ADMINROLE(&_OrderMarketplace.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceCallerSession) ADMINROLE() ([32]byte, error) {
	return _OrderMarketplace.Contract.ADMINROLE(&_OrderMarketplace.CallOpts)
}

// CANCELROLE is a free data retrieval call binding the contract method 0x13c27ca7.
//
// Solidity: function CANCEL_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceCaller) CANCELROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "CANCEL_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CANCELROLE is a free data retrieval call binding the contract method 0x13c27ca7.
//
// Solidity: function CANCEL_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceSession) CANCELROLE() ([32]byte, error) {
	return _OrderMarketplace.Contract.CANCELROLE(&_OrderMarketplace.CallOpts)
}

// CANCELROLE is a free data retrieval call binding the contract method 0x13c27ca7.
//
// Solidity: function CANCEL_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceCallerSession) CANCELROLE() ([32]byte, error) {
	return _OrderMarketplace.Contract.CANCELROLE(&_OrderMarketplace.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _OrderMarketplace.Contract.DEFAULTADMINROLE(&_OrderMarketplace.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _OrderMarketplace.Contract.DEFAULTADMINROLE(&_OrderMarketplace.CallOpts)
}

// ERC721Interface is a free data retrieval call binding the contract method 0x2b4c32be.
//
// Solidity: function ERC721_Interface() view returns(bytes4)
func (_OrderMarketplace *OrderMarketplaceCaller) ERC721Interface(opts *bind.CallOpts) ([4]byte, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "ERC721_Interface")

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// ERC721Interface is a free data retrieval call binding the contract method 0x2b4c32be.
//
// Solidity: function ERC721_Interface() view returns(bytes4)
func (_OrderMarketplace *OrderMarketplaceSession) ERC721Interface() ([4]byte, error) {
	return _OrderMarketplace.Contract.ERC721Interface(&_OrderMarketplace.CallOpts)
}

// ERC721Interface is a free data retrieval call binding the contract method 0x2b4c32be.
//
// Solidity: function ERC721_Interface() view returns(bytes4)
func (_OrderMarketplace *OrderMarketplaceCallerSession) ERC721Interface() ([4]byte, error) {
	return _OrderMarketplace.Contract.ERC721Interface(&_OrderMarketplace.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceSession) PAUSERROLE() ([32]byte, error) {
	return _OrderMarketplace.Contract.PAUSERROLE(&_OrderMarketplace.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceCallerSession) PAUSERROLE() ([32]byte, error) {
	return _OrderMarketplace.Contract.PAUSERROLE(&_OrderMarketplace.CallOpts)
}

// AcceptedToken is a free data retrieval call binding the contract method 0x451c3d80.
//
// Solidity: function acceptedToken() view returns(address)
func (_OrderMarketplace *OrderMarketplaceCaller) AcceptedToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "acceptedToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AcceptedToken is a free data retrieval call binding the contract method 0x451c3d80.
//
// Solidity: function acceptedToken() view returns(address)
func (_OrderMarketplace *OrderMarketplaceSession) AcceptedToken() (common.Address, error) {
	return _OrderMarketplace.Contract.AcceptedToken(&_OrderMarketplace.CallOpts)
}

// AcceptedToken is a free data retrieval call binding the contract method 0x451c3d80.
//
// Solidity: function acceptedToken() view returns(address)
func (_OrderMarketplace *OrderMarketplaceCallerSession) AcceptedToken() (common.Address, error) {
	return _OrderMarketplace.Contract.AcceptedToken(&_OrderMarketplace.CallOpts)
}

// Beneficary is a free data retrieval call binding the contract method 0xcbfda1c5.
//
// Solidity: function beneficary() view returns(address)
func (_OrderMarketplace *OrderMarketplaceCaller) Beneficary(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "beneficary")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Beneficary is a free data retrieval call binding the contract method 0xcbfda1c5.
//
// Solidity: function beneficary() view returns(address)
func (_OrderMarketplace *OrderMarketplaceSession) Beneficary() (common.Address, error) {
	return _OrderMarketplace.Contract.Beneficary(&_OrderMarketplace.CallOpts)
}

// Beneficary is a free data retrieval call binding the contract method 0xcbfda1c5.
//
// Solidity: function beneficary() view returns(address)
func (_OrderMarketplace *OrderMarketplaceCallerSession) Beneficary() (common.Address, error) {
	return _OrderMarketplace.Contract.Beneficary(&_OrderMarketplace.CallOpts)
}

// GetBlackListStatus is a free data retrieval call binding the contract method 0x59bf1abe.
//
// Solidity: function getBlackListStatus(address _maker) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceCaller) GetBlackListStatus(opts *bind.CallOpts, _maker common.Address) (bool, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "getBlackListStatus", _maker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetBlackListStatus is a free data retrieval call binding the contract method 0x59bf1abe.
//
// Solidity: function getBlackListStatus(address _maker) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceSession) GetBlackListStatus(_maker common.Address) (bool, error) {
	return _OrderMarketplace.Contract.GetBlackListStatus(&_OrderMarketplace.CallOpts, _maker)
}

// GetBlackListStatus is a free data retrieval call binding the contract method 0x59bf1abe.
//
// Solidity: function getBlackListStatus(address _maker) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceCallerSession) GetBlackListStatus(_maker common.Address) (bool, error) {
	return _OrderMarketplace.Contract.GetBlackListStatus(&_OrderMarketplace.CallOpts, _maker)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _OrderMarketplace.Contract.GetRoleAdmin(&_OrderMarketplace.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _OrderMarketplace.Contract.GetRoleAdmin(&_OrderMarketplace.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_OrderMarketplace *OrderMarketplaceCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_OrderMarketplace *OrderMarketplaceSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _OrderMarketplace.Contract.GetRoleMember(&_OrderMarketplace.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_OrderMarketplace *OrderMarketplaceCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _OrderMarketplace.Contract.GetRoleMember(&_OrderMarketplace.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _OrderMarketplace.Contract.GetRoleMemberCount(&_OrderMarketplace.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _OrderMarketplace.Contract.GetRoleMemberCount(&_OrderMarketplace.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _OrderMarketplace.Contract.HasRole(&_OrderMarketplace.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _OrderMarketplace.Contract.HasRole(&_OrderMarketplace.CallOpts, role, account)
}

// IsBlackListed is a free data retrieval call binding the contract method 0xe47d6060.
//
// Solidity: function isBlackListed(address ) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceCaller) IsBlackListed(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "isBlackListed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBlackListed is a free data retrieval call binding the contract method 0xe47d6060.
//
// Solidity: function isBlackListed(address ) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceSession) IsBlackListed(arg0 common.Address) (bool, error) {
	return _OrderMarketplace.Contract.IsBlackListed(&_OrderMarketplace.CallOpts, arg0)
}

// IsBlackListed is a free data retrieval call binding the contract method 0xe47d6060.
//
// Solidity: function isBlackListed(address ) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceCallerSession) IsBlackListed(arg0 common.Address) (bool, error) {
	return _OrderMarketplace.Contract.IsBlackListed(&_OrderMarketplace.CallOpts, arg0)
}

// MarketplaceStorage is a free data retrieval call binding the contract method 0x46b3aec6.
//
// Solidity: function marketplaceStorage() view returns(address)
func (_OrderMarketplace *OrderMarketplaceCaller) MarketplaceStorage(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "marketplaceStorage")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MarketplaceStorage is a free data retrieval call binding the contract method 0x46b3aec6.
//
// Solidity: function marketplaceStorage() view returns(address)
func (_OrderMarketplace *OrderMarketplaceSession) MarketplaceStorage() (common.Address, error) {
	return _OrderMarketplace.Contract.MarketplaceStorage(&_OrderMarketplace.CallOpts)
}

// MarketplaceStorage is a free data retrieval call binding the contract method 0x46b3aec6.
//
// Solidity: function marketplaceStorage() view returns(address)
func (_OrderMarketplace *OrderMarketplaceCallerSession) MarketplaceStorage() (common.Address, error) {
	return _OrderMarketplace.Contract.MarketplaceStorage(&_OrderMarketplace.CallOpts)
}

// MinStageDuration is a free data retrieval call binding the contract method 0xb42cf929.
//
// Solidity: function minStageDuration() view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceCaller) MinStageDuration(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "minStageDuration")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinStageDuration is a free data retrieval call binding the contract method 0xb42cf929.
//
// Solidity: function minStageDuration() view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceSession) MinStageDuration() (*big.Int, error) {
	return _OrderMarketplace.Contract.MinStageDuration(&_OrderMarketplace.CallOpts)
}

// MinStageDuration is a free data retrieval call binding the contract method 0xb42cf929.
//
// Solidity: function minStageDuration() view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceCallerSession) MinStageDuration() (*big.Int, error) {
	return _OrderMarketplace.Contract.MinStageDuration(&_OrderMarketplace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OrderMarketplace *OrderMarketplaceCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OrderMarketplace *OrderMarketplaceSession) Owner() (common.Address, error) {
	return _OrderMarketplace.Contract.Owner(&_OrderMarketplace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OrderMarketplace *OrderMarketplaceCallerSession) Owner() (common.Address, error) {
	return _OrderMarketplace.Contract.Owner(&_OrderMarketplace.CallOpts)
}

// OwnerCutPerMillion is a free data retrieval call binding the contract method 0xa01f79d4.
//
// Solidity: function ownerCutPerMillion() view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceCaller) OwnerCutPerMillion(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "ownerCutPerMillion")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// OwnerCutPerMillion is a free data retrieval call binding the contract method 0xa01f79d4.
//
// Solidity: function ownerCutPerMillion() view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceSession) OwnerCutPerMillion() (*big.Int, error) {
	return _OrderMarketplace.Contract.OwnerCutPerMillion(&_OrderMarketplace.CallOpts)
}

// OwnerCutPerMillion is a free data retrieval call binding the contract method 0xa01f79d4.
//
// Solidity: function ownerCutPerMillion() view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceCallerSession) OwnerCutPerMillion() (*big.Int, error) {
	return _OrderMarketplace.Contract.OwnerCutPerMillion(&_OrderMarketplace.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_OrderMarketplace *OrderMarketplaceCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_OrderMarketplace *OrderMarketplaceSession) Paused() (bool, error) {
	return _OrderMarketplace.Contract.Paused(&_OrderMarketplace.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_OrderMarketplace *OrderMarketplaceCallerSession) Paused() (bool, error) {
	return _OrderMarketplace.Contract.Paused(&_OrderMarketplace.CallOpts)
}

// PublicationFeeInWei is a free data retrieval call binding the contract method 0xae4f1198.
//
// Solidity: function publicationFeeInWei() view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceCaller) PublicationFeeInWei(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "publicationFeeInWei")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PublicationFeeInWei is a free data retrieval call binding the contract method 0xae4f1198.
//
// Solidity: function publicationFeeInWei() view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceSession) PublicationFeeInWei() (*big.Int, error) {
	return _OrderMarketplace.Contract.PublicationFeeInWei(&_OrderMarketplace.CallOpts)
}

// PublicationFeeInWei is a free data retrieval call binding the contract method 0xae4f1198.
//
// Solidity: function publicationFeeInWei() view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceCallerSession) PublicationFeeInWei() (*big.Int, error) {
	return _OrderMarketplace.Contract.PublicationFeeInWei(&_OrderMarketplace.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _OrderMarketplace.Contract.SupportsInterface(&_OrderMarketplace.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _OrderMarketplace.Contract.SupportsInterface(&_OrderMarketplace.CallOpts, interfaceId)
}

// AddBlackList is a paid mutator transaction binding the contract method 0x0ecb93c0.
//
// Solidity: function addBlackList(address _evilUser) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) AddBlackList(opts *bind.TransactOpts, _evilUser common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "addBlackList", _evilUser)
}

// AddBlackList is a paid mutator transaction binding the contract method 0x0ecb93c0.
//
// Solidity: function addBlackList(address _evilUser) returns()
func (_OrderMarketplace *OrderMarketplaceSession) AddBlackList(_evilUser common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.AddBlackList(&_OrderMarketplace.TransactOpts, _evilUser)
}

// AddBlackList is a paid mutator transaction binding the contract method 0x0ecb93c0.
//
// Solidity: function addBlackList(address _evilUser) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) AddBlackList(_evilUser common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.AddBlackList(&_OrderMarketplace.TransactOpts, _evilUser)
}

// CancelOrder is a paid mutator transaction binding the contract method 0x7489ec23.
//
// Solidity: function cancelOrder(bytes32 nftAsset) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) CancelOrder(opts *bind.TransactOpts, nftAsset [32]byte) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "cancelOrder", nftAsset)
}

// CancelOrder is a paid mutator transaction binding the contract method 0x7489ec23.
//
// Solidity: function cancelOrder(bytes32 nftAsset) returns()
func (_OrderMarketplace *OrderMarketplaceSession) CancelOrder(nftAsset [32]byte) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.CancelOrder(&_OrderMarketplace.TransactOpts, nftAsset)
}

// CancelOrder is a paid mutator transaction binding the contract method 0x7489ec23.
//
// Solidity: function cancelOrder(bytes32 nftAsset) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) CancelOrder(nftAsset [32]byte) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.CancelOrder(&_OrderMarketplace.TransactOpts, nftAsset)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x6f652e1a.
//
// Solidity: function createOrder(address nftAddress, uint256 assetId, uint256 priceInWei, uint256 expiredAt) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) CreateOrder(opts *bind.TransactOpts, nftAddress common.Address, assetId *big.Int, priceInWei *big.Int, expiredAt *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "createOrder", nftAddress, assetId, priceInWei, expiredAt)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x6f652e1a.
//
// Solidity: function createOrder(address nftAddress, uint256 assetId, uint256 priceInWei, uint256 expiredAt) returns()
func (_OrderMarketplace *OrderMarketplaceSession) CreateOrder(nftAddress common.Address, assetId *big.Int, priceInWei *big.Int, expiredAt *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.CreateOrder(&_OrderMarketplace.TransactOpts, nftAddress, assetId, priceInWei, expiredAt)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x6f652e1a.
//
// Solidity: function createOrder(address nftAddress, uint256 assetId, uint256 priceInWei, uint256 expiredAt) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) CreateOrder(nftAddress common.Address, assetId *big.Int, priceInWei *big.Int, expiredAt *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.CreateOrder(&_OrderMarketplace.TransactOpts, nftAddress, assetId, priceInWei, expiredAt)
}

// ExecuteOrder is a paid mutator transaction binding the contract method 0xae7b0333.
//
// Solidity: function executeOrder(address nftAddress, uint256 assetId, uint256 price) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) ExecuteOrder(opts *bind.TransactOpts, nftAddress common.Address, assetId *big.Int, price *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "executeOrder", nftAddress, assetId, price)
}

// ExecuteOrder is a paid mutator transaction binding the contract method 0xae7b0333.
//
// Solidity: function executeOrder(address nftAddress, uint256 assetId, uint256 price) returns()
func (_OrderMarketplace *OrderMarketplaceSession) ExecuteOrder(nftAddress common.Address, assetId *big.Int, price *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.ExecuteOrder(&_OrderMarketplace.TransactOpts, nftAddress, assetId, price)
}

// ExecuteOrder is a paid mutator transaction binding the contract method 0xae7b0333.
//
// Solidity: function executeOrder(address nftAddress, uint256 assetId, uint256 price) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) ExecuteOrder(nftAddress common.Address, assetId *big.Int, price *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.ExecuteOrder(&_OrderMarketplace.TransactOpts, nftAddress, assetId, price)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_OrderMarketplace *OrderMarketplaceSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.GrantRole(&_OrderMarketplace.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.GrantRole(&_OrderMarketplace.TransactOpts, role, account)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_OrderMarketplace *OrderMarketplaceSession) Pause() (*types.Transaction, error) {
	return _OrderMarketplace.Contract.Pause(&_OrderMarketplace.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) Pause() (*types.Transaction, error) {
	return _OrderMarketplace.Contract.Pause(&_OrderMarketplace.TransactOpts)
}

// RemoveBlackList is a paid mutator transaction binding the contract method 0xe4997dc5.
//
// Solidity: function removeBlackList(address _clearedUser) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) RemoveBlackList(opts *bind.TransactOpts, _clearedUser common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "removeBlackList", _clearedUser)
}

// RemoveBlackList is a paid mutator transaction binding the contract method 0xe4997dc5.
//
// Solidity: function removeBlackList(address _clearedUser) returns()
func (_OrderMarketplace *OrderMarketplaceSession) RemoveBlackList(_clearedUser common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.RemoveBlackList(&_OrderMarketplace.TransactOpts, _clearedUser)
}

// RemoveBlackList is a paid mutator transaction binding the contract method 0xe4997dc5.
//
// Solidity: function removeBlackList(address _clearedUser) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) RemoveBlackList(_clearedUser common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.RemoveBlackList(&_OrderMarketplace.TransactOpts, _clearedUser)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OrderMarketplace *OrderMarketplaceSession) RenounceOwnership() (*types.Transaction, error) {
	return _OrderMarketplace.Contract.RenounceOwnership(&_OrderMarketplace.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _OrderMarketplace.Contract.RenounceOwnership(&_OrderMarketplace.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_OrderMarketplace *OrderMarketplaceSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.RenounceRole(&_OrderMarketplace.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.RenounceRole(&_OrderMarketplace.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_OrderMarketplace *OrderMarketplaceSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.RevokeRole(&_OrderMarketplace.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.RevokeRole(&_OrderMarketplace.TransactOpts, role, account)
}

// SetBeneficary is a paid mutator transaction binding the contract method 0x0db3cc05.
//
// Solidity: function setBeneficary(address _beneficary) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) SetBeneficary(opts *bind.TransactOpts, _beneficary common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "setBeneficary", _beneficary)
}

// SetBeneficary is a paid mutator transaction binding the contract method 0x0db3cc05.
//
// Solidity: function setBeneficary(address _beneficary) returns()
func (_OrderMarketplace *OrderMarketplaceSession) SetBeneficary(_beneficary common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.SetBeneficary(&_OrderMarketplace.TransactOpts, _beneficary)
}

// SetBeneficary is a paid mutator transaction binding the contract method 0x0db3cc05.
//
// Solidity: function setBeneficary(address _beneficary) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) SetBeneficary(_beneficary common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.SetBeneficary(&_OrderMarketplace.TransactOpts, _beneficary)
}

// SetMinStageDuration is a paid mutator transaction binding the contract method 0xf6021884.
//
// Solidity: function setMinStageDuration(uint256 duration) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) SetMinStageDuration(opts *bind.TransactOpts, duration *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "setMinStageDuration", duration)
}

// SetMinStageDuration is a paid mutator transaction binding the contract method 0xf6021884.
//
// Solidity: function setMinStageDuration(uint256 duration) returns()
func (_OrderMarketplace *OrderMarketplaceSession) SetMinStageDuration(duration *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.SetMinStageDuration(&_OrderMarketplace.TransactOpts, duration)
}

// SetMinStageDuration is a paid mutator transaction binding the contract method 0xf6021884.
//
// Solidity: function setMinStageDuration(uint256 duration) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) SetMinStageDuration(duration *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.SetMinStageDuration(&_OrderMarketplace.TransactOpts, duration)
}

// SetOwnerCutPerMillion is a paid mutator transaction binding the contract method 0x19dad16d.
//
// Solidity: function setOwnerCutPerMillion(uint256 _ownerCutPerMillion) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) SetOwnerCutPerMillion(opts *bind.TransactOpts, _ownerCutPerMillion *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "setOwnerCutPerMillion", _ownerCutPerMillion)
}

// SetOwnerCutPerMillion is a paid mutator transaction binding the contract method 0x19dad16d.
//
// Solidity: function setOwnerCutPerMillion(uint256 _ownerCutPerMillion) returns()
func (_OrderMarketplace *OrderMarketplaceSession) SetOwnerCutPerMillion(_ownerCutPerMillion *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.SetOwnerCutPerMillion(&_OrderMarketplace.TransactOpts, _ownerCutPerMillion)
}

// SetOwnerCutPerMillion is a paid mutator transaction binding the contract method 0x19dad16d.
//
// Solidity: function setOwnerCutPerMillion(uint256 _ownerCutPerMillion) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) SetOwnerCutPerMillion(_ownerCutPerMillion *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.SetOwnerCutPerMillion(&_OrderMarketplace.TransactOpts, _ownerCutPerMillion)
}

// SetPublicationFee is a paid mutator transaction binding the contract method 0xaf8996f1.
//
// Solidity: function setPublicationFee(uint256 _publicationFee) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) SetPublicationFee(opts *bind.TransactOpts, _publicationFee *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "setPublicationFee", _publicationFee)
}

// SetPublicationFee is a paid mutator transaction binding the contract method 0xaf8996f1.
//
// Solidity: function setPublicationFee(uint256 _publicationFee) returns()
func (_OrderMarketplace *OrderMarketplaceSession) SetPublicationFee(_publicationFee *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.SetPublicationFee(&_OrderMarketplace.TransactOpts, _publicationFee)
}

// SetPublicationFee is a paid mutator transaction binding the contract method 0xaf8996f1.
//
// Solidity: function setPublicationFee(uint256 _publicationFee) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) SetPublicationFee(_publicationFee *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.SetPublicationFee(&_OrderMarketplace.TransactOpts, _publicationFee)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OrderMarketplace *OrderMarketplaceSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.TransferOwnership(&_OrderMarketplace.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.TransferOwnership(&_OrderMarketplace.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_OrderMarketplace *OrderMarketplaceSession) Unpause() (*types.Transaction, error) {
	return _OrderMarketplace.Contract.Unpause(&_OrderMarketplace.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) Unpause() (*types.Transaction, error) {
	return _OrderMarketplace.Contract.Unpause(&_OrderMarketplace.TransactOpts)
}

// UpdateStorageAddress is a paid mutator transaction binding the contract method 0x889e2129.
//
// Solidity: function updateStorageAddress(address _marketplaceStorage) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) UpdateStorageAddress(opts *bind.TransactOpts, _marketplaceStorage common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "updateStorageAddress", _marketplaceStorage)
}

// UpdateStorageAddress is a paid mutator transaction binding the contract method 0x889e2129.
//
// Solidity: function updateStorageAddress(address _marketplaceStorage) returns()
func (_OrderMarketplace *OrderMarketplaceSession) UpdateStorageAddress(_marketplaceStorage common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.UpdateStorageAddress(&_OrderMarketplace.TransactOpts, _marketplaceStorage)
}

// UpdateStorageAddress is a paid mutator transaction binding the contract method 0x889e2129.
//
// Solidity: function updateStorageAddress(address _marketplaceStorage) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) UpdateStorageAddress(_marketplaceStorage common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.UpdateStorageAddress(&_OrderMarketplace.TransactOpts, _marketplaceStorage)
}

// OrderMarketplaceAddedBlackListIterator is returned from FilterAddedBlackList and is used to iterate over the raw logs and unpacked data for AddedBlackList events raised by the OrderMarketplace contract.
type OrderMarketplaceAddedBlackListIterator struct {
	Event *OrderMarketplaceAddedBlackList // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceAddedBlackListIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceAddedBlackList)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceAddedBlackList)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceAddedBlackListIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceAddedBlackListIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceAddedBlackList represents a AddedBlackList event raised by the OrderMarketplace contract.
type OrderMarketplaceAddedBlackList struct {
	User common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAddedBlackList is a free log retrieval operation binding the contract event 0x42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc.
//
// Solidity: event AddedBlackList(address _user)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterAddedBlackList(opts *bind.FilterOpts) (*OrderMarketplaceAddedBlackListIterator, error) {

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "AddedBlackList")
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceAddedBlackListIterator{contract: _OrderMarketplace.contract, event: "AddedBlackList", logs: logs, sub: sub}, nil
}

// WatchAddedBlackList is a free log subscription operation binding the contract event 0x42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc.
//
// Solidity: event AddedBlackList(address _user)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchAddedBlackList(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceAddedBlackList) (event.Subscription, error) {

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "AddedBlackList")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceAddedBlackList)
				if err := _OrderMarketplace.contract.UnpackLog(event, "AddedBlackList", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddedBlackList is a log parse operation binding the contract event 0x42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc.
//
// Solidity: event AddedBlackList(address _user)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseAddedBlackList(log types.Log) (*OrderMarketplaceAddedBlackList, error) {
	event := new(OrderMarketplaceAddedBlackList)
	if err := _OrderMarketplace.contract.UnpackLog(event, "AddedBlackList", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceChangedOwnerCutPerMillionIterator is returned from FilterChangedOwnerCutPerMillion and is used to iterate over the raw logs and unpacked data for ChangedOwnerCutPerMillion events raised by the OrderMarketplace contract.
type OrderMarketplaceChangedOwnerCutPerMillionIterator struct {
	Event *OrderMarketplaceChangedOwnerCutPerMillion // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceChangedOwnerCutPerMillionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceChangedOwnerCutPerMillion)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceChangedOwnerCutPerMillion)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceChangedOwnerCutPerMillionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceChangedOwnerCutPerMillionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceChangedOwnerCutPerMillion represents a ChangedOwnerCutPerMillion event raised by the OrderMarketplace contract.
type OrderMarketplaceChangedOwnerCutPerMillion struct {
	OwnerCutPerMillion *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterChangedOwnerCutPerMillion is a free log retrieval operation binding the contract event 0xfa406a120a9e7f2b332bfb7a43d3bf1c3f079262202907a6b69c94b2821a02c6.
//
// Solidity: event ChangedOwnerCutPerMillion(uint256 ownerCutPerMillion)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterChangedOwnerCutPerMillion(opts *bind.FilterOpts) (*OrderMarketplaceChangedOwnerCutPerMillionIterator, error) {

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "ChangedOwnerCutPerMillion")
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceChangedOwnerCutPerMillionIterator{contract: _OrderMarketplace.contract, event: "ChangedOwnerCutPerMillion", logs: logs, sub: sub}, nil
}

// WatchChangedOwnerCutPerMillion is a free log subscription operation binding the contract event 0xfa406a120a9e7f2b332bfb7a43d3bf1c3f079262202907a6b69c94b2821a02c6.
//
// Solidity: event ChangedOwnerCutPerMillion(uint256 ownerCutPerMillion)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchChangedOwnerCutPerMillion(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceChangedOwnerCutPerMillion) (event.Subscription, error) {

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "ChangedOwnerCutPerMillion")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceChangedOwnerCutPerMillion)
				if err := _OrderMarketplace.contract.UnpackLog(event, "ChangedOwnerCutPerMillion", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangedOwnerCutPerMillion is a log parse operation binding the contract event 0xfa406a120a9e7f2b332bfb7a43d3bf1c3f079262202907a6b69c94b2821a02c6.
//
// Solidity: event ChangedOwnerCutPerMillion(uint256 ownerCutPerMillion)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseChangedOwnerCutPerMillion(log types.Log) (*OrderMarketplaceChangedOwnerCutPerMillion, error) {
	event := new(OrderMarketplaceChangedOwnerCutPerMillion)
	if err := _OrderMarketplace.contract.UnpackLog(event, "ChangedOwnerCutPerMillion", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceChangedPublicationFeeIterator is returned from FilterChangedPublicationFee and is used to iterate over the raw logs and unpacked data for ChangedPublicationFee events raised by the OrderMarketplace contract.
type OrderMarketplaceChangedPublicationFeeIterator struct {
	Event *OrderMarketplaceChangedPublicationFee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceChangedPublicationFeeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceChangedPublicationFee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceChangedPublicationFee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceChangedPublicationFeeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceChangedPublicationFeeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceChangedPublicationFee represents a ChangedPublicationFee event raised by the OrderMarketplace contract.
type OrderMarketplaceChangedPublicationFee struct {
	PublicationFee *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterChangedPublicationFee is a free log retrieval operation binding the contract event 0xe7fa8737293f41b5dfa0d5c3e552860a06275bed7015581b083c7be7003308ba.
//
// Solidity: event ChangedPublicationFee(uint256 publicationFee)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterChangedPublicationFee(opts *bind.FilterOpts) (*OrderMarketplaceChangedPublicationFeeIterator, error) {

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "ChangedPublicationFee")
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceChangedPublicationFeeIterator{contract: _OrderMarketplace.contract, event: "ChangedPublicationFee", logs: logs, sub: sub}, nil
}

// WatchChangedPublicationFee is a free log subscription operation binding the contract event 0xe7fa8737293f41b5dfa0d5c3e552860a06275bed7015581b083c7be7003308ba.
//
// Solidity: event ChangedPublicationFee(uint256 publicationFee)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchChangedPublicationFee(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceChangedPublicationFee) (event.Subscription, error) {

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "ChangedPublicationFee")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceChangedPublicationFee)
				if err := _OrderMarketplace.contract.UnpackLog(event, "ChangedPublicationFee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangedPublicationFee is a log parse operation binding the contract event 0xe7fa8737293f41b5dfa0d5c3e552860a06275bed7015581b083c7be7003308ba.
//
// Solidity: event ChangedPublicationFee(uint256 publicationFee)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseChangedPublicationFee(log types.Log) (*OrderMarketplaceChangedPublicationFee, error) {
	event := new(OrderMarketplaceChangedPublicationFee)
	if err := _OrderMarketplace.contract.UnpackLog(event, "ChangedPublicationFee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceMarketplaceStorageUpdatedIterator is returned from FilterMarketplaceStorageUpdated and is used to iterate over the raw logs and unpacked data for MarketplaceStorageUpdated events raised by the OrderMarketplace contract.
type OrderMarketplaceMarketplaceStorageUpdatedIterator struct {
	Event *OrderMarketplaceMarketplaceStorageUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceMarketplaceStorageUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceMarketplaceStorageUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceMarketplaceStorageUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceMarketplaceStorageUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceMarketplaceStorageUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceMarketplaceStorageUpdated represents a MarketplaceStorageUpdated event raised by the OrderMarketplace contract.
type OrderMarketplaceMarketplaceStorageUpdated struct {
	MarketplaceStorage common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterMarketplaceStorageUpdated is a free log retrieval operation binding the contract event 0x19e07a962d0e1cab8b7d4be06b77a7225ca7ebb744994cb6546fdd815590dc9d.
//
// Solidity: event MarketplaceStorageUpdated(address _marketplaceStorage)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterMarketplaceStorageUpdated(opts *bind.FilterOpts) (*OrderMarketplaceMarketplaceStorageUpdatedIterator, error) {

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "MarketplaceStorageUpdated")
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceMarketplaceStorageUpdatedIterator{contract: _OrderMarketplace.contract, event: "MarketplaceStorageUpdated", logs: logs, sub: sub}, nil
}

// WatchMarketplaceStorageUpdated is a free log subscription operation binding the contract event 0x19e07a962d0e1cab8b7d4be06b77a7225ca7ebb744994cb6546fdd815590dc9d.
//
// Solidity: event MarketplaceStorageUpdated(address _marketplaceStorage)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchMarketplaceStorageUpdated(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceMarketplaceStorageUpdated) (event.Subscription, error) {

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "MarketplaceStorageUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceMarketplaceStorageUpdated)
				if err := _OrderMarketplace.contract.UnpackLog(event, "MarketplaceStorageUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMarketplaceStorageUpdated is a log parse operation binding the contract event 0x19e07a962d0e1cab8b7d4be06b77a7225ca7ebb744994cb6546fdd815590dc9d.
//
// Solidity: event MarketplaceStorageUpdated(address _marketplaceStorage)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseMarketplaceStorageUpdated(log types.Log) (*OrderMarketplaceMarketplaceStorageUpdated, error) {
	event := new(OrderMarketplaceMarketplaceStorageUpdated)
	if err := _OrderMarketplace.contract.UnpackLog(event, "MarketplaceStorageUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceOrderCancelledIterator is returned from FilterOrderCancelled and is used to iterate over the raw logs and unpacked data for OrderCancelled events raised by the OrderMarketplace contract.
type OrderMarketplaceOrderCancelledIterator struct {
	Event *OrderMarketplaceOrderCancelled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceOrderCancelledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceOrderCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceOrderCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceOrderCancelledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceOrderCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceOrderCancelled represents a OrderCancelled event raised by the OrderMarketplace contract.
type OrderMarketplaceOrderCancelled struct {
	Who common.Address
	Id  [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOrderCancelled is a free log retrieval operation binding the contract event 0x35974c4230d53fb4c6e8553fd900c88ba92747dbc689a79bcd6ba755cb936985.
//
// Solidity: event OrderCancelled(address who, bytes32 id)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterOrderCancelled(opts *bind.FilterOpts) (*OrderMarketplaceOrderCancelledIterator, error) {

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "OrderCancelled")
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceOrderCancelledIterator{contract: _OrderMarketplace.contract, event: "OrderCancelled", logs: logs, sub: sub}, nil
}

// WatchOrderCancelled is a free log subscription operation binding the contract event 0x35974c4230d53fb4c6e8553fd900c88ba92747dbc689a79bcd6ba755cb936985.
//
// Solidity: event OrderCancelled(address who, bytes32 id)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchOrderCancelled(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceOrderCancelled) (event.Subscription, error) {

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "OrderCancelled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceOrderCancelled)
				if err := _OrderMarketplace.contract.UnpackLog(event, "OrderCancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderCancelled is a log parse operation binding the contract event 0x35974c4230d53fb4c6e8553fd900c88ba92747dbc689a79bcd6ba755cb936985.
//
// Solidity: event OrderCancelled(address who, bytes32 id)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseOrderCancelled(log types.Log) (*OrderMarketplaceOrderCancelled, error) {
	event := new(OrderMarketplaceOrderCancelled)
	if err := _OrderMarketplace.contract.UnpackLog(event, "OrderCancelled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceOrderCreatedIterator is returned from FilterOrderCreated and is used to iterate over the raw logs and unpacked data for OrderCreated events raised by the OrderMarketplace contract.
type OrderMarketplaceOrderCreatedIterator struct {
	Event *OrderMarketplaceOrderCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceOrderCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceOrderCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceOrderCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceOrderCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceOrderCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceOrderCreated represents a OrderCreated event raised by the OrderMarketplace contract.
type OrderMarketplaceOrderCreated struct {
	OrderId    [32]byte
	AssetId    *big.Int
	Seller     common.Address
	NftAddress common.Address
	PriceInWei *big.Int
	ExpiredAt  *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterOrderCreated is a free log retrieval operation binding the contract event 0x84c66c3f7ba4b390e20e8e8233e2a516f3ce34a72749e4f12bd010dfba238039.
//
// Solidity: event OrderCreated(bytes32 orderId, uint256 assetId, address seller, address nftAddress, uint256 priceInWei, uint256 expiredAt)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterOrderCreated(opts *bind.FilterOpts) (*OrderMarketplaceOrderCreatedIterator, error) {

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "OrderCreated")
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceOrderCreatedIterator{contract: _OrderMarketplace.contract, event: "OrderCreated", logs: logs, sub: sub}, nil
}

// WatchOrderCreated is a free log subscription operation binding the contract event 0x84c66c3f7ba4b390e20e8e8233e2a516f3ce34a72749e4f12bd010dfba238039.
//
// Solidity: event OrderCreated(bytes32 orderId, uint256 assetId, address seller, address nftAddress, uint256 priceInWei, uint256 expiredAt)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchOrderCreated(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceOrderCreated) (event.Subscription, error) {

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "OrderCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceOrderCreated)
				if err := _OrderMarketplace.contract.UnpackLog(event, "OrderCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderCreated is a log parse operation binding the contract event 0x84c66c3f7ba4b390e20e8e8233e2a516f3ce34a72749e4f12bd010dfba238039.
//
// Solidity: event OrderCreated(bytes32 orderId, uint256 assetId, address seller, address nftAddress, uint256 priceInWei, uint256 expiredAt)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseOrderCreated(log types.Log) (*OrderMarketplaceOrderCreated, error) {
	event := new(OrderMarketplaceOrderCreated)
	if err := _OrderMarketplace.contract.UnpackLog(event, "OrderCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceOrderSuccessfulIterator is returned from FilterOrderSuccessful and is used to iterate over the raw logs and unpacked data for OrderSuccessful events raised by the OrderMarketplace contract.
type OrderMarketplaceOrderSuccessfulIterator struct {
	Event *OrderMarketplaceOrderSuccessful // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceOrderSuccessfulIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceOrderSuccessful)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceOrderSuccessful)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceOrderSuccessfulIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceOrderSuccessfulIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceOrderSuccessful represents a OrderSuccessful event raised by the OrderMarketplace contract.
type OrderMarketplaceOrderSuccessful struct {
	Id     [32]byte
	Buyer  common.Address
	Seller common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterOrderSuccessful is a free log retrieval operation binding the contract event 0xa3fe2a6ffb1ad0de1c1ee8e3513d205b99980c40af9de82e502095245debabbb.
//
// Solidity: event OrderSuccessful(bytes32 id, address buyer, address seller)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterOrderSuccessful(opts *bind.FilterOpts) (*OrderMarketplaceOrderSuccessfulIterator, error) {

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "OrderSuccessful")
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceOrderSuccessfulIterator{contract: _OrderMarketplace.contract, event: "OrderSuccessful", logs: logs, sub: sub}, nil
}

// WatchOrderSuccessful is a free log subscription operation binding the contract event 0xa3fe2a6ffb1ad0de1c1ee8e3513d205b99980c40af9de82e502095245debabbb.
//
// Solidity: event OrderSuccessful(bytes32 id, address buyer, address seller)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchOrderSuccessful(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceOrderSuccessful) (event.Subscription, error) {

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "OrderSuccessful")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceOrderSuccessful)
				if err := _OrderMarketplace.contract.UnpackLog(event, "OrderSuccessful", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderSuccessful is a log parse operation binding the contract event 0xa3fe2a6ffb1ad0de1c1ee8e3513d205b99980c40af9de82e502095245debabbb.
//
// Solidity: event OrderSuccessful(bytes32 id, address buyer, address seller)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseOrderSuccessful(log types.Log) (*OrderMarketplaceOrderSuccessful, error) {
	event := new(OrderMarketplaceOrderSuccessful)
	if err := _OrderMarketplace.contract.UnpackLog(event, "OrderSuccessful", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the OrderMarketplace contract.
type OrderMarketplaceOwnershipTransferredIterator struct {
	Event *OrderMarketplaceOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceOwnershipTransferred represents a OwnershipTransferred event raised by the OrderMarketplace contract.
type OrderMarketplaceOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*OrderMarketplaceOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceOwnershipTransferredIterator{contract: _OrderMarketplace.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceOwnershipTransferred)
				if err := _OrderMarketplace.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseOwnershipTransferred(log types.Log) (*OrderMarketplaceOwnershipTransferred, error) {
	event := new(OrderMarketplaceOwnershipTransferred)
	if err := _OrderMarketplace.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplacePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the OrderMarketplace contract.
type OrderMarketplacePausedIterator struct {
	Event *OrderMarketplacePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplacePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplacePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplacePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplacePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplacePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplacePaused represents a Paused event raised by the OrderMarketplace contract.
type OrderMarketplacePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterPaused(opts *bind.FilterOpts) (*OrderMarketplacePausedIterator, error) {

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &OrderMarketplacePausedIterator{contract: _OrderMarketplace.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *OrderMarketplacePaused) (event.Subscription, error) {

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplacePaused)
				if err := _OrderMarketplace.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParsePaused(log types.Log) (*OrderMarketplacePaused, error) {
	event := new(OrderMarketplacePaused)
	if err := _OrderMarketplace.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceRemovedBlackListIterator is returned from FilterRemovedBlackList and is used to iterate over the raw logs and unpacked data for RemovedBlackList events raised by the OrderMarketplace contract.
type OrderMarketplaceRemovedBlackListIterator struct {
	Event *OrderMarketplaceRemovedBlackList // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceRemovedBlackListIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceRemovedBlackList)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceRemovedBlackList)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceRemovedBlackListIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceRemovedBlackListIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceRemovedBlackList represents a RemovedBlackList event raised by the OrderMarketplace contract.
type OrderMarketplaceRemovedBlackList struct {
	User common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRemovedBlackList is a free log retrieval operation binding the contract event 0xd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c.
//
// Solidity: event RemovedBlackList(address _user)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterRemovedBlackList(opts *bind.FilterOpts) (*OrderMarketplaceRemovedBlackListIterator, error) {

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "RemovedBlackList")
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceRemovedBlackListIterator{contract: _OrderMarketplace.contract, event: "RemovedBlackList", logs: logs, sub: sub}, nil
}

// WatchRemovedBlackList is a free log subscription operation binding the contract event 0xd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c.
//
// Solidity: event RemovedBlackList(address _user)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchRemovedBlackList(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceRemovedBlackList) (event.Subscription, error) {

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "RemovedBlackList")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceRemovedBlackList)
				if err := _OrderMarketplace.contract.UnpackLog(event, "RemovedBlackList", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemovedBlackList is a log parse operation binding the contract event 0xd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c.
//
// Solidity: event RemovedBlackList(address _user)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseRemovedBlackList(log types.Log) (*OrderMarketplaceRemovedBlackList, error) {
	event := new(OrderMarketplaceRemovedBlackList)
	if err := _OrderMarketplace.contract.UnpackLog(event, "RemovedBlackList", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the OrderMarketplace contract.
type OrderMarketplaceRoleAdminChangedIterator struct {
	Event *OrderMarketplaceRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceRoleAdminChanged represents a RoleAdminChanged event raised by the OrderMarketplace contract.
type OrderMarketplaceRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*OrderMarketplaceRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceRoleAdminChangedIterator{contract: _OrderMarketplace.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceRoleAdminChanged)
				if err := _OrderMarketplace.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseRoleAdminChanged(log types.Log) (*OrderMarketplaceRoleAdminChanged, error) {
	event := new(OrderMarketplaceRoleAdminChanged)
	if err := _OrderMarketplace.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the OrderMarketplace contract.
type OrderMarketplaceRoleGrantedIterator struct {
	Event *OrderMarketplaceRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceRoleGranted represents a RoleGranted event raised by the OrderMarketplace contract.
type OrderMarketplaceRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*OrderMarketplaceRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceRoleGrantedIterator{contract: _OrderMarketplace.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceRoleGranted)
				if err := _OrderMarketplace.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseRoleGranted(log types.Log) (*OrderMarketplaceRoleGranted, error) {
	event := new(OrderMarketplaceRoleGranted)
	if err := _OrderMarketplace.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the OrderMarketplace contract.
type OrderMarketplaceRoleRevokedIterator struct {
	Event *OrderMarketplaceRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceRoleRevoked represents a RoleRevoked event raised by the OrderMarketplace contract.
type OrderMarketplaceRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*OrderMarketplaceRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceRoleRevokedIterator{contract: _OrderMarketplace.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceRoleRevoked)
				if err := _OrderMarketplace.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseRoleRevoked(log types.Log) (*OrderMarketplaceRoleRevoked, error) {
	event := new(OrderMarketplaceRoleRevoked)
	if err := _OrderMarketplace.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the OrderMarketplace contract.
type OrderMarketplaceUnpausedIterator struct {
	Event *OrderMarketplaceUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceUnpaused represents a Unpaused event raised by the OrderMarketplace contract.
type OrderMarketplaceUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterUnpaused(opts *bind.FilterOpts) (*OrderMarketplaceUnpausedIterator, error) {

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceUnpausedIterator{contract: _OrderMarketplace.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceUnpaused) (event.Subscription, error) {

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceUnpaused)
				if err := _OrderMarketplace.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseUnpaused(log types.Log) (*OrderMarketplaceUnpaused, error) {
	event := new(OrderMarketplaceUnpaused)
	if err := _OrderMarketplace.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
