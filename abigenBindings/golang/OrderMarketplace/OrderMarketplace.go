// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package OrderMarketplace

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OrderMarketplaceMetaData contains all meta data concerning the OrderMarketplace contract.
var OrderMarketplaceMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_acceptedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketplaceStorage\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ownerCutPerMillion\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExpiredTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unavailable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"ChangedOwnerCutPerMillion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"publicationFee\",\"type\":\"uint256\"}],\"name\":\"ChangedPublicationFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_marketplaceStorage\",\"type\":\"address\"}],\"name\":\"MarketplaceStorageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"OrderSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CANCEL_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721_Interface\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMarketplaceStorage_Interface\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptedToken\",\"outputs\":[{\"internalType\":\"contractIBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplaceStorage\",\"outputs\":[{\"internalType\":\"contractIMarketplaceStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStageDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerCutPerMillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicationFeeInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficary\",\"type\":\"address\"}],\"name\":\"setBeneficary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setMinStageDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ownerCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"setOwnerCutPerMillion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicationFee\",\"type\":\"uint256\"}],\"name\":\"setPublicationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketplaceStorage\",\"type\":\"address\"}],\"name\":\"updateStorageAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nftAsset\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"executeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162005bfd38038062005bfd8339818101604052810190620000379190620014cb565b838383838180620000698173ffffffffffffffffffffffffffffffffffffffff166200050060201b6200125f1760201c565b620000ab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a290620017f7565b60405180910390fd5b60008190508073ffffffffffffffffffffffffffffffffffffffff166301ffc9a76345ad86c260e01b6040518263ffffffff1660e01b8152600401620000f2919062001750565b60206040518083038186803b1580156200010b57600080fd5b505afa15801562000120573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000146919062001537565b62000188576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200017f90620017b3565b60405180910390fd5b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506000600260146101000a81548160ff02191690831515021790555062000207620001fb6200051360201b60201c565b620005c660201b60201c565b620002276200021b6200051360201b60201c565b6200068c60201b60201c565b620002538473ffffffffffffffffffffffffffffffffffffffff166200050060201b6200125f1760201c565b6200028a576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620003306000801b620003246200051360201b60201c565b6200085360201b60201c565b620003717fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775620003656200051360201b60201c565b6200085360201b60201c565b620003b27f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d7620003a66200051360201b60201c565b6200085360201b60201c565b620003f37f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a620003e76200051360201b60201c565b6200085360201b60201c565b620004457f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d77fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756200086960201b60201c565b620004977f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756200086960201b60201c565b620004a881620008cc60201b60201c565b610e1060088190555082600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050505062001c26565b600080823b905060008111915050919050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415620005bf57600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff818301511692505050620005c3565b3390505b90565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200069c6200051360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620006c26200099160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200071b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007129062001819565b60405180910390fd5b6200074d7f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d7826200085360201b60201c565b6200077f7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a826200085360201b60201c565b620007946000801b826200085360201b60201c565b620007d57f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d7620007c96200099160201b60201c565b620009bb60201b60201c565b620008167f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6200080a6200099160201b60201c565b620009bb60201b60201c565b6200083a6000801b6200082e6200099160201b60201c565b620009bb60201b60201c565b620008508162000a0460201b620012721760201c565b50565b62000865828262000b1a60201b60201c565b5050565b60006200087c8362000b6260201b60201c565b905081600080858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756200090e81620009026200051360201b60201c565b62000b8160201b60201c565b620f424082106200094b576040517f7e0d5ce600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816006819055507ffa406a120a9e7f2b332bfb7a43d3bf1c3f079262202907a6b69c94b2821a02c66006546040516200098591906200183b565b60405180910390a15050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b620009cc8262000b6260201b60201c565b620009ed81620009e16200051360201b60201c565b62000b8160201b60201c565b620009ff838362000c4560201b60201c565b505050565b62000a146200051360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1662000a3a6200099160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000a93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a8a9062001819565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000b06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000afd90620017d5565b60405180910390fd5b62000b1781620005c660201b60201c565b50565b62000b31828262000c8d60201b6200136a1760201c565b62000b5d816001600085815260200190815260200160002062000d7e60201b6200144a1790919060201c565b505050565b6000806000838152602001908152602001600020600101549050919050565b62000b93828262000db660201b60201c565b62000c415762000bc68173ffffffffffffffffffffffffffffffffffffffff16601462000e2060201b6200147a1760201c565b62000be18360001c602062000e2060201b6200147a1760201c565b60405160200162000bf49291906200170e565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000c3891906200176d565b60405180910390fd5b5050565b62000c5c82826200112f60201b620017741760201c565b62000c8881600160008581526020019081526020016000206200122160201b620018551790919060201c565b505050565b62000c9f828262000db660201b60201c565b62000d7a57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555062000d1f6200051360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600062000dae836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6200125960201b60201c565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60606000600283600262000e359190620018dc565b62000e4191906200187f565b67ffffffffffffffff81111562000e81577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801562000eb45781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811062000f13577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811062000f9e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600262000fe09190620018dc565b62000fec91906200187f565b90505b6001811115620010de577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811062001056577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b82828151811062001094577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080620010d69062001a24565b905062000fef565b506000841462001125576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200111c9062001791565b60405180910390fd5b8091505092915050565b62001141828262000db660201b60201c565b156200121d57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620011c26200051360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600062001251836000018373ffffffffffffffffffffffffffffffffffffffff1660001b620012d360201b60201c565b905092915050565b60006200126d83836200146360201b60201c565b620012c8578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050620012cd565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114620014575760006001826200130891906200193d565b90506000600186600001805490506200132291906200193d565b9050818114620013e05760008660000182815481106200136b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110620013b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806200141b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506200145d565b60009150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081519050620014978162001bd8565b92915050565b600081519050620014ae8162001bf2565b92915050565b600081519050620014c58162001c0c565b92915050565b60008060008060808587031215620014e257600080fd5b6000620014f28782880162001486565b9450506020620015058782880162001486565b9350506040620015188782880162001486565b92505060606200152b87828801620014b4565b91505092959194509250565b6000602082840312156200154a57600080fd5b60006200155a848285016200149d565b91505092915050565b6200156e8162001998565b82525050565b6000620015818262001858565b6200158d818562001863565b93506200159f818560208601620019ee565b620015aa8162001a82565b840191505092915050565b6000620015c28262001858565b620015ce818562001874565b9350620015e0818560208601620019ee565b80840191505092915050565b6000620015fb60208362001863565b9150620016088262001a93565b602082019050919050565b600062001622600f8362001863565b91506200162f8262001abc565b602082019050919050565b60006200164960268362001863565b9150620016568262001ae5565b604082019050919050565b60006200167060108362001863565b91506200167d8262001b34565b602082019050919050565b60006200169760208362001863565b9150620016a48262001b5d565b602082019050919050565b6000620016be60178362001874565b9150620016cb8262001b86565b601782019050919050565b6000620016e560118362001874565b9150620016f28262001baf565b601182019050919050565b6200170881620019e4565b82525050565b60006200171b82620016af565b9150620017298285620015b5565b91506200173682620016d6565b9150620017448284620015b5565b91508190509392505050565b600060208201905062001767600083018462001563565b92915050565b6000602082019050818103600083015262001789818462001574565b905092915050565b60006020820190508181036000830152620017ac81620015ec565b9050919050565b60006020820190508181036000830152620017ce8162001613565b9050919050565b60006020820190508181036000830152620017f0816200163a565b9050919050565b60006020820190508181036000830152620018128162001661565b9050919050565b60006020820190508181036000830152620018348162001688565b9050919050565b6000602082019050620018526000830184620016fd565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006200188c82620019e4565b91506200189983620019e4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620018d157620018d062001a53565b5b828201905092915050565b6000620018e982620019e4565b9150620018f683620019e4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562001932576200193162001a53565b5b828202905092915050565b60006200194a82620019e4565b91506200195783620019e4565b9250828210156200196d576200196c62001a53565b5b828203905092915050565b60006200198582620019c4565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101562001a0e578082015181840152602081019050620019f1565b8381111562001a1e576000848401525b50505050565b600062001a3182620019e4565b9150600082141562001a485762001a4762001a53565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f496e76616c69642073746f726167650000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c696420636f6e747261637400000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b62001be38162001978565b811462001bef57600080fd5b50565b62001bfd816200198c565b811462001c0957600080fd5b50565b62001c1781620019e4565b811462001c2357600080fd5b50565b613fc78062001c366000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c8063889e212911610130578063af8996f1116100b8578063e47d60601161007c578063e47d60601461062f578063e4997dc51461065f578063e63ab1e91461067b578063f2fde38b14610699578063f6021884146106b557610232565b8063af8996f11461058b578063b42cf929146105a7578063ca15c873146105c5578063cbfda1c5146105f5578063d547741f1461061357610232565b806391d14854116100ff57806391d14854146104e5578063a01f79d414610515578063a217fddf14610533578063ae4f119814610551578063ae7b03331461056f57610232565b8063889e21291461045d5780638bafe559146104795780638da5cb5b146104975780639010d07c146104b557610232565b80633f4ba83a116101be5780636f652e1a116101825780636f652e1a146103f3578063715018a61461040f5780637489ec231461041957806375b238fc146104355780638456cb591461045357610232565b80633f4ba83a1461035f578063451c3d801461036957806346b3aec61461038757806359bf1abe146103a55780635c975abb146103d557610232565b806319dad16d1161020557806319dad16d146102bd578063248a9ca3146102d95780632b4c32be146103095780632f2ff15d1461032757806336568abe1461034357610232565b806301ffc9a7146102375780630db3cc05146102675780630ecb93c01461028357806313c27ca71461029f575b600080fd5b610251600480360381019061024c9190613382565b6106d1565b60405161025e91906137e0565b60405180910390f35b610281600480360381019061027c91906131b4565b61074b565b005b61029d600480360381019061029891906131b4565b6107c2565b005b6102a76108d0565b6040516102b491906137fb565b60405180910390f35b6102d760048036038101906102d291906133d4565b6108f4565b005b6102f360048036038101906102ee91906132e1565b6109a6565b60405161030091906137fb565b60405180910390f35b6103116109c5565b60405161031e91906138ae565b60405180910390f35b610341600480360381019061033c919061330a565b6109d0565b005b61035d6004803603810190610358919061330a565b6109f9565b005b610367610a7c565b005b610371610ab9565b60405161037e91906138c9565b60405180910390f35b61038f610adf565b60405161039c91906138e4565b60405180910390f35b6103bf60048036038101906103ba91906131b4565b610b05565b6040516103cc91906137e0565b60405180910390f35b6103dd610b5b565b6040516103ea91906137e0565b60405180910390f35b61040d60048036038101906104089190613255565b610b72565b005b610417610bcc565b005b610433600480360381019061042e91906132e1565b610c54565b005b61043d610ca8565b60405161044a91906137fb565b60405180910390f35b61045b610ccc565b005b610477600480360381019061047291906131b4565b610d09565b005b610481610d48565b60405161048e91906138ae565b60405180910390f35b61049f610d53565b6040516104ac91906136db565b60405180910390f35b6104cf60048036038101906104ca9190613346565b610d7d565b6040516104dc91906136db565b60405180910390f35b6104ff60048036038101906104fa919061330a565b610dac565b60405161050c91906137e0565b60405180910390f35b61051d610e16565b60405161052a91906139e1565b60405180910390f35b61053b610e1c565b60405161054891906137fb565b60405180910390f35b610559610e23565b60405161056691906139e1565b60405180910390f35b61058960048036038101906105849190613206565b610e29565b005b6105a560048036038101906105a091906133d4565b610e82565b005b6105af610ef8565b6040516105bc91906139e1565b60405180910390f35b6105df60048036038101906105da91906132e1565b610efe565b6040516105ec91906139e1565b60405180910390f35b6105fd610f22565b60405161060a91906136db565b60405180910390f35b61062d6004803603810190610628919061330a565b610f48565b005b610649600480360381019061064491906131b4565b610f71565b60405161065691906137e0565b60405180910390f35b610679600480360381019061067491906131b4565b610f91565b005b61068361109f565b60405161069091906137fb565b60405180910390f35b6106b360048036038101906106ae91906131b4565b6110c3565b005b6106cf60048036038101906106ca91906133d4565b611222565b005b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610744575061074382611885565b5b9050919050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561077d816107786118ff565b6119b0565b81600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6107ca6118ff565b73ffffffffffffffffffffffffffffffffffffffff166107e8610d53565b73ffffffffffffffffffffffffffffffffffffffff161461083e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610835906139a1565b60405180910390fd5b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc816040516108c591906136db565b60405180910390a150565b7f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d781565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610926816109216118ff565b6119b0565b620f42408210610962576040517f7e0d5ce600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816006819055507ffa406a120a9e7f2b332bfb7a43d3bf1c3f079262202907a6b69c94b2821a02c660065460405161099a91906139e1565b60405180910390a15050565b6000806000838152602001908152602001600020600101549050919050565b6380ac58cd60e01b81565b6109d9826109a6565b6109ea816109e56118ff565b6119b0565b6109f48383611a4d565b505050565b610a016118ff565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a65906139c1565b60405180910390fd5b610a788282611a81565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610aae81610aa96118ff565b6119b0565b610ab6611ab5565b50565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600260149054906101000a900460ff16905090565b610b7a610b5b565b15610bba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb190613981565b60405180910390fd5b610bc684848484611b57565b50505050565b610bd46118ff565b73ffffffffffffffffffffffffffffffffffffffff16610bf2610d53565b73ffffffffffffffffffffffffffffffffffffffff1614610c48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3f906139a1565b60405180910390fd5b610c52600061222b565b565b610c5c610b5b565b15610c9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9390613981565b60405180910390fd5b610ca5816122f1565b50565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610cfe81610cf96118ff565b6119b0565b610d0661255f565b50565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610d3b81610d366118ff565b6119b0565b610d4482612602565b5050565b6345ad86c260e01b81565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610da4826001600086815260200190815260200160002061267d90919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60065481565b6000801b81565b60075481565b610e31610b5b565b15610e71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6890613981565b60405180910390fd5b610e7c838383612697565b50505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610eb481610eaf6118ff565b6119b0565b816007819055507fe7fa8737293f41b5dfa0d5c3e552860a06275bed7015581b083c7be7003308ba600754604051610eec91906139e1565b60405180910390a15050565b60085481565b6000610f1b60016000848152602001908152602001600020612cc6565b9050919050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610f51826109a6565b610f6281610f5d6118ff565b6119b0565b610f6c8383611a81565b505050565b60046020528060005260406000206000915054906101000a900460ff1681565b610f996118ff565b73ffffffffffffffffffffffffffffffffffffffff16610fb7610d53565b73ffffffffffffffffffffffffffffffffffffffff161461100d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611004906139a1565b60405180910390fd5b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c8160405161109491906136db565b60405180910390a150565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6110cb6118ff565b73ffffffffffffffffffffffffffffffffffffffff166110e9610d53565b73ffffffffffffffffffffffffffffffffffffffff161461113f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611136906139a1565b60405180910390fd5b6111697f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d782612cdb565b6111937f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a82612cdb565b6111a06000801b82612cdb565b6111d17f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d76111cc610d53565b610f48565b6112027f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6111fd610d53565b610f48565b6112166000801b611211610d53565b610f48565b61121f81611272565b50565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756112548161124f6118ff565b6119b0565b816008819055505050565b600080823b905060008111915050919050565b61127a6118ff565b73ffffffffffffffffffffffffffffffffffffffff16611298610d53565b73ffffffffffffffffffffffffffffffffffffffff16146112ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e5906139a1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561135e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135590613961565b60405180910390fd5b6113678161222b565b50565b6113748282610dac565b61144657600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506113eb6118ff565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000611472836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612ce9565b905092915050565b60606000600283600261148d9190613acf565b6114979190613a48565b67ffffffffffffffff8111156114d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115085781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611566577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106115f0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026116309190613acf565b61163a9190613a48565b90505b6001811115611726577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106116a2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8282815181106116df577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061171f90613c56565b905061163d565b506000841461176a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176190613921565b60405180910390fd5b8091505092915050565b61177e8282610dac565b1561185157600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506117f66118ff565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600061187d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612d59565b905092915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806118f857506118f782612edf565b5b9050919050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156119a957600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff8183015116925050506119ad565b3390505b90565b6119ba8282610dac565b611a49576119df8173ffffffffffffffffffffffffffffffffffffffff16601461147a565b6119ed8360001c602061147a565b6040516020016119fe929190613642565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4091906138ff565b60405180910390fd5b5050565b611a57828261136a565b611a7c816001600085815260200190815260200160002061144a90919063ffffffff16565b505050565b611a8b8282611774565b611ab0816001600085815260200190815260200160002061185590919063ffffffff16565b505050565b611abd610b5b565b611afc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af390613941565b60405180910390fd5b6000600260146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611b406118ff565b604051611b4d91906136db565b60405180910390a1565b83611b778173ffffffffffffffffffffffffffffffffffffffff1661125f565b611bad576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166301ffc9a76380ac58cd60e01b6040518263ffffffff1660e01b8152600401611bed91906138ae565b60206040518083038186803b158015611c0557600080fd5b505afa158015611c19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3d91906132b8565b611c4657600080fd5b6000611c506118ff565b9050600086905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e886040518263ffffffff1660e01b8152600401611c9291906139e1565b60206040518083038186803b158015611caa57600080fd5b505afa158015611cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce291906131dd565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580611e6557503073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663081812fc896040518263ffffffff1660e01b8152600401611d6a91906139e1565b60206040518083038186803b158015611d8257600080fd5b505afa158015611d96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dba91906131dd565b73ffffffffffffffffffffffffffffffffffffffff161480611e6357508173ffffffffffffffffffffffffffffffffffffffff1663e985e9c582306040518363ffffffff1660e01b8152600401611e129291906136f6565b60206040518083038186803b158015611e2a57600080fd5b505afa158015611e3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6291906132b8565b5b155b15611e9c576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000861415611ed6576040517ebfc92100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611eeb60085442612f4990919063ffffffff16565b851015611f24576040517fea52bd4700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008888604051602001611f39929190613616565b604051602081830303815290604052805190602001209050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630a7f8977826040518263ffffffff1660e01b8152600401611fac91906137fb565b60206040518083038186803b158015611fc457600080fd5b505afa158015611fd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffc91906132b8565b612032576040517fa3b8915f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600042838a8c8b60405160200161204d95949392919061367c565b604051602081830303815290604052805190602001209050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663930ca094848c8c858d8d6040518763ffffffff1660e01b81526004016120ca96959493929190613756565b600060405180830381600087803b1580156120e457600080fd5b505af11580156120f8573d6000803e3d6000fd5b50505050600060075411156121de57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd86600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007546040518463ffffffff1660e01b815260040161218a9392919061371f565b602060405180830381600087803b1580156121a457600080fd5b505af11580156121b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121dc91906132b8565b505b7f84c66c3f7ba4b390e20e8e8233e2a516f3ce34a72749e4f12bd010dfba238039818a858d8c8c6040516122179695949392919061384d565b60405180910390a150505050505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006122fb6118ff565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635778472a846040518263ffffffff1660e01b815260040161235a91906137fb565b60a06040518083038186803b15801561237257600080fd5b505afa158015612386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123aa91906133ab565b90506000816000015190506000801b8114156123f2576040517fafdd489000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff16148061245d575061245c7f9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d76124576118ff565b610dac565b5b612493576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166387a61cbd856040518263ffffffff1660e01b81526004016124ee91906137fb565b600060405180830381600087803b15801561250857600080fd5b505af115801561251c573d6000803e3d6000fd5b505050507f35974c4230d53fb4c6e8553fd900c88ba92747dbc689a79bcd6ba755cb93698583826040516125519291906137b7565b60405180910390a150505050565b612567610b5b565b156125a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259e90613981565b60405180910390fd5b6001600260146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586125eb6118ff565b6040516125f891906136db565b60405180910390a1565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f19e07a962d0e1cab8b7d4be06b77a7225ca7ebb744994cb6546fdd815590dc9d8160405161267291906136db565b60405180910390a150565b600061268c8360000183612f5f565b60001c905092915050565b61269f613026565b600084846040516020016126b4929190613616565b6040516020818303038152906040528051906020012090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635778472a836040518263ffffffff1660e01b815260040161272991906137fb565b60a06040518083038186803b15801561274157600080fd5b505afa158015612755573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277991906133ab565b90506000801b816000015114156127bc576040517fafdd489000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160200151905060006127cf6118ff565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612837576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85836060015114612873576040517ebfc92100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82608001514211156128b1576040517fc56873ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008890508073ffffffffffffffffffffffffffffffffffffffff16636352211e896040518263ffffffff1660e01b81526004016128ef91906139e1565b60206040518083038186803b15801561290757600080fd5b505afa15801561291b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293f91906131dd565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146129a3576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000846000015190506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166387a61cbd886040518263ffffffff1660e01b8152600401612a0991906137fb565b600060405180830381600087803b158015612a2357600080fd5b505af1158015612a37573d6000803e3d6000fd5b5050505060006006541115612b4757612a70620f4240612a626006548c612fb090919063ffffffff16565b612fc690919063ffffffff16565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd85600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b8152600401612af39392919061371f565b602060405180830381600087803b158015612b0d57600080fd5b505af1158015612b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4591906132b8565b505b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8587612b9a858e612fdc90919063ffffffff16565b6040518463ffffffff1660e01b8152600401612bb89392919061371f565b602060405180830381600087803b158015612bd257600080fd5b505af1158015612be6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0a91906132b8565b50508173ffffffffffffffffffffffffffffffffffffffff166342842e0e85858c6040518463ffffffff1660e01b8152600401612c499392919061371f565b600060405180830381600087803b158015612c6357600080fd5b505af1158015612c77573d6000803e3d6000fd5b505050507fa3fe2a6ffb1ad0de1c1ee8e3513d205b99980c40af9de82e502095245debabbb818486604051612cae93929190613816565b60405180910390a18496505050505050509392505050565b6000612cd482600001612ff2565b9050919050565b612ce58282611a4d565b5050565b6000612cf58383613003565b612d4e578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612d53565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114612ed3576000600182612d8b9190613b29565b9050600060018660000180549050612da39190613b29565b9050818114612e5e576000866000018281548110612dea577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110612e34577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612e98577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612ed9565b60009150505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008183612f579190613a48565b905092915050565b6000826000018281548110612f9d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b60008183612fbe9190613acf565b905092915050565b60008183612fd49190613a9e565b905092915050565b60008183612fea9190613b29565b905092915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b60008135905061309381613f1e565b92915050565b6000815190506130a881613f1e565b92915050565b6000815190506130bd81613f35565b92915050565b6000813590506130d281613f4c565b92915050565b6000815190506130e781613f4c565b92915050565b6000813590506130fc81613f63565b92915050565b600060a0828403121561311457600080fd5b61311e60a06139fc565b9050600061312e848285016130d8565b600083015250602061314284828501613099565b602083015250604061315684828501613099565b604083015250606061316a8482850161319f565b606083015250608061317e8482850161319f565b60808301525092915050565b60008135905061319981613f7a565b92915050565b6000815190506131ae81613f7a565b92915050565b6000602082840312156131c657600080fd5b60006131d484828501613084565b91505092915050565b6000602082840312156131ef57600080fd5b60006131fd84828501613099565b91505092915050565b60008060006060848603121561321b57600080fd5b600061322986828701613084565b935050602061323a8682870161318a565b925050604061324b8682870161318a565b9150509250925092565b6000806000806080858703121561326b57600080fd5b600061327987828801613084565b945050602061328a8782880161318a565b935050604061329b8782880161318a565b92505060606132ac8782880161318a565b91505092959194509250565b6000602082840312156132ca57600080fd5b60006132d8848285016130ae565b91505092915050565b6000602082840312156132f357600080fd5b6000613301848285016130c3565b91505092915050565b6000806040838503121561331d57600080fd5b600061332b858286016130c3565b925050602061333c85828601613084565b9150509250929050565b6000806040838503121561335957600080fd5b6000613367858286016130c3565b92505060206133788582860161318a565b9150509250929050565b60006020828403121561339457600080fd5b60006133a2848285016130ed565b91505092915050565b600060a082840312156133bd57600080fd5b60006133cb84828501613102565b91505092915050565b6000602082840312156133e657600080fd5b60006133f48482850161318a565b91505092915050565b61340681613b5d565b82525050565b61341d61341882613b5d565b613cb1565b82525050565b61342c81613b6f565b82525050565b61343b81613b7b565b82525050565b61344a81613b85565b82525050565b61345981613bdb565b82525050565b61346881613bff565b82525050565b600061347982613a21565b6134838185613a2c565b9350613493818560208601613c23565b61349c81613d6c565b840191505092915050565b60006134b282613a21565b6134bc8185613a3d565b93506134cc818560208601613c23565b80840191505092915050565b60006134e5602083613a2c565b91506134f082613d8a565b602082019050919050565b6000613508601483613a2c565b915061351382613db3565b602082019050919050565b600061352b602683613a2c565b915061353682613ddc565b604082019050919050565b600061354e601083613a2c565b915061355982613e2b565b602082019050919050565b6000613571602083613a2c565b915061357c82613e54565b602082019050919050565b6000613594601783613a3d565b915061359f82613e7d565b601782019050919050565b60006135b7601183613a3d565b91506135c282613ea6565b601182019050919050565b60006135da602f83613a2c565b91506135e582613ecf565b604082019050919050565b6135f981613bd1565b82525050565b61361061360b82613bd1565b613cd5565b82525050565b6000613622828561340c565b60148201915061363282846135ff565b6020820191508190509392505050565b600061364d82613587565b915061365982856134a7565b9150613664826135aa565b915061367082846134a7565b91508190509392505050565b600061368882886135ff565b602082019150613698828761340c565b6014820191506136a882866135ff565b6020820191506136b8828561340c565b6014820191506136c882846135ff565b6020820191508190509695505050505050565b60006020820190506136f060008301846133fd565b92915050565b600060408201905061370b60008301856133fd565b61371860208301846133fd565b9392505050565b600060608201905061373460008301866133fd565b61374160208301856133fd565b61374e60408301846135f0565b949350505050565b600060c08201905061376b60008301896133fd565b61377860208301886133fd565b61378560408301876135f0565b6137926060830186613432565b61379f60808301856135f0565b6137ac60a08301846135f0565b979650505050505050565b60006040820190506137cc60008301856133fd565b6137d96020830184613432565b9392505050565b60006020820190506137f56000830184613423565b92915050565b60006020820190506138106000830184613432565b92915050565b600060608201905061382b6000830186613432565b61383860208301856133fd565b61384560408301846133fd565b949350505050565b600060c0820190506138626000830189613432565b61386f60208301886135f0565b61387c60408301876133fd565b61388960608301866133fd565b61389660808301856135f0565b6138a360a08301846135f0565b979650505050505050565b60006020820190506138c36000830184613441565b92915050565b60006020820190506138de6000830184613450565b92915050565b60006020820190506138f9600083018461345f565b92915050565b60006020820190508181036000830152613919818461346e565b905092915050565b6000602082019050818103600083015261393a816134d8565b9050919050565b6000602082019050818103600083015261395a816134fb565b9050919050565b6000602082019050818103600083015261397a8161351e565b9050919050565b6000602082019050818103600083015261399a81613541565b9050919050565b600060208201905081810360008301526139ba81613564565b9050919050565b600060208201905081810360008301526139da816135cd565b9050919050565b60006020820190506139f660008301846135f0565b92915050565b6000613a06613a17565b9050613a128282613c80565b919050565b6000604051905090565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000613a5382613bd1565b9150613a5e83613bd1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613a9357613a92613cdf565b5b828201905092915050565b6000613aa982613bd1565b9150613ab483613bd1565b925082613ac457613ac3613d0e565b5b828204905092915050565b6000613ada82613bd1565b9150613ae583613bd1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613b1e57613b1d613cdf565b5b828202905092915050565b6000613b3482613bd1565b9150613b3f83613bd1565b925082821015613b5257613b51613cdf565b5b828203905092915050565b6000613b6882613bb1565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613be682613bed565b9050919050565b6000613bf882613bb1565b9050919050565b6000613c0a82613c11565b9050919050565b6000613c1c82613bb1565b9050919050565b60005b83811015613c41578082015181840152602081019050613c26565b83811115613c50576000848401525b50505050565b6000613c6182613bd1565b91506000821415613c7557613c74613cdf565b5b600182039050919050565b613c8982613d6c565b810181811067ffffffffffffffff82111715613ca857613ca7613d3d565b5b80604052505050565b6000613cbc82613cc3565b9050919050565b6000613cce82613d7d565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b613f2781613b5d565b8114613f3257600080fd5b50565b613f3e81613b6f565b8114613f4957600080fd5b50565b613f5581613b7b565b8114613f6057600080fd5b50565b613f6c81613b85565b8114613f7757600080fd5b50565b613f8381613bd1565b8114613f8e57600080fd5b5056fea264697066735822122029fb9d123a74309fad21e3d47a48453a3ef6d9c0044afc226988673670d2981c64736f6c63430008040033",
}

// OrderMarketplaceABI is the input ABI used to generate the binding from.
// Deprecated: Use OrderMarketplaceMetaData.ABI instead.
var OrderMarketplaceABI = OrderMarketplaceMetaData.ABI

// OrderMarketplaceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OrderMarketplaceMetaData.Bin instead.
var OrderMarketplaceBin = OrderMarketplaceMetaData.Bin

// DeployOrderMarketplace deploys a new Ethereum contract, binding an instance of OrderMarketplace to it.
func DeployOrderMarketplace(auth *bind.TransactOpts, backend bind.ContractBackend, _acceptedToken common.Address, _beneficary common.Address, _marketplaceStorage common.Address, _ownerCutPerMillion *big.Int) (common.Address, *types.Transaction, *OrderMarketplace, error) {
	parsed, err := OrderMarketplaceMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OrderMarketplaceBin), backend, _acceptedToken, _beneficary, _marketplaceStorage, _ownerCutPerMillion)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OrderMarketplace{OrderMarketplaceCaller: OrderMarketplaceCaller{contract: contract}, OrderMarketplaceTransactor: OrderMarketplaceTransactor{contract: contract}, OrderMarketplaceFilterer: OrderMarketplaceFilterer{contract: contract}}, nil
}

// OrderMarketplace is an auto generated Go binding around an Ethereum contract.
type OrderMarketplace struct {
	OrderMarketplaceCaller     // Read-only binding to the contract
	OrderMarketplaceTransactor // Write-only binding to the contract
	OrderMarketplaceFilterer   // Log filterer for contract events
}

// OrderMarketplaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type OrderMarketplaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OrderMarketplaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OrderMarketplaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OrderMarketplaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OrderMarketplaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OrderMarketplaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OrderMarketplaceSession struct {
	Contract     *OrderMarketplace // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OrderMarketplaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OrderMarketplaceCallerSession struct {
	Contract *OrderMarketplaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// OrderMarketplaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OrderMarketplaceTransactorSession struct {
	Contract     *OrderMarketplaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// OrderMarketplaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type OrderMarketplaceRaw struct {
	Contract *OrderMarketplace // Generic contract binding to access the raw methods on
}

// OrderMarketplaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OrderMarketplaceCallerRaw struct {
	Contract *OrderMarketplaceCaller // Generic read-only contract binding to access the raw methods on
}

// OrderMarketplaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OrderMarketplaceTransactorRaw struct {
	Contract *OrderMarketplaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOrderMarketplace creates a new instance of OrderMarketplace, bound to a specific deployed contract.
func NewOrderMarketplace(address common.Address, backend bind.ContractBackend) (*OrderMarketplace, error) {
	contract, err := bindOrderMarketplace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OrderMarketplace{OrderMarketplaceCaller: OrderMarketplaceCaller{contract: contract}, OrderMarketplaceTransactor: OrderMarketplaceTransactor{contract: contract}, OrderMarketplaceFilterer: OrderMarketplaceFilterer{contract: contract}}, nil
}

// NewOrderMarketplaceCaller creates a new read-only instance of OrderMarketplace, bound to a specific deployed contract.
func NewOrderMarketplaceCaller(address common.Address, caller bind.ContractCaller) (*OrderMarketplaceCaller, error) {
	contract, err := bindOrderMarketplace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceCaller{contract: contract}, nil
}

// NewOrderMarketplaceTransactor creates a new write-only instance of OrderMarketplace, bound to a specific deployed contract.
func NewOrderMarketplaceTransactor(address common.Address, transactor bind.ContractTransactor) (*OrderMarketplaceTransactor, error) {
	contract, err := bindOrderMarketplace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceTransactor{contract: contract}, nil
}

// NewOrderMarketplaceFilterer creates a new log filterer instance of OrderMarketplace, bound to a specific deployed contract.
func NewOrderMarketplaceFilterer(address common.Address, filterer bind.ContractFilterer) (*OrderMarketplaceFilterer, error) {
	contract, err := bindOrderMarketplace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceFilterer{contract: contract}, nil
}

// bindOrderMarketplace binds a generic wrapper to an already deployed contract.
func bindOrderMarketplace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OrderMarketplaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OrderMarketplace *OrderMarketplaceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OrderMarketplace.Contract.OrderMarketplaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OrderMarketplace *OrderMarketplaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.OrderMarketplaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OrderMarketplace *OrderMarketplaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.OrderMarketplaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OrderMarketplace *OrderMarketplaceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OrderMarketplace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OrderMarketplace *OrderMarketplaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OrderMarketplace *OrderMarketplaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.contract.Transact(opts, method, params...)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceCaller) ADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceSession) ADMINROLE() ([32]byte, error) {
	return _OrderMarketplace.Contract.ADMINROLE(&_OrderMarketplace.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceCallerSession) ADMINROLE() ([32]byte, error) {
	return _OrderMarketplace.Contract.ADMINROLE(&_OrderMarketplace.CallOpts)
}

// CANCELROLE is a free data retrieval call binding the contract method 0x13c27ca7.
//
// Solidity: function CANCEL_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceCaller) CANCELROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "CANCEL_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CANCELROLE is a free data retrieval call binding the contract method 0x13c27ca7.
//
// Solidity: function CANCEL_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceSession) CANCELROLE() ([32]byte, error) {
	return _OrderMarketplace.Contract.CANCELROLE(&_OrderMarketplace.CallOpts)
}

// CANCELROLE is a free data retrieval call binding the contract method 0x13c27ca7.
//
// Solidity: function CANCEL_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceCallerSession) CANCELROLE() ([32]byte, error) {
	return _OrderMarketplace.Contract.CANCELROLE(&_OrderMarketplace.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _OrderMarketplace.Contract.DEFAULTADMINROLE(&_OrderMarketplace.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _OrderMarketplace.Contract.DEFAULTADMINROLE(&_OrderMarketplace.CallOpts)
}

// ERC721Interface is a free data retrieval call binding the contract method 0x2b4c32be.
//
// Solidity: function ERC721_Interface() view returns(bytes4)
func (_OrderMarketplace *OrderMarketplaceCaller) ERC721Interface(opts *bind.CallOpts) ([4]byte, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "ERC721_Interface")

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// ERC721Interface is a free data retrieval call binding the contract method 0x2b4c32be.
//
// Solidity: function ERC721_Interface() view returns(bytes4)
func (_OrderMarketplace *OrderMarketplaceSession) ERC721Interface() ([4]byte, error) {
	return _OrderMarketplace.Contract.ERC721Interface(&_OrderMarketplace.CallOpts)
}

// ERC721Interface is a free data retrieval call binding the contract method 0x2b4c32be.
//
// Solidity: function ERC721_Interface() view returns(bytes4)
func (_OrderMarketplace *OrderMarketplaceCallerSession) ERC721Interface() ([4]byte, error) {
	return _OrderMarketplace.Contract.ERC721Interface(&_OrderMarketplace.CallOpts)
}

// IMarketplaceStorageInterface is a free data retrieval call binding the contract method 0x8bafe559.
//
// Solidity: function IMarketplaceStorage_Interface() view returns(bytes4)
func (_OrderMarketplace *OrderMarketplaceCaller) IMarketplaceStorageInterface(opts *bind.CallOpts) ([4]byte, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "IMarketplaceStorage_Interface")

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// IMarketplaceStorageInterface is a free data retrieval call binding the contract method 0x8bafe559.
//
// Solidity: function IMarketplaceStorage_Interface() view returns(bytes4)
func (_OrderMarketplace *OrderMarketplaceSession) IMarketplaceStorageInterface() ([4]byte, error) {
	return _OrderMarketplace.Contract.IMarketplaceStorageInterface(&_OrderMarketplace.CallOpts)
}

// IMarketplaceStorageInterface is a free data retrieval call binding the contract method 0x8bafe559.
//
// Solidity: function IMarketplaceStorage_Interface() view returns(bytes4)
func (_OrderMarketplace *OrderMarketplaceCallerSession) IMarketplaceStorageInterface() ([4]byte, error) {
	return _OrderMarketplace.Contract.IMarketplaceStorageInterface(&_OrderMarketplace.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceSession) PAUSERROLE() ([32]byte, error) {
	return _OrderMarketplace.Contract.PAUSERROLE(&_OrderMarketplace.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceCallerSession) PAUSERROLE() ([32]byte, error) {
	return _OrderMarketplace.Contract.PAUSERROLE(&_OrderMarketplace.CallOpts)
}

// AcceptedToken is a free data retrieval call binding the contract method 0x451c3d80.
//
// Solidity: function acceptedToken() view returns(address)
func (_OrderMarketplace *OrderMarketplaceCaller) AcceptedToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "acceptedToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AcceptedToken is a free data retrieval call binding the contract method 0x451c3d80.
//
// Solidity: function acceptedToken() view returns(address)
func (_OrderMarketplace *OrderMarketplaceSession) AcceptedToken() (common.Address, error) {
	return _OrderMarketplace.Contract.AcceptedToken(&_OrderMarketplace.CallOpts)
}

// AcceptedToken is a free data retrieval call binding the contract method 0x451c3d80.
//
// Solidity: function acceptedToken() view returns(address)
func (_OrderMarketplace *OrderMarketplaceCallerSession) AcceptedToken() (common.Address, error) {
	return _OrderMarketplace.Contract.AcceptedToken(&_OrderMarketplace.CallOpts)
}

// Beneficary is a free data retrieval call binding the contract method 0xcbfda1c5.
//
// Solidity: function beneficary() view returns(address)
func (_OrderMarketplace *OrderMarketplaceCaller) Beneficary(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "beneficary")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Beneficary is a free data retrieval call binding the contract method 0xcbfda1c5.
//
// Solidity: function beneficary() view returns(address)
func (_OrderMarketplace *OrderMarketplaceSession) Beneficary() (common.Address, error) {
	return _OrderMarketplace.Contract.Beneficary(&_OrderMarketplace.CallOpts)
}

// Beneficary is a free data retrieval call binding the contract method 0xcbfda1c5.
//
// Solidity: function beneficary() view returns(address)
func (_OrderMarketplace *OrderMarketplaceCallerSession) Beneficary() (common.Address, error) {
	return _OrderMarketplace.Contract.Beneficary(&_OrderMarketplace.CallOpts)
}

// GetBlackListStatus is a free data retrieval call binding the contract method 0x59bf1abe.
//
// Solidity: function getBlackListStatus(address _maker) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceCaller) GetBlackListStatus(opts *bind.CallOpts, _maker common.Address) (bool, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "getBlackListStatus", _maker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetBlackListStatus is a free data retrieval call binding the contract method 0x59bf1abe.
//
// Solidity: function getBlackListStatus(address _maker) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceSession) GetBlackListStatus(_maker common.Address) (bool, error) {
	return _OrderMarketplace.Contract.GetBlackListStatus(&_OrderMarketplace.CallOpts, _maker)
}

// GetBlackListStatus is a free data retrieval call binding the contract method 0x59bf1abe.
//
// Solidity: function getBlackListStatus(address _maker) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceCallerSession) GetBlackListStatus(_maker common.Address) (bool, error) {
	return _OrderMarketplace.Contract.GetBlackListStatus(&_OrderMarketplace.CallOpts, _maker)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _OrderMarketplace.Contract.GetRoleAdmin(&_OrderMarketplace.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_OrderMarketplace *OrderMarketplaceCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _OrderMarketplace.Contract.GetRoleAdmin(&_OrderMarketplace.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_OrderMarketplace *OrderMarketplaceCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_OrderMarketplace *OrderMarketplaceSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _OrderMarketplace.Contract.GetRoleMember(&_OrderMarketplace.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_OrderMarketplace *OrderMarketplaceCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _OrderMarketplace.Contract.GetRoleMember(&_OrderMarketplace.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _OrderMarketplace.Contract.GetRoleMemberCount(&_OrderMarketplace.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _OrderMarketplace.Contract.GetRoleMemberCount(&_OrderMarketplace.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _OrderMarketplace.Contract.HasRole(&_OrderMarketplace.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _OrderMarketplace.Contract.HasRole(&_OrderMarketplace.CallOpts, role, account)
}

// IsBlackListed is a free data retrieval call binding the contract method 0xe47d6060.
//
// Solidity: function isBlackListed(address ) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceCaller) IsBlackListed(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "isBlackListed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBlackListed is a free data retrieval call binding the contract method 0xe47d6060.
//
// Solidity: function isBlackListed(address ) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceSession) IsBlackListed(arg0 common.Address) (bool, error) {
	return _OrderMarketplace.Contract.IsBlackListed(&_OrderMarketplace.CallOpts, arg0)
}

// IsBlackListed is a free data retrieval call binding the contract method 0xe47d6060.
//
// Solidity: function isBlackListed(address ) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceCallerSession) IsBlackListed(arg0 common.Address) (bool, error) {
	return _OrderMarketplace.Contract.IsBlackListed(&_OrderMarketplace.CallOpts, arg0)
}

// MarketplaceStorage is a free data retrieval call binding the contract method 0x46b3aec6.
//
// Solidity: function marketplaceStorage() view returns(address)
func (_OrderMarketplace *OrderMarketplaceCaller) MarketplaceStorage(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "marketplaceStorage")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MarketplaceStorage is a free data retrieval call binding the contract method 0x46b3aec6.
//
// Solidity: function marketplaceStorage() view returns(address)
func (_OrderMarketplace *OrderMarketplaceSession) MarketplaceStorage() (common.Address, error) {
	return _OrderMarketplace.Contract.MarketplaceStorage(&_OrderMarketplace.CallOpts)
}

// MarketplaceStorage is a free data retrieval call binding the contract method 0x46b3aec6.
//
// Solidity: function marketplaceStorage() view returns(address)
func (_OrderMarketplace *OrderMarketplaceCallerSession) MarketplaceStorage() (common.Address, error) {
	return _OrderMarketplace.Contract.MarketplaceStorage(&_OrderMarketplace.CallOpts)
}

// MinStageDuration is a free data retrieval call binding the contract method 0xb42cf929.
//
// Solidity: function minStageDuration() view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceCaller) MinStageDuration(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "minStageDuration")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinStageDuration is a free data retrieval call binding the contract method 0xb42cf929.
//
// Solidity: function minStageDuration() view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceSession) MinStageDuration() (*big.Int, error) {
	return _OrderMarketplace.Contract.MinStageDuration(&_OrderMarketplace.CallOpts)
}

// MinStageDuration is a free data retrieval call binding the contract method 0xb42cf929.
//
// Solidity: function minStageDuration() view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceCallerSession) MinStageDuration() (*big.Int, error) {
	return _OrderMarketplace.Contract.MinStageDuration(&_OrderMarketplace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OrderMarketplace *OrderMarketplaceCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OrderMarketplace *OrderMarketplaceSession) Owner() (common.Address, error) {
	return _OrderMarketplace.Contract.Owner(&_OrderMarketplace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OrderMarketplace *OrderMarketplaceCallerSession) Owner() (common.Address, error) {
	return _OrderMarketplace.Contract.Owner(&_OrderMarketplace.CallOpts)
}

// OwnerCutPerMillion is a free data retrieval call binding the contract method 0xa01f79d4.
//
// Solidity: function ownerCutPerMillion() view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceCaller) OwnerCutPerMillion(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "ownerCutPerMillion")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// OwnerCutPerMillion is a free data retrieval call binding the contract method 0xa01f79d4.
//
// Solidity: function ownerCutPerMillion() view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceSession) OwnerCutPerMillion() (*big.Int, error) {
	return _OrderMarketplace.Contract.OwnerCutPerMillion(&_OrderMarketplace.CallOpts)
}

// OwnerCutPerMillion is a free data retrieval call binding the contract method 0xa01f79d4.
//
// Solidity: function ownerCutPerMillion() view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceCallerSession) OwnerCutPerMillion() (*big.Int, error) {
	return _OrderMarketplace.Contract.OwnerCutPerMillion(&_OrderMarketplace.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_OrderMarketplace *OrderMarketplaceCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_OrderMarketplace *OrderMarketplaceSession) Paused() (bool, error) {
	return _OrderMarketplace.Contract.Paused(&_OrderMarketplace.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_OrderMarketplace *OrderMarketplaceCallerSession) Paused() (bool, error) {
	return _OrderMarketplace.Contract.Paused(&_OrderMarketplace.CallOpts)
}

// PublicationFeeInWei is a free data retrieval call binding the contract method 0xae4f1198.
//
// Solidity: function publicationFeeInWei() view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceCaller) PublicationFeeInWei(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "publicationFeeInWei")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PublicationFeeInWei is a free data retrieval call binding the contract method 0xae4f1198.
//
// Solidity: function publicationFeeInWei() view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceSession) PublicationFeeInWei() (*big.Int, error) {
	return _OrderMarketplace.Contract.PublicationFeeInWei(&_OrderMarketplace.CallOpts)
}

// PublicationFeeInWei is a free data retrieval call binding the contract method 0xae4f1198.
//
// Solidity: function publicationFeeInWei() view returns(uint256)
func (_OrderMarketplace *OrderMarketplaceCallerSession) PublicationFeeInWei() (*big.Int, error) {
	return _OrderMarketplace.Contract.PublicationFeeInWei(&_OrderMarketplace.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _OrderMarketplace.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _OrderMarketplace.Contract.SupportsInterface(&_OrderMarketplace.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_OrderMarketplace *OrderMarketplaceCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _OrderMarketplace.Contract.SupportsInterface(&_OrderMarketplace.CallOpts, interfaceId)
}

// AddBlackList is a paid mutator transaction binding the contract method 0x0ecb93c0.
//
// Solidity: function addBlackList(address _evilUser) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) AddBlackList(opts *bind.TransactOpts, _evilUser common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "addBlackList", _evilUser)
}

// AddBlackList is a paid mutator transaction binding the contract method 0x0ecb93c0.
//
// Solidity: function addBlackList(address _evilUser) returns()
func (_OrderMarketplace *OrderMarketplaceSession) AddBlackList(_evilUser common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.AddBlackList(&_OrderMarketplace.TransactOpts, _evilUser)
}

// AddBlackList is a paid mutator transaction binding the contract method 0x0ecb93c0.
//
// Solidity: function addBlackList(address _evilUser) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) AddBlackList(_evilUser common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.AddBlackList(&_OrderMarketplace.TransactOpts, _evilUser)
}

// CancelOrder is a paid mutator transaction binding the contract method 0x7489ec23.
//
// Solidity: function cancelOrder(bytes32 nftAsset) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) CancelOrder(opts *bind.TransactOpts, nftAsset [32]byte) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "cancelOrder", nftAsset)
}

// CancelOrder is a paid mutator transaction binding the contract method 0x7489ec23.
//
// Solidity: function cancelOrder(bytes32 nftAsset) returns()
func (_OrderMarketplace *OrderMarketplaceSession) CancelOrder(nftAsset [32]byte) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.CancelOrder(&_OrderMarketplace.TransactOpts, nftAsset)
}

// CancelOrder is a paid mutator transaction binding the contract method 0x7489ec23.
//
// Solidity: function cancelOrder(bytes32 nftAsset) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) CancelOrder(nftAsset [32]byte) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.CancelOrder(&_OrderMarketplace.TransactOpts, nftAsset)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x6f652e1a.
//
// Solidity: function createOrder(address nftAddress, uint256 assetId, uint256 priceInWei, uint256 expiredAt) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) CreateOrder(opts *bind.TransactOpts, nftAddress common.Address, assetId *big.Int, priceInWei *big.Int, expiredAt *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "createOrder", nftAddress, assetId, priceInWei, expiredAt)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x6f652e1a.
//
// Solidity: function createOrder(address nftAddress, uint256 assetId, uint256 priceInWei, uint256 expiredAt) returns()
func (_OrderMarketplace *OrderMarketplaceSession) CreateOrder(nftAddress common.Address, assetId *big.Int, priceInWei *big.Int, expiredAt *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.CreateOrder(&_OrderMarketplace.TransactOpts, nftAddress, assetId, priceInWei, expiredAt)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x6f652e1a.
//
// Solidity: function createOrder(address nftAddress, uint256 assetId, uint256 priceInWei, uint256 expiredAt) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) CreateOrder(nftAddress common.Address, assetId *big.Int, priceInWei *big.Int, expiredAt *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.CreateOrder(&_OrderMarketplace.TransactOpts, nftAddress, assetId, priceInWei, expiredAt)
}

// ExecuteOrder is a paid mutator transaction binding the contract method 0xae7b0333.
//
// Solidity: function executeOrder(address nftAddress, uint256 assetId, uint256 price) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) ExecuteOrder(opts *bind.TransactOpts, nftAddress common.Address, assetId *big.Int, price *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "executeOrder", nftAddress, assetId, price)
}

// ExecuteOrder is a paid mutator transaction binding the contract method 0xae7b0333.
//
// Solidity: function executeOrder(address nftAddress, uint256 assetId, uint256 price) returns()
func (_OrderMarketplace *OrderMarketplaceSession) ExecuteOrder(nftAddress common.Address, assetId *big.Int, price *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.ExecuteOrder(&_OrderMarketplace.TransactOpts, nftAddress, assetId, price)
}

// ExecuteOrder is a paid mutator transaction binding the contract method 0xae7b0333.
//
// Solidity: function executeOrder(address nftAddress, uint256 assetId, uint256 price) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) ExecuteOrder(nftAddress common.Address, assetId *big.Int, price *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.ExecuteOrder(&_OrderMarketplace.TransactOpts, nftAddress, assetId, price)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_OrderMarketplace *OrderMarketplaceSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.GrantRole(&_OrderMarketplace.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.GrantRole(&_OrderMarketplace.TransactOpts, role, account)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_OrderMarketplace *OrderMarketplaceSession) Pause() (*types.Transaction, error) {
	return _OrderMarketplace.Contract.Pause(&_OrderMarketplace.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) Pause() (*types.Transaction, error) {
	return _OrderMarketplace.Contract.Pause(&_OrderMarketplace.TransactOpts)
}

// RemoveBlackList is a paid mutator transaction binding the contract method 0xe4997dc5.
//
// Solidity: function removeBlackList(address _clearedUser) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) RemoveBlackList(opts *bind.TransactOpts, _clearedUser common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "removeBlackList", _clearedUser)
}

// RemoveBlackList is a paid mutator transaction binding the contract method 0xe4997dc5.
//
// Solidity: function removeBlackList(address _clearedUser) returns()
func (_OrderMarketplace *OrderMarketplaceSession) RemoveBlackList(_clearedUser common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.RemoveBlackList(&_OrderMarketplace.TransactOpts, _clearedUser)
}

// RemoveBlackList is a paid mutator transaction binding the contract method 0xe4997dc5.
//
// Solidity: function removeBlackList(address _clearedUser) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) RemoveBlackList(_clearedUser common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.RemoveBlackList(&_OrderMarketplace.TransactOpts, _clearedUser)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OrderMarketplace *OrderMarketplaceSession) RenounceOwnership() (*types.Transaction, error) {
	return _OrderMarketplace.Contract.RenounceOwnership(&_OrderMarketplace.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _OrderMarketplace.Contract.RenounceOwnership(&_OrderMarketplace.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_OrderMarketplace *OrderMarketplaceSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.RenounceRole(&_OrderMarketplace.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.RenounceRole(&_OrderMarketplace.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_OrderMarketplace *OrderMarketplaceSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.RevokeRole(&_OrderMarketplace.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.RevokeRole(&_OrderMarketplace.TransactOpts, role, account)
}

// SetBeneficary is a paid mutator transaction binding the contract method 0x0db3cc05.
//
// Solidity: function setBeneficary(address _beneficary) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) SetBeneficary(opts *bind.TransactOpts, _beneficary common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "setBeneficary", _beneficary)
}

// SetBeneficary is a paid mutator transaction binding the contract method 0x0db3cc05.
//
// Solidity: function setBeneficary(address _beneficary) returns()
func (_OrderMarketplace *OrderMarketplaceSession) SetBeneficary(_beneficary common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.SetBeneficary(&_OrderMarketplace.TransactOpts, _beneficary)
}

// SetBeneficary is a paid mutator transaction binding the contract method 0x0db3cc05.
//
// Solidity: function setBeneficary(address _beneficary) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) SetBeneficary(_beneficary common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.SetBeneficary(&_OrderMarketplace.TransactOpts, _beneficary)
}

// SetMinStageDuration is a paid mutator transaction binding the contract method 0xf6021884.
//
// Solidity: function setMinStageDuration(uint256 duration) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) SetMinStageDuration(opts *bind.TransactOpts, duration *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "setMinStageDuration", duration)
}

// SetMinStageDuration is a paid mutator transaction binding the contract method 0xf6021884.
//
// Solidity: function setMinStageDuration(uint256 duration) returns()
func (_OrderMarketplace *OrderMarketplaceSession) SetMinStageDuration(duration *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.SetMinStageDuration(&_OrderMarketplace.TransactOpts, duration)
}

// SetMinStageDuration is a paid mutator transaction binding the contract method 0xf6021884.
//
// Solidity: function setMinStageDuration(uint256 duration) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) SetMinStageDuration(duration *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.SetMinStageDuration(&_OrderMarketplace.TransactOpts, duration)
}

// SetOwnerCutPerMillion is a paid mutator transaction binding the contract method 0x19dad16d.
//
// Solidity: function setOwnerCutPerMillion(uint256 _ownerCutPerMillion) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) SetOwnerCutPerMillion(opts *bind.TransactOpts, _ownerCutPerMillion *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "setOwnerCutPerMillion", _ownerCutPerMillion)
}

// SetOwnerCutPerMillion is a paid mutator transaction binding the contract method 0x19dad16d.
//
// Solidity: function setOwnerCutPerMillion(uint256 _ownerCutPerMillion) returns()
func (_OrderMarketplace *OrderMarketplaceSession) SetOwnerCutPerMillion(_ownerCutPerMillion *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.SetOwnerCutPerMillion(&_OrderMarketplace.TransactOpts, _ownerCutPerMillion)
}

// SetOwnerCutPerMillion is a paid mutator transaction binding the contract method 0x19dad16d.
//
// Solidity: function setOwnerCutPerMillion(uint256 _ownerCutPerMillion) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) SetOwnerCutPerMillion(_ownerCutPerMillion *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.SetOwnerCutPerMillion(&_OrderMarketplace.TransactOpts, _ownerCutPerMillion)
}

// SetPublicationFee is a paid mutator transaction binding the contract method 0xaf8996f1.
//
// Solidity: function setPublicationFee(uint256 _publicationFee) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) SetPublicationFee(opts *bind.TransactOpts, _publicationFee *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "setPublicationFee", _publicationFee)
}

// SetPublicationFee is a paid mutator transaction binding the contract method 0xaf8996f1.
//
// Solidity: function setPublicationFee(uint256 _publicationFee) returns()
func (_OrderMarketplace *OrderMarketplaceSession) SetPublicationFee(_publicationFee *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.SetPublicationFee(&_OrderMarketplace.TransactOpts, _publicationFee)
}

// SetPublicationFee is a paid mutator transaction binding the contract method 0xaf8996f1.
//
// Solidity: function setPublicationFee(uint256 _publicationFee) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) SetPublicationFee(_publicationFee *big.Int) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.SetPublicationFee(&_OrderMarketplace.TransactOpts, _publicationFee)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OrderMarketplace *OrderMarketplaceSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.TransferOwnership(&_OrderMarketplace.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.TransferOwnership(&_OrderMarketplace.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_OrderMarketplace *OrderMarketplaceSession) Unpause() (*types.Transaction, error) {
	return _OrderMarketplace.Contract.Unpause(&_OrderMarketplace.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) Unpause() (*types.Transaction, error) {
	return _OrderMarketplace.Contract.Unpause(&_OrderMarketplace.TransactOpts)
}

// UpdateStorageAddress is a paid mutator transaction binding the contract method 0x889e2129.
//
// Solidity: function updateStorageAddress(address _marketplaceStorage) returns()
func (_OrderMarketplace *OrderMarketplaceTransactor) UpdateStorageAddress(opts *bind.TransactOpts, _marketplaceStorage common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.contract.Transact(opts, "updateStorageAddress", _marketplaceStorage)
}

// UpdateStorageAddress is a paid mutator transaction binding the contract method 0x889e2129.
//
// Solidity: function updateStorageAddress(address _marketplaceStorage) returns()
func (_OrderMarketplace *OrderMarketplaceSession) UpdateStorageAddress(_marketplaceStorage common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.UpdateStorageAddress(&_OrderMarketplace.TransactOpts, _marketplaceStorage)
}

// UpdateStorageAddress is a paid mutator transaction binding the contract method 0x889e2129.
//
// Solidity: function updateStorageAddress(address _marketplaceStorage) returns()
func (_OrderMarketplace *OrderMarketplaceTransactorSession) UpdateStorageAddress(_marketplaceStorage common.Address) (*types.Transaction, error) {
	return _OrderMarketplace.Contract.UpdateStorageAddress(&_OrderMarketplace.TransactOpts, _marketplaceStorage)
}

// OrderMarketplaceAddedBlackListIterator is returned from FilterAddedBlackList and is used to iterate over the raw logs and unpacked data for AddedBlackList events raised by the OrderMarketplace contract.
type OrderMarketplaceAddedBlackListIterator struct {
	Event *OrderMarketplaceAddedBlackList // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceAddedBlackListIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceAddedBlackList)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceAddedBlackList)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceAddedBlackListIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceAddedBlackListIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceAddedBlackList represents a AddedBlackList event raised by the OrderMarketplace contract.
type OrderMarketplaceAddedBlackList struct {
	User common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAddedBlackList is a free log retrieval operation binding the contract event 0x42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc.
//
// Solidity: event AddedBlackList(address _user)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterAddedBlackList(opts *bind.FilterOpts) (*OrderMarketplaceAddedBlackListIterator, error) {

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "AddedBlackList")
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceAddedBlackListIterator{contract: _OrderMarketplace.contract, event: "AddedBlackList", logs: logs, sub: sub}, nil
}

// WatchAddedBlackList is a free log subscription operation binding the contract event 0x42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc.
//
// Solidity: event AddedBlackList(address _user)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchAddedBlackList(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceAddedBlackList) (event.Subscription, error) {

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "AddedBlackList")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceAddedBlackList)
				if err := _OrderMarketplace.contract.UnpackLog(event, "AddedBlackList", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddedBlackList is a log parse operation binding the contract event 0x42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc.
//
// Solidity: event AddedBlackList(address _user)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseAddedBlackList(log types.Log) (*OrderMarketplaceAddedBlackList, error) {
	event := new(OrderMarketplaceAddedBlackList)
	if err := _OrderMarketplace.contract.UnpackLog(event, "AddedBlackList", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceChangedOwnerCutPerMillionIterator is returned from FilterChangedOwnerCutPerMillion and is used to iterate over the raw logs and unpacked data for ChangedOwnerCutPerMillion events raised by the OrderMarketplace contract.
type OrderMarketplaceChangedOwnerCutPerMillionIterator struct {
	Event *OrderMarketplaceChangedOwnerCutPerMillion // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceChangedOwnerCutPerMillionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceChangedOwnerCutPerMillion)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceChangedOwnerCutPerMillion)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceChangedOwnerCutPerMillionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceChangedOwnerCutPerMillionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceChangedOwnerCutPerMillion represents a ChangedOwnerCutPerMillion event raised by the OrderMarketplace contract.
type OrderMarketplaceChangedOwnerCutPerMillion struct {
	OwnerCutPerMillion *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterChangedOwnerCutPerMillion is a free log retrieval operation binding the contract event 0xfa406a120a9e7f2b332bfb7a43d3bf1c3f079262202907a6b69c94b2821a02c6.
//
// Solidity: event ChangedOwnerCutPerMillion(uint256 ownerCutPerMillion)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterChangedOwnerCutPerMillion(opts *bind.FilterOpts) (*OrderMarketplaceChangedOwnerCutPerMillionIterator, error) {

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "ChangedOwnerCutPerMillion")
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceChangedOwnerCutPerMillionIterator{contract: _OrderMarketplace.contract, event: "ChangedOwnerCutPerMillion", logs: logs, sub: sub}, nil
}

// WatchChangedOwnerCutPerMillion is a free log subscription operation binding the contract event 0xfa406a120a9e7f2b332bfb7a43d3bf1c3f079262202907a6b69c94b2821a02c6.
//
// Solidity: event ChangedOwnerCutPerMillion(uint256 ownerCutPerMillion)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchChangedOwnerCutPerMillion(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceChangedOwnerCutPerMillion) (event.Subscription, error) {

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "ChangedOwnerCutPerMillion")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceChangedOwnerCutPerMillion)
				if err := _OrderMarketplace.contract.UnpackLog(event, "ChangedOwnerCutPerMillion", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangedOwnerCutPerMillion is a log parse operation binding the contract event 0xfa406a120a9e7f2b332bfb7a43d3bf1c3f079262202907a6b69c94b2821a02c6.
//
// Solidity: event ChangedOwnerCutPerMillion(uint256 ownerCutPerMillion)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseChangedOwnerCutPerMillion(log types.Log) (*OrderMarketplaceChangedOwnerCutPerMillion, error) {
	event := new(OrderMarketplaceChangedOwnerCutPerMillion)
	if err := _OrderMarketplace.contract.UnpackLog(event, "ChangedOwnerCutPerMillion", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceChangedPublicationFeeIterator is returned from FilterChangedPublicationFee and is used to iterate over the raw logs and unpacked data for ChangedPublicationFee events raised by the OrderMarketplace contract.
type OrderMarketplaceChangedPublicationFeeIterator struct {
	Event *OrderMarketplaceChangedPublicationFee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceChangedPublicationFeeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceChangedPublicationFee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceChangedPublicationFee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceChangedPublicationFeeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceChangedPublicationFeeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceChangedPublicationFee represents a ChangedPublicationFee event raised by the OrderMarketplace contract.
type OrderMarketplaceChangedPublicationFee struct {
	PublicationFee *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterChangedPublicationFee is a free log retrieval operation binding the contract event 0xe7fa8737293f41b5dfa0d5c3e552860a06275bed7015581b083c7be7003308ba.
//
// Solidity: event ChangedPublicationFee(uint256 publicationFee)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterChangedPublicationFee(opts *bind.FilterOpts) (*OrderMarketplaceChangedPublicationFeeIterator, error) {

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "ChangedPublicationFee")
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceChangedPublicationFeeIterator{contract: _OrderMarketplace.contract, event: "ChangedPublicationFee", logs: logs, sub: sub}, nil
}

// WatchChangedPublicationFee is a free log subscription operation binding the contract event 0xe7fa8737293f41b5dfa0d5c3e552860a06275bed7015581b083c7be7003308ba.
//
// Solidity: event ChangedPublicationFee(uint256 publicationFee)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchChangedPublicationFee(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceChangedPublicationFee) (event.Subscription, error) {

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "ChangedPublicationFee")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceChangedPublicationFee)
				if err := _OrderMarketplace.contract.UnpackLog(event, "ChangedPublicationFee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangedPublicationFee is a log parse operation binding the contract event 0xe7fa8737293f41b5dfa0d5c3e552860a06275bed7015581b083c7be7003308ba.
//
// Solidity: event ChangedPublicationFee(uint256 publicationFee)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseChangedPublicationFee(log types.Log) (*OrderMarketplaceChangedPublicationFee, error) {
	event := new(OrderMarketplaceChangedPublicationFee)
	if err := _OrderMarketplace.contract.UnpackLog(event, "ChangedPublicationFee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceMarketplaceStorageUpdatedIterator is returned from FilterMarketplaceStorageUpdated and is used to iterate over the raw logs and unpacked data for MarketplaceStorageUpdated events raised by the OrderMarketplace contract.
type OrderMarketplaceMarketplaceStorageUpdatedIterator struct {
	Event *OrderMarketplaceMarketplaceStorageUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceMarketplaceStorageUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceMarketplaceStorageUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceMarketplaceStorageUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceMarketplaceStorageUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceMarketplaceStorageUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceMarketplaceStorageUpdated represents a MarketplaceStorageUpdated event raised by the OrderMarketplace contract.
type OrderMarketplaceMarketplaceStorageUpdated struct {
	MarketplaceStorage common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterMarketplaceStorageUpdated is a free log retrieval operation binding the contract event 0x19e07a962d0e1cab8b7d4be06b77a7225ca7ebb744994cb6546fdd815590dc9d.
//
// Solidity: event MarketplaceStorageUpdated(address _marketplaceStorage)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterMarketplaceStorageUpdated(opts *bind.FilterOpts) (*OrderMarketplaceMarketplaceStorageUpdatedIterator, error) {

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "MarketplaceStorageUpdated")
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceMarketplaceStorageUpdatedIterator{contract: _OrderMarketplace.contract, event: "MarketplaceStorageUpdated", logs: logs, sub: sub}, nil
}

// WatchMarketplaceStorageUpdated is a free log subscription operation binding the contract event 0x19e07a962d0e1cab8b7d4be06b77a7225ca7ebb744994cb6546fdd815590dc9d.
//
// Solidity: event MarketplaceStorageUpdated(address _marketplaceStorage)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchMarketplaceStorageUpdated(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceMarketplaceStorageUpdated) (event.Subscription, error) {

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "MarketplaceStorageUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceMarketplaceStorageUpdated)
				if err := _OrderMarketplace.contract.UnpackLog(event, "MarketplaceStorageUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMarketplaceStorageUpdated is a log parse operation binding the contract event 0x19e07a962d0e1cab8b7d4be06b77a7225ca7ebb744994cb6546fdd815590dc9d.
//
// Solidity: event MarketplaceStorageUpdated(address _marketplaceStorage)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseMarketplaceStorageUpdated(log types.Log) (*OrderMarketplaceMarketplaceStorageUpdated, error) {
	event := new(OrderMarketplaceMarketplaceStorageUpdated)
	if err := _OrderMarketplace.contract.UnpackLog(event, "MarketplaceStorageUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceOrderCancelledIterator is returned from FilterOrderCancelled and is used to iterate over the raw logs and unpacked data for OrderCancelled events raised by the OrderMarketplace contract.
type OrderMarketplaceOrderCancelledIterator struct {
	Event *OrderMarketplaceOrderCancelled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceOrderCancelledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceOrderCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceOrderCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceOrderCancelledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceOrderCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceOrderCancelled represents a OrderCancelled event raised by the OrderMarketplace contract.
type OrderMarketplaceOrderCancelled struct {
	Who common.Address
	Id  [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOrderCancelled is a free log retrieval operation binding the contract event 0x35974c4230d53fb4c6e8553fd900c88ba92747dbc689a79bcd6ba755cb936985.
//
// Solidity: event OrderCancelled(address who, bytes32 id)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterOrderCancelled(opts *bind.FilterOpts) (*OrderMarketplaceOrderCancelledIterator, error) {

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "OrderCancelled")
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceOrderCancelledIterator{contract: _OrderMarketplace.contract, event: "OrderCancelled", logs: logs, sub: sub}, nil
}

// WatchOrderCancelled is a free log subscription operation binding the contract event 0x35974c4230d53fb4c6e8553fd900c88ba92747dbc689a79bcd6ba755cb936985.
//
// Solidity: event OrderCancelled(address who, bytes32 id)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchOrderCancelled(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceOrderCancelled) (event.Subscription, error) {

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "OrderCancelled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceOrderCancelled)
				if err := _OrderMarketplace.contract.UnpackLog(event, "OrderCancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderCancelled is a log parse operation binding the contract event 0x35974c4230d53fb4c6e8553fd900c88ba92747dbc689a79bcd6ba755cb936985.
//
// Solidity: event OrderCancelled(address who, bytes32 id)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseOrderCancelled(log types.Log) (*OrderMarketplaceOrderCancelled, error) {
	event := new(OrderMarketplaceOrderCancelled)
	if err := _OrderMarketplace.contract.UnpackLog(event, "OrderCancelled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceOrderCreatedIterator is returned from FilterOrderCreated and is used to iterate over the raw logs and unpacked data for OrderCreated events raised by the OrderMarketplace contract.
type OrderMarketplaceOrderCreatedIterator struct {
	Event *OrderMarketplaceOrderCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceOrderCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceOrderCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceOrderCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceOrderCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceOrderCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceOrderCreated represents a OrderCreated event raised by the OrderMarketplace contract.
type OrderMarketplaceOrderCreated struct {
	OrderId    [32]byte
	AssetId    *big.Int
	Seller     common.Address
	NftAddress common.Address
	PriceInWei *big.Int
	ExpiredAt  *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterOrderCreated is a free log retrieval operation binding the contract event 0x84c66c3f7ba4b390e20e8e8233e2a516f3ce34a72749e4f12bd010dfba238039.
//
// Solidity: event OrderCreated(bytes32 orderId, uint256 assetId, address seller, address nftAddress, uint256 priceInWei, uint256 expiredAt)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterOrderCreated(opts *bind.FilterOpts) (*OrderMarketplaceOrderCreatedIterator, error) {

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "OrderCreated")
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceOrderCreatedIterator{contract: _OrderMarketplace.contract, event: "OrderCreated", logs: logs, sub: sub}, nil
}

// WatchOrderCreated is a free log subscription operation binding the contract event 0x84c66c3f7ba4b390e20e8e8233e2a516f3ce34a72749e4f12bd010dfba238039.
//
// Solidity: event OrderCreated(bytes32 orderId, uint256 assetId, address seller, address nftAddress, uint256 priceInWei, uint256 expiredAt)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchOrderCreated(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceOrderCreated) (event.Subscription, error) {

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "OrderCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceOrderCreated)
				if err := _OrderMarketplace.contract.UnpackLog(event, "OrderCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderCreated is a log parse operation binding the contract event 0x84c66c3f7ba4b390e20e8e8233e2a516f3ce34a72749e4f12bd010dfba238039.
//
// Solidity: event OrderCreated(bytes32 orderId, uint256 assetId, address seller, address nftAddress, uint256 priceInWei, uint256 expiredAt)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseOrderCreated(log types.Log) (*OrderMarketplaceOrderCreated, error) {
	event := new(OrderMarketplaceOrderCreated)
	if err := _OrderMarketplace.contract.UnpackLog(event, "OrderCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceOrderSuccessfulIterator is returned from FilterOrderSuccessful and is used to iterate over the raw logs and unpacked data for OrderSuccessful events raised by the OrderMarketplace contract.
type OrderMarketplaceOrderSuccessfulIterator struct {
	Event *OrderMarketplaceOrderSuccessful // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceOrderSuccessfulIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceOrderSuccessful)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceOrderSuccessful)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceOrderSuccessfulIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceOrderSuccessfulIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceOrderSuccessful represents a OrderSuccessful event raised by the OrderMarketplace contract.
type OrderMarketplaceOrderSuccessful struct {
	Id     [32]byte
	Buyer  common.Address
	Seller common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterOrderSuccessful is a free log retrieval operation binding the contract event 0xa3fe2a6ffb1ad0de1c1ee8e3513d205b99980c40af9de82e502095245debabbb.
//
// Solidity: event OrderSuccessful(bytes32 id, address buyer, address seller)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterOrderSuccessful(opts *bind.FilterOpts) (*OrderMarketplaceOrderSuccessfulIterator, error) {

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "OrderSuccessful")
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceOrderSuccessfulIterator{contract: _OrderMarketplace.contract, event: "OrderSuccessful", logs: logs, sub: sub}, nil
}

// WatchOrderSuccessful is a free log subscription operation binding the contract event 0xa3fe2a6ffb1ad0de1c1ee8e3513d205b99980c40af9de82e502095245debabbb.
//
// Solidity: event OrderSuccessful(bytes32 id, address buyer, address seller)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchOrderSuccessful(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceOrderSuccessful) (event.Subscription, error) {

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "OrderSuccessful")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceOrderSuccessful)
				if err := _OrderMarketplace.contract.UnpackLog(event, "OrderSuccessful", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderSuccessful is a log parse operation binding the contract event 0xa3fe2a6ffb1ad0de1c1ee8e3513d205b99980c40af9de82e502095245debabbb.
//
// Solidity: event OrderSuccessful(bytes32 id, address buyer, address seller)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseOrderSuccessful(log types.Log) (*OrderMarketplaceOrderSuccessful, error) {
	event := new(OrderMarketplaceOrderSuccessful)
	if err := _OrderMarketplace.contract.UnpackLog(event, "OrderSuccessful", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the OrderMarketplace contract.
type OrderMarketplaceOwnershipTransferredIterator struct {
	Event *OrderMarketplaceOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceOwnershipTransferred represents a OwnershipTransferred event raised by the OrderMarketplace contract.
type OrderMarketplaceOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*OrderMarketplaceOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceOwnershipTransferredIterator{contract: _OrderMarketplace.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceOwnershipTransferred)
				if err := _OrderMarketplace.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseOwnershipTransferred(log types.Log) (*OrderMarketplaceOwnershipTransferred, error) {
	event := new(OrderMarketplaceOwnershipTransferred)
	if err := _OrderMarketplace.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplacePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the OrderMarketplace contract.
type OrderMarketplacePausedIterator struct {
	Event *OrderMarketplacePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplacePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplacePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplacePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplacePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplacePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplacePaused represents a Paused event raised by the OrderMarketplace contract.
type OrderMarketplacePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterPaused(opts *bind.FilterOpts) (*OrderMarketplacePausedIterator, error) {

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &OrderMarketplacePausedIterator{contract: _OrderMarketplace.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *OrderMarketplacePaused) (event.Subscription, error) {

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplacePaused)
				if err := _OrderMarketplace.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParsePaused(log types.Log) (*OrderMarketplacePaused, error) {
	event := new(OrderMarketplacePaused)
	if err := _OrderMarketplace.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceRemovedBlackListIterator is returned from FilterRemovedBlackList and is used to iterate over the raw logs and unpacked data for RemovedBlackList events raised by the OrderMarketplace contract.
type OrderMarketplaceRemovedBlackListIterator struct {
	Event *OrderMarketplaceRemovedBlackList // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceRemovedBlackListIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceRemovedBlackList)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceRemovedBlackList)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceRemovedBlackListIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceRemovedBlackListIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceRemovedBlackList represents a RemovedBlackList event raised by the OrderMarketplace contract.
type OrderMarketplaceRemovedBlackList struct {
	User common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRemovedBlackList is a free log retrieval operation binding the contract event 0xd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c.
//
// Solidity: event RemovedBlackList(address _user)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterRemovedBlackList(opts *bind.FilterOpts) (*OrderMarketplaceRemovedBlackListIterator, error) {

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "RemovedBlackList")
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceRemovedBlackListIterator{contract: _OrderMarketplace.contract, event: "RemovedBlackList", logs: logs, sub: sub}, nil
}

// WatchRemovedBlackList is a free log subscription operation binding the contract event 0xd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c.
//
// Solidity: event RemovedBlackList(address _user)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchRemovedBlackList(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceRemovedBlackList) (event.Subscription, error) {

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "RemovedBlackList")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceRemovedBlackList)
				if err := _OrderMarketplace.contract.UnpackLog(event, "RemovedBlackList", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemovedBlackList is a log parse operation binding the contract event 0xd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c.
//
// Solidity: event RemovedBlackList(address _user)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseRemovedBlackList(log types.Log) (*OrderMarketplaceRemovedBlackList, error) {
	event := new(OrderMarketplaceRemovedBlackList)
	if err := _OrderMarketplace.contract.UnpackLog(event, "RemovedBlackList", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the OrderMarketplace contract.
type OrderMarketplaceRoleAdminChangedIterator struct {
	Event *OrderMarketplaceRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceRoleAdminChanged represents a RoleAdminChanged event raised by the OrderMarketplace contract.
type OrderMarketplaceRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*OrderMarketplaceRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceRoleAdminChangedIterator{contract: _OrderMarketplace.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceRoleAdminChanged)
				if err := _OrderMarketplace.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseRoleAdminChanged(log types.Log) (*OrderMarketplaceRoleAdminChanged, error) {
	event := new(OrderMarketplaceRoleAdminChanged)
	if err := _OrderMarketplace.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the OrderMarketplace contract.
type OrderMarketplaceRoleGrantedIterator struct {
	Event *OrderMarketplaceRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceRoleGranted represents a RoleGranted event raised by the OrderMarketplace contract.
type OrderMarketplaceRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*OrderMarketplaceRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceRoleGrantedIterator{contract: _OrderMarketplace.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceRoleGranted)
				if err := _OrderMarketplace.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseRoleGranted(log types.Log) (*OrderMarketplaceRoleGranted, error) {
	event := new(OrderMarketplaceRoleGranted)
	if err := _OrderMarketplace.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the OrderMarketplace contract.
type OrderMarketplaceRoleRevokedIterator struct {
	Event *OrderMarketplaceRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceRoleRevoked represents a RoleRevoked event raised by the OrderMarketplace contract.
type OrderMarketplaceRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*OrderMarketplaceRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceRoleRevokedIterator{contract: _OrderMarketplace.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceRoleRevoked)
				if err := _OrderMarketplace.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseRoleRevoked(log types.Log) (*OrderMarketplaceRoleRevoked, error) {
	event := new(OrderMarketplaceRoleRevoked)
	if err := _OrderMarketplace.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMarketplaceUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the OrderMarketplace contract.
type OrderMarketplaceUnpausedIterator struct {
	Event *OrderMarketplaceUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMarketplaceUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMarketplaceUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMarketplaceUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMarketplaceUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMarketplaceUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMarketplaceUnpaused represents a Unpaused event raised by the OrderMarketplace contract.
type OrderMarketplaceUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_OrderMarketplace *OrderMarketplaceFilterer) FilterUnpaused(opts *bind.FilterOpts) (*OrderMarketplaceUnpausedIterator, error) {

	logs, sub, err := _OrderMarketplace.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &OrderMarketplaceUnpausedIterator{contract: _OrderMarketplace.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_OrderMarketplace *OrderMarketplaceFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *OrderMarketplaceUnpaused) (event.Subscription, error) {

	logs, sub, err := _OrderMarketplace.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMarketplaceUnpaused)
				if err := _OrderMarketplace.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_OrderMarketplace *OrderMarketplaceFilterer) ParseUnpaused(log types.Log) (*OrderMarketplaceUnpaused, error) {
	event := new(OrderMarketplaceUnpaused)
	if err := _OrderMarketplace.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
