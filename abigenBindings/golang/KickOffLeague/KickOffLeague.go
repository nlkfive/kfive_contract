// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package KickOffLeague

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ILeagueLeagueInfo is an auto generated low-level Go binding around an user-defined struct.
type ILeagueLeagueInfo struct {
	TotalRace   uint8
	CreatedRace uint8
	EndedRace   uint8
	LeagueName  string
}

// ILeagueRace is an auto generated low-level Go binding around an user-defined struct.
type ILeagueRace struct {
	NoSlot  uint8
	StartAt uint32
	Result  [27]byte
}

// KickOffLeagueMetaData contains all meta data concerning the KickOffLeague contract.
var KickOffLeagueMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"noRace\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"nlggtAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"raceReward\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_leagueName\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentRaceNo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRace\",\"type\":\"uint256\"}],\"name\":\"CannotCreateMoreRace\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRegister\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEndYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RaceExisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RaceNotExisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RaceWasUpdated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardIsExisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardIsNotExisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TooEarly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TooLate\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RaceCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"noSlot\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"raceNo\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"startAt\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RaceCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes27\",\"name\":\"result\",\"type\":\"bytes27\"}],\"name\":\"RaceResultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"slotId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftRewardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winnerIndex\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"slotId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftRewardId\",\"type\":\"uint256\"}],\"name\":\"RewardReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftRewardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winnerIndex\",\"type\":\"uint256\"}],\"name\":\"RewardRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nftRewardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winnerIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"addRewardByMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nftRewardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winnerIndex\",\"type\":\"uint256\"}],\"name\":\"addRewardByTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"}],\"name\":\"cancelRace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"noSlot\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"startAt\",\"type\":\"uint32\"}],\"name\":\"createRace\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"register\",\"type\":\"address\"}],\"name\":\"getTotalScore\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"score\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leagueInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"totalRace\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"createdRace\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"endedRace\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"leagueName\",\"type\":\"string\"}],\"internalType\":\"structILeague.LeagueInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"}],\"name\":\"raceInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"noSlot\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"startAt\",\"type\":\"uint32\"},{\"internalType\":\"bytes27\",\"name\":\"result\",\"type\":\"bytes27\"}],\"internalType\":\"structILeague.Race\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slotId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"}],\"name\":\"receiveReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slotId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"}],\"name\":\"registerRace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"register\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"}],\"name\":\"registeredSlot\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"winnerIndex\",\"type\":\"uint256\"}],\"name\":\"removeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"raceId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes27\",\"name\":\"result\",\"type\":\"bytes27\"}],\"name\":\"updateRaceResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162004d2b38038062004d2b833981810160405281019062000037919062000943565b8382826200005a6200004e6200033460201b60201c565b6200033c60201b60201c565b6000600260146101000a81548160ff021916908315150217905550620000996000801b6200008d6200033460201b60201c565b6200040260201b60201c565b620000da7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775620000ce6200033460201b60201c565b6200040260201b60201c565b6200012c7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756200041860201b60201c565b620001588273ffffffffffffffffffffffffffffffffffffffff166200047b60201b62001e671760201c565b6200018f576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060405180608001604052808460ff168152602001600060ff168152602001600060ff16815260200182815250600360008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff16021790555060608201518160010190805190602001906200027f929190620007f3565b50905050505050620002b28373ffffffffffffffffffffffffffffffffffffffff166200047b60201b62001e671760201c565b620002e9576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505062000bad565b600033905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200041482826200048e60201b60201c565b5050565b60006200042b836200055c60201b60201c565b905081600080858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b600080823b905060008111915050919050565b620004a582826200057b60201b62001e7a1760201c565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775821480620004d657506000801b82145b156200055857620005137f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a826200057b60201b62001e7a1760201c565b6000801b8214156200055757620005567fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775826200057b60201b62001e7a1760201c565b5b5b5050565b6000806000838152602001908152602001600020600101549050919050565b620005928282620005c360201b62001eae1760201c565b620005be8160016000858152602001908152602001600020620006b460201b62001f8e1790919060201c565b505050565b620005d58282620006ec60201b60201c565b620006b057600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620006556200033460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000620006e4836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6200075660201b60201c565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006200076a8383620007d060201b60201c565b620007c5578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050620007ca565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b828054620008019062000a9e565b90600052602060002090601f01602090048101928262000825576000855562000871565b82601f106200084057805160ff191683800117855562000871565b8280016001018555821562000871579182015b828111156200087057825182559160200191906001019062000853565b5b50905062000880919062000884565b5090565b5b808211156200089f57600081600090555060010162000885565b5090565b6000620008ba620008b484620009f1565b620009c8565b905082815260208101848484011115620008d357600080fd5b620008e084828562000a68565b509392505050565b600081519050620008f98162000b79565b92915050565b600082601f8301126200091157600080fd5b815162000923848260208601620008a3565b91505092915050565b6000815190506200093d8162000b93565b92915050565b600080600080608085870312156200095a57600080fd5b60006200096a878288016200092c565b94505060206200097d87828801620008e8565b93505060406200099087828801620008e8565b925050606085015167ffffffffffffffff811115620009ae57600080fd5b620009bc87828801620008ff565b91505092959194509250565b6000620009d4620009e7565b9050620009e2828262000ad4565b919050565b6000604051905090565b600067ffffffffffffffff82111562000a0f5762000a0e62000b39565b5b62000a1a8262000b68565b9050602081019050919050565b600062000a348262000a3b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b60005b8381101562000a8857808201518184015260208101905062000a6b565b8381111562000a98576000848401525b50505050565b6000600282049050600182168062000ab757607f821691505b6020821081141562000ace5762000acd62000b0a565b5b50919050565b62000adf8262000b68565b810181811067ffffffffffffffff8211171562000b015762000b0062000b39565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b62000b848162000a27565b811462000b9057600080fd5b50565b62000b9e8162000a5b565b811462000baa57600080fd5b50565b61416e8062000bbd6000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80639010d07c11610104578063c05c107d116100a2578063dd0b377811610071578063dd0b37781461053f578063e63ab1e91461055b578063ef8597fd14610579578063f2fde38b146105a9576101da565b8063c05c107d146104a7578063ca15c873146104c3578063d283b3c5146104f3578063d547741f14610523576101da565b806393eb521b116100de57806393eb521b1461042157806396fd69801461043d578063a217fddf1461046d578063a4c1564a1461048b576101da565b80639010d07c1461039157806391d14854146103c1578063928e03da146103f1576101da565b80633f4ba83a1161017c57806375b238fc1161014b57806375b238fc1461032d578063786803821461034b5780638456cb59146103695780638da5cb5b14610373576101da565b80633f4ba83a146102df5780635c975abb146102e957806370e4567914610307578063715018a614610323576101da565b806321ad4e51116101b857806321ad4e511461025b578063248a9ca3146102775780632f2ff15d146102a757806336568abe146102c3576101da565b806301ffc9a7146101df578063150b7a021461020f5780631e621ebe1461023f575b600080fd5b6101f960048036038101906101f491906132ba565b6105c5565b60405161020691906137cd565b60405180910390f35b61022960048036038101906102249190613057565b61063f565b6040516102369190613863565b60405180910390f35b6102596004803603810190610254919061330c565b61066d565b005b610275600480360381019061027091906131f0565b610906565b005b610291600480360381019061028c9190613113565b610abe565b60405161029e91906137e8565b60405180910390f35b6102c160048036038101906102bc919061313c565b610add565b005b6102dd60048036038101906102d8919061313c565b610b06565b005b6102e7610b89565b005b6102f1610bc6565b6040516102fe91906137cd565b60405180910390f35b610321600480360381019061031c91906131b4565b610bdd565b005b61032b610dbc565b005b610335610e44565b60405161034291906137e8565b60405180910390f35b610353610e68565b6040516103609190613960565b60405180910390f35b610371610f6b565b005b61037b610fa8565b604051610388919061373d565b60405180910390f35b6103ab60048036038101906103a691906131b4565b610fd2565b6040516103b8919061373d565b60405180910390f35b6103db60048036038101906103d6919061313c565b611001565b6040516103e891906137cd565b60405180910390f35b61040b60048036038101906104069190613348565b61106b565b60405161041891906137e8565b60405180910390f35b61043b6004803603810190610436919061330c565b6113c8565b005b610457600480360381019061045291906130d7565b611478565b60405161046491906139b8565b60405180910390f35b6104756114e0565b60405161048291906137e8565b60405180910390f35b6104a560048036038101906104a0919061323f565b6114e7565b005b6104c160048036038101906104bc9190613113565b611699565b005b6104dd60048036038101906104d89190613113565b611914565b6040516104ea919061399d565b60405180910390f35b61050d6004803603810190610508919061302e565b611938565b60405161051a91906139b8565b60405180910390f35b61053d6004803603810190610538919061313c565b611a6e565b005b61055960048036038101906105549190613178565b611a97565b005b610563611ca8565b60405161057091906137e8565b60405180910390f35b610593600480360381019061058e9190613113565b611ccc565b6040516105a09190613982565b60405180910390f35b6105c360048036038101906105be919061302e565b611d63565b005b60007f244b6822000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610638575061063782611fbe565b5b9050919050565b60007f150b7a023d4804d13e8c85fb27262cb750cf6ba9f9dd3bb30d90f482ceeb4b1f905095945050505050565b610675610bc6565b156106b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ac90613900565b60405180910390fd5b6000600660008381526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160059054906101000a900460281b64ffffffffff191664ffffffffff1916815250509050610754816020015163ffffffff16612038565b61075c61207f565b806000015160ff168360ff161180610777575060008360ff16145b156107ae576040517f1258e44300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006008600084815260200190815260200160002060006107cd61216d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff161461084f576040517f3a81d6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8260086000848152602001908152602001600020600061086d61216d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055507fad76e1cb5a0536a10bd2c282409cd1301bc63cff1eeed6b269642f1c24eaaa8f836108e961216d565b846040516108f9939291906139d3565b60405180910390a1505050565b61090e610bc6565b1561094e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094590613900565b60405180910390fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756109808161097b61216d565b612175565b60006007600084815260200190815260200160002054146109cd576040517f4fd9511700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e610a1361216d565b30866040518463ffffffff1660e01b8152600401610a3393929190613758565b600060405180830381600087803b158015610a4d57600080fd5b505af1158015610a61573d6000803e3d6000fd5b505050508260076000848152602001908152602001600020819055507fa28d22473b1a2f01a0708abe09b0bf3b7e1b0f30b0f759e2948b55c8e6fdd6e3848484604051610ab09392919061382c565b60405180910390a150505050565b6000806000838152602001908152602001600020600101549050919050565b610ae682610abe565b610af781610af261216d565b612175565b610b018383612212565b505050565b610b0e61216d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7290613940565b60405180910390fd5b610b8582826122b6565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610bbb81610bb661216d565b612175565b610bc361235a565b50565b6000600260149054906101000a900460ff16905090565b610be5610bc6565b15610c25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1c90613900565b60405180910390fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610c5781610c5261216d565b612175565b600060076000848152602001908152602001600020541415610ca5576040517fa8c58c3f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e30610cec61216d565b60076000878152602001908152602001600020546040518463ffffffff1660e01b8152600401610d1e93929190613758565b600060405180830381600087803b158015610d3857600080fd5b505af1158015610d4c573d6000803e3d6000fd5b50505050600060076000848152602001908152602001600020819055507fefba7d4f0912cb3bf75c07898c0969e76416cc35a7046ba3c04902f3f3f607f383600760008581526020019081526020016000205484604051610daf9392919061382c565b60405180910390a1505050565b610dc461216d565b73ffffffffffffffffffffffffffffffffffffffff16610de2610fa8565b73ffffffffffffffffffffffffffffffffffffffff1614610e38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2f90613920565b60405180910390fd5b610e4260006123fc565b565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b610e70612e71565b60036040518060800160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff168152602001600182018054610ee490613d9a565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1090613d9a565b8015610f5d5780601f10610f3257610100808354040283529160200191610f5d565b820191906000526020600020905b815481529060010190602001808311610f4057829003601f168201915b505050505081525050905090565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610f9d81610f9861216d565b612175565b610fa56124c2565b50565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610ff9826001600086815260200190815260200160002061256590919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000611075610bc6565b156110b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ac90613900565b60405180910390fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756110e7816110e261216d565b612175565b601a8460ff161115611125576040517f1258e44300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001600360000160019054906101000a900460ff166111469190613b5c565b9050600360000160009054906101000a900460ff1660ff168160ff1611156111b95780600360000160009054906101000a900460ff166040517fdf15abb80000000000000000000000000000000000000000000000000000000081526004016111b0929190613a0a565b60405180910390fd5b6111c88463ffffffff16612038565b60008186866040516020016111df93929190613700565b60405160208183030381529060405280519060200120905060006006600083815260200190815260200160002060000160019054906101000a900463ffffffff1663ffffffff16141561125e576040517fe2a9931a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600360000160018282829054906101000a900460ff166112809190613b5c565b92506101000a81548160ff021916908360ff16021790555080600960008460ff1660ff1681526020019081526020016000208190555060405180606001604052808760ff1681526020018663ffffffff168152602001600060281b64ffffffffff19168152506006600083815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160056101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c02179055509050507f58e30581b52e563d6f294b197724e473591cf7668760f3bae9a2678502011536868387846040516113b49493929190613a33565b60405180910390a180935050505092915050565b6113d0610bc6565b15611410576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140790613900565b60405180910390fd5b600360000160009054906101000a900460ff1660ff16600360000160029054906101000a900460ff1660ff161015611474576040517fe021995700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60006008600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b6114ef610bc6565b1561152f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152690613900565b60405180910390fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756115618161155c61216d565b612175565b60006007600085815260200190815260200160002054146115ae576040517f4fd9511700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b836007600085815260200190815260200160002081905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d3fc98643086856040518463ffffffff1660e01b81526004016116259392919061378f565b600060405180830381600087803b15801561163f57600080fd5b505af1158015611653573d6000803e3d6000fd5b505050507fa28d22473b1a2f01a0708abe09b0bf3b7e1b0f30b0f759e2948b55c8e6fdd6e385858560405161168a9392919061382c565b60405180910390a15050505050565b6116a1610bc6565b156116e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d890613900565b60405180910390fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756117138161170e61216d565b612175565b6000600660008481526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160059054906101000a900460281b64ffffffffff191664ffffffffff19168152505090506000816020015163ffffffff1614156117e4576040517fe2a9931a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060281b816040015164ffffffffff19161461182d576040517f6404a61900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600360000160029054906101000a900460ff1661184c9190613c21565b600360000160026101000a81548160ff021916908360ff16021790555060066000848152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a81549063ffffffff02191690556000820160056101000a8154907affffffffffffffffffffffffffffffffffffffffffffffffffffff021916905550507f3f3669b11af9b00fb2a95f8ded36a79a2e1d5374efbc5ec6b2b5b96ceaf9ac6a8360405161190791906137e8565b60405180910390a1505050565b60006119316001600084815260200190815260200160002061257f565b9050919050565b600080600090505b600360000160019054906101000a900460ff1660ff168160ff161015611a68576000600960008360ff1660ff16815260200190815260200160002054905060006008600083815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506006600083815260200190815260200160002060000160059054906101000a900460281b8160ff16601b8110611a3f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b60f81c84611a519190613b5c565b935050508080611a6090613dfd565b915050611940565b50919050565b611a7782610abe565b611a8881611a8361216d565b612175565b611a9283836122b6565b505050565b611a9f610bc6565b15611adf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad690613900565b60405180910390fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611b1181611b0c61216d565b612175565b600060066000858152602001908152602001600020905060008160000160019054906101000a900463ffffffff1663ffffffff161415611b7d576040517fe2a9931a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060281b8160000160059054906101000a900460281b64ffffffffff191614611bd3576040517f6404a61900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611bf68160000160019054906101000a900463ffffffff1663ffffffff16612594565b828160000160056101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c02179055506001600360000160029054906101000a900460ff16611c4c9190613b5c565b600360000160026101000a81548160ff021916908360ff1602179055507f2ab6bf279c23ac56ddfab0e48cd46e6576b30742d689be7cabf12d8f279c78708484604051611c9a929190613803565b60405180910390a150505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b611cd4612ea2565b600660008381526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160059054906101000a900460281b64ffffffffff191664ffffffffff1916815250509050919050565b611d6b61216d565b73ffffffffffffffffffffffffffffffffffffffff16611d89610fa8565b73ffffffffffffffffffffffffffffffffffffffff1614611ddf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd690613920565b60405180910390fd5b611e097fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582612212565b611e166000801b82612212565b611e477fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611e42610fa8565b6122b6565b611e5b6000801b611e56610fa8565b6122b6565b611e64816125db565b50565b600080823b905060008111915050919050565b611e848282611eae565b611ea98160016000858152602001908152602001600020611f8e90919063ffffffff16565b505050565b611eb88282611001565b611f8a57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611f2f61216d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000611fb6836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6126d3565b905092915050565b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612031575061203082612743565b5b9050919050565b80421061207c57806040517f691e5682000000000000000000000000000000000000000000000000000000008152600401612073919061399d565b60405180910390fd5b50565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082316120c761216d565b6040518263ffffffff1660e01b81526004016120e3919061373d565b60206040518083038186803b1580156120fb57600080fd5b505afa15801561210f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213391906132e3565b111561216b576040517f14ddd53600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b600033905090565b61217f8282611001565b61220e576121a48173ffffffffffffffffffffffffffffffffffffffff1660146127bd565b6121b28360001c60206127bd565b6040516020016121c39291906136c6565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612205919061387e565b60405180910390fd5b5050565b61221c8282611e7a565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582148061224c57506000801b82145b156122b25761227b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a82611e7a565b6000801b8214156122b1576122b07fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582611e7a565b5b5b5050565b6122c08282612ab7565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758214806122f057506000801b82145b156123565761231f7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a82612ab7565b6000801b821415612355576123547fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582611e7a565b5b5b5050565b612362610bc6565b6123a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612398906138c0565b60405180910390fd5b6000600260146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6123e561216d565b6040516123f2919061373d565b60405180910390a1565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6124ca610bc6565b1561250a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250190613900565b60405180910390fd5b6001600260146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861254e61216d565b60405161255b919061373d565b60405180910390a1565b60006125748360000183612aeb565b60001c905092915050565b600061258d82600001612b3c565b9050919050565b8042116125d857806040517f2a35a3240000000000000000000000000000000000000000000000000000000081526004016125cf919061399d565b60405180910390fd5b50565b6125e361216d565b73ffffffffffffffffffffffffffffffffffffffff16612601610fa8565b73ffffffffffffffffffffffffffffffffffffffff1614612657576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264e90613920565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156126c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126be906138e0565b60405180910390fd5b6126d0816123fc565b50565b60006126df8383612b4d565b61273857826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061273d565b600090505b92915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806127b657506127b582612b70565b5b9050919050565b6060600060028360026127d09190613b93565b6127da9190613b06565b67ffffffffffffffff811115612819577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561284b5781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106128a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612933577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026129739190613b93565b61297d9190613b06565b90505b6001811115612a69577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106129e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110612a22577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612a6290613d70565b9050612980565b5060008414612aad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aa4906138a0565b60405180910390fd5b8091505092915050565b612ac18282612bda565b612ae68160016000858152602001908152602001600020612cbb90919063ffffffff16565b505050565b6000826000018281548110612b29577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b612be48282611001565b15612cb757600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612c5c61216d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000612ce3836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612ceb565b905092915050565b60008083600101600084815260200190815260200160002054905060008114612e65576000600182612d1d9190613bed565b9050600060018660000180549050612d359190613bed565b9050818114612df0576000866000018281548110612d7c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110612dc6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612e2a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612e6b565b60009150505b92915050565b6040518060800160405280600060ff168152602001600060ff168152602001600060ff168152602001606081525090565b6040518060600160405280600060ff168152602001600063ffffffff168152602001600064ffffffffff191681525090565b6000612ee7612ee284613a9d565b613a78565b905082815260208101848484011115612eff57600080fd5b612f0a848285613d2e565b509392505050565b600081359050612f2181614097565b92915050565b600081359050612f36816140ae565b92915050565b600081359050612f4b816140c5565b92915050565b600081359050612f60816140dc565b92915050565b60008083601f840112612f7857600080fd5b8235905067ffffffffffffffff811115612f9157600080fd5b602083019150836001820283011115612fa957600080fd5b9250929050565b600082601f830112612fc157600080fd5b8135612fd1848260208601612ed4565b91505092915050565b600081359050612fe9816140f3565b92915050565b600081519050612ffe816140f3565b92915050565b6000813590506130138161410a565b92915050565b60008135905061302881614121565b92915050565b60006020828403121561304057600080fd5b600061304e84828501612f12565b91505092915050565b60008060008060006080868803121561306f57600080fd5b600061307d88828901612f12565b955050602061308e88828901612f12565b945050604061309f88828901612fda565b935050606086013567ffffffffffffffff8111156130bc57600080fd5b6130c888828901612f66565b92509250509295509295909350565b600080604083850312156130ea57600080fd5b60006130f885828601612f12565b925050602061310985828601612f3c565b9150509250929050565b60006020828403121561312557600080fd5b600061313384828501612f3c565b91505092915050565b6000806040838503121561314f57600080fd5b600061315d85828601612f3c565b925050602061316e85828601612f12565b9150509250929050565b6000806040838503121561318b57600080fd5b600061319985828601612f3c565b92505060206131aa85828601612f27565b9150509250929050565b600080604083850312156131c757600080fd5b60006131d585828601612f3c565b92505060206131e685828601612fda565b9150509250929050565b60008060006060848603121561320557600080fd5b600061321386828701612f3c565b935050602061322486828701612fda565b925050604061323586828701612fda565b9150509250925092565b6000806000806080858703121561325557600080fd5b600061326387828801612f3c565b945050602061327487828801612fda565b935050604061328587828801612fda565b925050606085013567ffffffffffffffff8111156132a257600080fd5b6132ae87828801612fb0565b91505092959194509250565b6000602082840312156132cc57600080fd5b60006132da84828501612f51565b91505092915050565b6000602082840312156132f557600080fd5b600061330384828501612fef565b91505092915050565b6000806040838503121561331f57600080fd5b600061332d85828601613019565b925050602061333e85828601612f3c565b9150509250929050565b6000806040838503121561335b57600080fd5b600061336985828601613019565b925050602061337a85828601613004565b9150509250929050565b61338d81613c55565b82525050565b61339c81613c67565b82525050565b6133ab81613c73565b82525050565b6133ba81613c73565b82525050565b6133c981613c9f565b82525050565b6133d881613ca9565b82525050565b60006133e982613ace565b6133f38185613ad9565b9350613403818560208601613d3d565b61340c81613ed8565b840191505092915050565b600061342282613ace565b61342c8185613aea565b935061343c818560208601613d3d565b61344581613ed8565b840191505092915050565b600061345b82613ace565b6134658185613afb565b9350613475818560208601613d3d565b80840191505092915050565b600061348e602083613aea565b915061349982613f03565b602082019050919050565b60006134b1601483613aea565b91506134bc82613f2c565b602082019050919050565b60006134d4602683613aea565b91506134df82613f55565b604082019050919050565b60006134f7601083613aea565b915061350282613fa4565b602082019050919050565b600061351a602083613aea565b915061352582613fcd565b602082019050919050565b600061353d601783613afb565b915061354882613ff6565b601782019050919050565b6000613560601183613afb565b915061356b8261401f565b601182019050919050565b6000613583602f83613aea565b915061358e82614048565b604082019050919050565b60006080830160008301516135b16000860182613691565b5060208301516135c46020860182613691565b5060408301516135d76040860182613691565b50606083015184820360608601526135ef82826133de565b9150508091505092915050565b6060820160008201516136126000850182613691565b506020820151613625602085018261364d565b50604082015161363860408501826133a2565b50505050565b61364781613cf5565b82525050565b61365681613cff565b82525050565b61366581613cff565b82525050565b61367c61367782613cff565b613e27565b82525050565b61368b81613d1c565b82525050565b61369a81613d0f565b82525050565b6136a981613d0f565b82525050565b6136c06136bb82613d0f565b613e39565b82525050565b60006136d182613530565b91506136dd8285613450565b91506136e882613553565b91506136f48284613450565b91508190509392505050565b600061370c82866136af565b60018201915061371c82856136af565b60018201915061372c828461366b565b600482019150819050949350505050565b60006020820190506137526000830184613384565b92915050565b600060608201905061376d6000830186613384565b61377a6020830185613384565b613787604083018461363e565b949350505050565b60006060820190506137a46000830186613384565b6137b1602083018561363e565b81810360408301526137c38184613417565b9050949350505050565b60006020820190506137e26000830184613393565b92915050565b60006020820190506137fd60008301846133c0565b92915050565b600060408201905061381860008301856133c0565b61382560208301846133b1565b9392505050565b600060608201905061384160008301866133c0565b61384e602083018561363e565b61385b604083018461363e565b949350505050565b600060208201905061387860008301846133cf565b92915050565b600060208201905081810360008301526138988184613417565b905092915050565b600060208201905081810360008301526138b981613481565b9050919050565b600060208201905081810360008301526138d9816134a4565b9050919050565b600060208201905081810360008301526138f9816134c7565b9050919050565b60006020820190508181036000830152613919816134ea565b9050919050565b600060208201905081810360008301526139398161350d565b9050919050565b6000602082019050818103600083015261395981613576565b9050919050565b6000602082019050818103600083015261397a8184613599565b905092915050565b600060608201905061399760008301846135fc565b92915050565b60006020820190506139b2600083018461363e565b92915050565b60006020820190506139cd60008301846136a0565b92915050565b60006060820190506139e860008301866136a0565b6139f56020830185613384565b613a0260408301846133c0565b949350505050565b6000604082019050613a1f6000830185613682565b613a2c6020830184613682565b9392505050565b6000608082019050613a4860008301876136a0565b613a5560208301866136a0565b613a62604083018561365c565b613a6f60608301846133c0565b95945050505050565b6000613a82613a93565b9050613a8e8282613dcc565b919050565b6000604051905090565b600067ffffffffffffffff821115613ab857613ab7613ea9565b5b613ac182613ed8565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613b1182613cf5565b9150613b1c83613cf5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613b5157613b50613e4b565b5b828201905092915050565b6000613b6782613d0f565b9150613b7283613d0f565b92508260ff03821115613b8857613b87613e4b565b5b828201905092915050565b6000613b9e82613cf5565b9150613ba983613cf5565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613be257613be1613e4b565b5b828202905092915050565b6000613bf882613cf5565b9150613c0383613cf5565b925082821015613c1657613c15613e4b565b5b828203905092915050565b6000613c2c82613d0f565b9150613c3783613d0f565b925082821015613c4a57613c49613e4b565b5b828203905092915050565b6000613c6082613cd5565b9050919050565b60008115159050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000082169050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b6000613d2782613d0f565b9050919050565b82818337600083830152505050565b60005b83811015613d5b578082015181840152602081019050613d40565b83811115613d6a576000848401525b50505050565b6000613d7b82613cf5565b91506000821415613d8f57613d8e613e4b565b5b600182039050919050565b60006002820490506001821680613db257607f821691505b60208210811415613dc657613dc5613e7a565b5b50919050565b613dd582613ed8565b810181811067ffffffffffffffff82111715613df457613df3613ea9565b5b80604052505050565b6000613e0882613d0f565b915060ff821415613e1c57613e1b613e4b565b5b600182019050919050565b6000613e3282613ee9565b9050919050565b6000613e4482613ef6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160e01b9050919050565b60008160f81b9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6140a081613c55565b81146140ab57600080fd5b50565b6140b781613c73565b81146140c257600080fd5b50565b6140ce81613c9f565b81146140d957600080fd5b50565b6140e581613ca9565b81146140f057600080fd5b50565b6140fc81613cf5565b811461410757600080fd5b50565b61411381613cff565b811461411e57600080fd5b50565b61412a81613d0f565b811461413557600080fd5b5056fea2646970667358221220120567019cd6f9c868655f5cd00cc76f8fc60e4fa7d6e0021ca5b3df25e1e50264736f6c63430008040033",
}

// KickOffLeagueABI is the input ABI used to generate the binding from.
// Deprecated: Use KickOffLeagueMetaData.ABI instead.
var KickOffLeagueABI = KickOffLeagueMetaData.ABI

// KickOffLeagueBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use KickOffLeagueMetaData.Bin instead.
var KickOffLeagueBin = KickOffLeagueMetaData.Bin

// DeployKickOffLeague deploys a new Ethereum contract, binding an instance of KickOffLeague to it.
func DeployKickOffLeague(auth *bind.TransactOpts, backend bind.ContractBackend, noRace uint8, nlggtAddr common.Address, raceReward common.Address, _leagueName string) (common.Address, *types.Transaction, *KickOffLeague, error) {
	parsed, err := KickOffLeagueMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(KickOffLeagueBin), backend, noRace, nlggtAddr, raceReward, _leagueName)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &KickOffLeague{KickOffLeagueCaller: KickOffLeagueCaller{contract: contract}, KickOffLeagueTransactor: KickOffLeagueTransactor{contract: contract}, KickOffLeagueFilterer: KickOffLeagueFilterer{contract: contract}}, nil
}

// KickOffLeague is an auto generated Go binding around an Ethereum contract.
type KickOffLeague struct {
	KickOffLeagueCaller     // Read-only binding to the contract
	KickOffLeagueTransactor // Write-only binding to the contract
	KickOffLeagueFilterer   // Log filterer for contract events
}

// KickOffLeagueCaller is an auto generated read-only Go binding around an Ethereum contract.
type KickOffLeagueCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KickOffLeagueTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KickOffLeagueTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KickOffLeagueFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KickOffLeagueFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KickOffLeagueSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KickOffLeagueSession struct {
	Contract     *KickOffLeague    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KickOffLeagueCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KickOffLeagueCallerSession struct {
	Contract *KickOffLeagueCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// KickOffLeagueTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KickOffLeagueTransactorSession struct {
	Contract     *KickOffLeagueTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// KickOffLeagueRaw is an auto generated low-level Go binding around an Ethereum contract.
type KickOffLeagueRaw struct {
	Contract *KickOffLeague // Generic contract binding to access the raw methods on
}

// KickOffLeagueCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KickOffLeagueCallerRaw struct {
	Contract *KickOffLeagueCaller // Generic read-only contract binding to access the raw methods on
}

// KickOffLeagueTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KickOffLeagueTransactorRaw struct {
	Contract *KickOffLeagueTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKickOffLeague creates a new instance of KickOffLeague, bound to a specific deployed contract.
func NewKickOffLeague(address common.Address, backend bind.ContractBackend) (*KickOffLeague, error) {
	contract, err := bindKickOffLeague(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &KickOffLeague{KickOffLeagueCaller: KickOffLeagueCaller{contract: contract}, KickOffLeagueTransactor: KickOffLeagueTransactor{contract: contract}, KickOffLeagueFilterer: KickOffLeagueFilterer{contract: contract}}, nil
}

// NewKickOffLeagueCaller creates a new read-only instance of KickOffLeague, bound to a specific deployed contract.
func NewKickOffLeagueCaller(address common.Address, caller bind.ContractCaller) (*KickOffLeagueCaller, error) {
	contract, err := bindKickOffLeague(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KickOffLeagueCaller{contract: contract}, nil
}

// NewKickOffLeagueTransactor creates a new write-only instance of KickOffLeague, bound to a specific deployed contract.
func NewKickOffLeagueTransactor(address common.Address, transactor bind.ContractTransactor) (*KickOffLeagueTransactor, error) {
	contract, err := bindKickOffLeague(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KickOffLeagueTransactor{contract: contract}, nil
}

// NewKickOffLeagueFilterer creates a new log filterer instance of KickOffLeague, bound to a specific deployed contract.
func NewKickOffLeagueFilterer(address common.Address, filterer bind.ContractFilterer) (*KickOffLeagueFilterer, error) {
	contract, err := bindKickOffLeague(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KickOffLeagueFilterer{contract: contract}, nil
}

// bindKickOffLeague binds a generic wrapper to an already deployed contract.
func bindKickOffLeague(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(KickOffLeagueABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KickOffLeague *KickOffLeagueRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KickOffLeague.Contract.KickOffLeagueCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KickOffLeague *KickOffLeagueRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KickOffLeague.Contract.KickOffLeagueTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KickOffLeague *KickOffLeagueRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KickOffLeague.Contract.KickOffLeagueTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KickOffLeague *KickOffLeagueCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KickOffLeague.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KickOffLeague *KickOffLeagueTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KickOffLeague.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KickOffLeague *KickOffLeagueTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KickOffLeague.Contract.contract.Transact(opts, method, params...)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_KickOffLeague *KickOffLeagueCaller) ADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _KickOffLeague.contract.Call(opts, &out, "ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_KickOffLeague *KickOffLeagueSession) ADMINROLE() ([32]byte, error) {
	return _KickOffLeague.Contract.ADMINROLE(&_KickOffLeague.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_KickOffLeague *KickOffLeagueCallerSession) ADMINROLE() ([32]byte, error) {
	return _KickOffLeague.Contract.ADMINROLE(&_KickOffLeague.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_KickOffLeague *KickOffLeagueCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _KickOffLeague.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_KickOffLeague *KickOffLeagueSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _KickOffLeague.Contract.DEFAULTADMINROLE(&_KickOffLeague.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_KickOffLeague *KickOffLeagueCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _KickOffLeague.Contract.DEFAULTADMINROLE(&_KickOffLeague.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_KickOffLeague *KickOffLeagueCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _KickOffLeague.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_KickOffLeague *KickOffLeagueSession) PAUSERROLE() ([32]byte, error) {
	return _KickOffLeague.Contract.PAUSERROLE(&_KickOffLeague.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_KickOffLeague *KickOffLeagueCallerSession) PAUSERROLE() ([32]byte, error) {
	return _KickOffLeague.Contract.PAUSERROLE(&_KickOffLeague.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_KickOffLeague *KickOffLeagueCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _KickOffLeague.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_KickOffLeague *KickOffLeagueSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _KickOffLeague.Contract.GetRoleAdmin(&_KickOffLeague.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_KickOffLeague *KickOffLeagueCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _KickOffLeague.Contract.GetRoleAdmin(&_KickOffLeague.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_KickOffLeague *KickOffLeagueCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _KickOffLeague.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_KickOffLeague *KickOffLeagueSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _KickOffLeague.Contract.GetRoleMember(&_KickOffLeague.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_KickOffLeague *KickOffLeagueCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _KickOffLeague.Contract.GetRoleMember(&_KickOffLeague.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_KickOffLeague *KickOffLeagueCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _KickOffLeague.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_KickOffLeague *KickOffLeagueSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _KickOffLeague.Contract.GetRoleMemberCount(&_KickOffLeague.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_KickOffLeague *KickOffLeagueCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _KickOffLeague.Contract.GetRoleMemberCount(&_KickOffLeague.CallOpts, role)
}

// GetTotalScore is a free data retrieval call binding the contract method 0xd283b3c5.
//
// Solidity: function getTotalScore(address register) view returns(uint8 score)
func (_KickOffLeague *KickOffLeagueCaller) GetTotalScore(opts *bind.CallOpts, register common.Address) (uint8, error) {
	var out []interface{}
	err := _KickOffLeague.contract.Call(opts, &out, "getTotalScore", register)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetTotalScore is a free data retrieval call binding the contract method 0xd283b3c5.
//
// Solidity: function getTotalScore(address register) view returns(uint8 score)
func (_KickOffLeague *KickOffLeagueSession) GetTotalScore(register common.Address) (uint8, error) {
	return _KickOffLeague.Contract.GetTotalScore(&_KickOffLeague.CallOpts, register)
}

// GetTotalScore is a free data retrieval call binding the contract method 0xd283b3c5.
//
// Solidity: function getTotalScore(address register) view returns(uint8 score)
func (_KickOffLeague *KickOffLeagueCallerSession) GetTotalScore(register common.Address) (uint8, error) {
	return _KickOffLeague.Contract.GetTotalScore(&_KickOffLeague.CallOpts, register)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_KickOffLeague *KickOffLeagueCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _KickOffLeague.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_KickOffLeague *KickOffLeagueSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _KickOffLeague.Contract.HasRole(&_KickOffLeague.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_KickOffLeague *KickOffLeagueCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _KickOffLeague.Contract.HasRole(&_KickOffLeague.CallOpts, role, account)
}

// LeagueInfo is a free data retrieval call binding the contract method 0x78680382.
//
// Solidity: function leagueInfo() view returns((uint8,uint8,uint8,string))
func (_KickOffLeague *KickOffLeagueCaller) LeagueInfo(opts *bind.CallOpts) (ILeagueLeagueInfo, error) {
	var out []interface{}
	err := _KickOffLeague.contract.Call(opts, &out, "leagueInfo")

	if err != nil {
		return *new(ILeagueLeagueInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(ILeagueLeagueInfo)).(*ILeagueLeagueInfo)

	return out0, err

}

// LeagueInfo is a free data retrieval call binding the contract method 0x78680382.
//
// Solidity: function leagueInfo() view returns((uint8,uint8,uint8,string))
func (_KickOffLeague *KickOffLeagueSession) LeagueInfo() (ILeagueLeagueInfo, error) {
	return _KickOffLeague.Contract.LeagueInfo(&_KickOffLeague.CallOpts)
}

// LeagueInfo is a free data retrieval call binding the contract method 0x78680382.
//
// Solidity: function leagueInfo() view returns((uint8,uint8,uint8,string))
func (_KickOffLeague *KickOffLeagueCallerSession) LeagueInfo() (ILeagueLeagueInfo, error) {
	return _KickOffLeague.Contract.LeagueInfo(&_KickOffLeague.CallOpts)
}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_KickOffLeague *KickOffLeagueCaller) OnERC721Received(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	var out []interface{}
	err := _KickOffLeague.contract.Call(opts, &out, "onERC721Received", arg0, arg1, arg2, arg3)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_KickOffLeague *KickOffLeagueSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	return _KickOffLeague.Contract.OnERC721Received(&_KickOffLeague.CallOpts, arg0, arg1, arg2, arg3)
}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_KickOffLeague *KickOffLeagueCallerSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	return _KickOffLeague.Contract.OnERC721Received(&_KickOffLeague.CallOpts, arg0, arg1, arg2, arg3)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_KickOffLeague *KickOffLeagueCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _KickOffLeague.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_KickOffLeague *KickOffLeagueSession) Owner() (common.Address, error) {
	return _KickOffLeague.Contract.Owner(&_KickOffLeague.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_KickOffLeague *KickOffLeagueCallerSession) Owner() (common.Address, error) {
	return _KickOffLeague.Contract.Owner(&_KickOffLeague.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_KickOffLeague *KickOffLeagueCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _KickOffLeague.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_KickOffLeague *KickOffLeagueSession) Paused() (bool, error) {
	return _KickOffLeague.Contract.Paused(&_KickOffLeague.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_KickOffLeague *KickOffLeagueCallerSession) Paused() (bool, error) {
	return _KickOffLeague.Contract.Paused(&_KickOffLeague.CallOpts)
}

// RaceInfo is a free data retrieval call binding the contract method 0xef8597fd.
//
// Solidity: function raceInfo(bytes32 raceId) view returns((uint8,uint32,bytes27))
func (_KickOffLeague *KickOffLeagueCaller) RaceInfo(opts *bind.CallOpts, raceId [32]byte) (ILeagueRace, error) {
	var out []interface{}
	err := _KickOffLeague.contract.Call(opts, &out, "raceInfo", raceId)

	if err != nil {
		return *new(ILeagueRace), err
	}

	out0 := *abi.ConvertType(out[0], new(ILeagueRace)).(*ILeagueRace)

	return out0, err

}

// RaceInfo is a free data retrieval call binding the contract method 0xef8597fd.
//
// Solidity: function raceInfo(bytes32 raceId) view returns((uint8,uint32,bytes27))
func (_KickOffLeague *KickOffLeagueSession) RaceInfo(raceId [32]byte) (ILeagueRace, error) {
	return _KickOffLeague.Contract.RaceInfo(&_KickOffLeague.CallOpts, raceId)
}

// RaceInfo is a free data retrieval call binding the contract method 0xef8597fd.
//
// Solidity: function raceInfo(bytes32 raceId) view returns((uint8,uint32,bytes27))
func (_KickOffLeague *KickOffLeagueCallerSession) RaceInfo(raceId [32]byte) (ILeagueRace, error) {
	return _KickOffLeague.Contract.RaceInfo(&_KickOffLeague.CallOpts, raceId)
}

// RegisteredSlot is a free data retrieval call binding the contract method 0x96fd6980.
//
// Solidity: function registeredSlot(address register, bytes32 raceId) view returns(uint8)
func (_KickOffLeague *KickOffLeagueCaller) RegisteredSlot(opts *bind.CallOpts, register common.Address, raceId [32]byte) (uint8, error) {
	var out []interface{}
	err := _KickOffLeague.contract.Call(opts, &out, "registeredSlot", register, raceId)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// RegisteredSlot is a free data retrieval call binding the contract method 0x96fd6980.
//
// Solidity: function registeredSlot(address register, bytes32 raceId) view returns(uint8)
func (_KickOffLeague *KickOffLeagueSession) RegisteredSlot(register common.Address, raceId [32]byte) (uint8, error) {
	return _KickOffLeague.Contract.RegisteredSlot(&_KickOffLeague.CallOpts, register, raceId)
}

// RegisteredSlot is a free data retrieval call binding the contract method 0x96fd6980.
//
// Solidity: function registeredSlot(address register, bytes32 raceId) view returns(uint8)
func (_KickOffLeague *KickOffLeagueCallerSession) RegisteredSlot(register common.Address, raceId [32]byte) (uint8, error) {
	return _KickOffLeague.Contract.RegisteredSlot(&_KickOffLeague.CallOpts, register, raceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_KickOffLeague *KickOffLeagueCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _KickOffLeague.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_KickOffLeague *KickOffLeagueSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _KickOffLeague.Contract.SupportsInterface(&_KickOffLeague.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_KickOffLeague *KickOffLeagueCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _KickOffLeague.Contract.SupportsInterface(&_KickOffLeague.CallOpts, interfaceId)
}

// AddRewardByMint is a paid mutator transaction binding the contract method 0xa4c1564a.
//
// Solidity: function addRewardByMint(bytes32 raceId, uint256 nftRewardId, uint256 winnerIndex, string tokenURI) returns()
func (_KickOffLeague *KickOffLeagueTransactor) AddRewardByMint(opts *bind.TransactOpts, raceId [32]byte, nftRewardId *big.Int, winnerIndex *big.Int, tokenURI string) (*types.Transaction, error) {
	return _KickOffLeague.contract.Transact(opts, "addRewardByMint", raceId, nftRewardId, winnerIndex, tokenURI)
}

// AddRewardByMint is a paid mutator transaction binding the contract method 0xa4c1564a.
//
// Solidity: function addRewardByMint(bytes32 raceId, uint256 nftRewardId, uint256 winnerIndex, string tokenURI) returns()
func (_KickOffLeague *KickOffLeagueSession) AddRewardByMint(raceId [32]byte, nftRewardId *big.Int, winnerIndex *big.Int, tokenURI string) (*types.Transaction, error) {
	return _KickOffLeague.Contract.AddRewardByMint(&_KickOffLeague.TransactOpts, raceId, nftRewardId, winnerIndex, tokenURI)
}

// AddRewardByMint is a paid mutator transaction binding the contract method 0xa4c1564a.
//
// Solidity: function addRewardByMint(bytes32 raceId, uint256 nftRewardId, uint256 winnerIndex, string tokenURI) returns()
func (_KickOffLeague *KickOffLeagueTransactorSession) AddRewardByMint(raceId [32]byte, nftRewardId *big.Int, winnerIndex *big.Int, tokenURI string) (*types.Transaction, error) {
	return _KickOffLeague.Contract.AddRewardByMint(&_KickOffLeague.TransactOpts, raceId, nftRewardId, winnerIndex, tokenURI)
}

// AddRewardByTransfer is a paid mutator transaction binding the contract method 0x21ad4e51.
//
// Solidity: function addRewardByTransfer(bytes32 raceId, uint256 nftRewardId, uint256 winnerIndex) returns()
func (_KickOffLeague *KickOffLeagueTransactor) AddRewardByTransfer(opts *bind.TransactOpts, raceId [32]byte, nftRewardId *big.Int, winnerIndex *big.Int) (*types.Transaction, error) {
	return _KickOffLeague.contract.Transact(opts, "addRewardByTransfer", raceId, nftRewardId, winnerIndex)
}

// AddRewardByTransfer is a paid mutator transaction binding the contract method 0x21ad4e51.
//
// Solidity: function addRewardByTransfer(bytes32 raceId, uint256 nftRewardId, uint256 winnerIndex) returns()
func (_KickOffLeague *KickOffLeagueSession) AddRewardByTransfer(raceId [32]byte, nftRewardId *big.Int, winnerIndex *big.Int) (*types.Transaction, error) {
	return _KickOffLeague.Contract.AddRewardByTransfer(&_KickOffLeague.TransactOpts, raceId, nftRewardId, winnerIndex)
}

// AddRewardByTransfer is a paid mutator transaction binding the contract method 0x21ad4e51.
//
// Solidity: function addRewardByTransfer(bytes32 raceId, uint256 nftRewardId, uint256 winnerIndex) returns()
func (_KickOffLeague *KickOffLeagueTransactorSession) AddRewardByTransfer(raceId [32]byte, nftRewardId *big.Int, winnerIndex *big.Int) (*types.Transaction, error) {
	return _KickOffLeague.Contract.AddRewardByTransfer(&_KickOffLeague.TransactOpts, raceId, nftRewardId, winnerIndex)
}

// CancelRace is a paid mutator transaction binding the contract method 0xc05c107d.
//
// Solidity: function cancelRace(bytes32 raceId) returns()
func (_KickOffLeague *KickOffLeagueTransactor) CancelRace(opts *bind.TransactOpts, raceId [32]byte) (*types.Transaction, error) {
	return _KickOffLeague.contract.Transact(opts, "cancelRace", raceId)
}

// CancelRace is a paid mutator transaction binding the contract method 0xc05c107d.
//
// Solidity: function cancelRace(bytes32 raceId) returns()
func (_KickOffLeague *KickOffLeagueSession) CancelRace(raceId [32]byte) (*types.Transaction, error) {
	return _KickOffLeague.Contract.CancelRace(&_KickOffLeague.TransactOpts, raceId)
}

// CancelRace is a paid mutator transaction binding the contract method 0xc05c107d.
//
// Solidity: function cancelRace(bytes32 raceId) returns()
func (_KickOffLeague *KickOffLeagueTransactorSession) CancelRace(raceId [32]byte) (*types.Transaction, error) {
	return _KickOffLeague.Contract.CancelRace(&_KickOffLeague.TransactOpts, raceId)
}

// CreateRace is a paid mutator transaction binding the contract method 0x928e03da.
//
// Solidity: function createRace(uint8 noSlot, uint32 startAt) returns(bytes32)
func (_KickOffLeague *KickOffLeagueTransactor) CreateRace(opts *bind.TransactOpts, noSlot uint8, startAt uint32) (*types.Transaction, error) {
	return _KickOffLeague.contract.Transact(opts, "createRace", noSlot, startAt)
}

// CreateRace is a paid mutator transaction binding the contract method 0x928e03da.
//
// Solidity: function createRace(uint8 noSlot, uint32 startAt) returns(bytes32)
func (_KickOffLeague *KickOffLeagueSession) CreateRace(noSlot uint8, startAt uint32) (*types.Transaction, error) {
	return _KickOffLeague.Contract.CreateRace(&_KickOffLeague.TransactOpts, noSlot, startAt)
}

// CreateRace is a paid mutator transaction binding the contract method 0x928e03da.
//
// Solidity: function createRace(uint8 noSlot, uint32 startAt) returns(bytes32)
func (_KickOffLeague *KickOffLeagueTransactorSession) CreateRace(noSlot uint8, startAt uint32) (*types.Transaction, error) {
	return _KickOffLeague.Contract.CreateRace(&_KickOffLeague.TransactOpts, noSlot, startAt)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_KickOffLeague *KickOffLeagueTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _KickOffLeague.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_KickOffLeague *KickOffLeagueSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _KickOffLeague.Contract.GrantRole(&_KickOffLeague.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_KickOffLeague *KickOffLeagueTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _KickOffLeague.Contract.GrantRole(&_KickOffLeague.TransactOpts, role, account)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_KickOffLeague *KickOffLeagueTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KickOffLeague.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_KickOffLeague *KickOffLeagueSession) Pause() (*types.Transaction, error) {
	return _KickOffLeague.Contract.Pause(&_KickOffLeague.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_KickOffLeague *KickOffLeagueTransactorSession) Pause() (*types.Transaction, error) {
	return _KickOffLeague.Contract.Pause(&_KickOffLeague.TransactOpts)
}

// ReceiveReward is a paid mutator transaction binding the contract method 0x93eb521b.
//
// Solidity: function receiveReward(uint8 slotId, bytes32 raceId) returns()
func (_KickOffLeague *KickOffLeagueTransactor) ReceiveReward(opts *bind.TransactOpts, slotId uint8, raceId [32]byte) (*types.Transaction, error) {
	return _KickOffLeague.contract.Transact(opts, "receiveReward", slotId, raceId)
}

// ReceiveReward is a paid mutator transaction binding the contract method 0x93eb521b.
//
// Solidity: function receiveReward(uint8 slotId, bytes32 raceId) returns()
func (_KickOffLeague *KickOffLeagueSession) ReceiveReward(slotId uint8, raceId [32]byte) (*types.Transaction, error) {
	return _KickOffLeague.Contract.ReceiveReward(&_KickOffLeague.TransactOpts, slotId, raceId)
}

// ReceiveReward is a paid mutator transaction binding the contract method 0x93eb521b.
//
// Solidity: function receiveReward(uint8 slotId, bytes32 raceId) returns()
func (_KickOffLeague *KickOffLeagueTransactorSession) ReceiveReward(slotId uint8, raceId [32]byte) (*types.Transaction, error) {
	return _KickOffLeague.Contract.ReceiveReward(&_KickOffLeague.TransactOpts, slotId, raceId)
}

// RegisterRace is a paid mutator transaction binding the contract method 0x1e621ebe.
//
// Solidity: function registerRace(uint8 slotId, bytes32 raceId) returns()
func (_KickOffLeague *KickOffLeagueTransactor) RegisterRace(opts *bind.TransactOpts, slotId uint8, raceId [32]byte) (*types.Transaction, error) {
	return _KickOffLeague.contract.Transact(opts, "registerRace", slotId, raceId)
}

// RegisterRace is a paid mutator transaction binding the contract method 0x1e621ebe.
//
// Solidity: function registerRace(uint8 slotId, bytes32 raceId) returns()
func (_KickOffLeague *KickOffLeagueSession) RegisterRace(slotId uint8, raceId [32]byte) (*types.Transaction, error) {
	return _KickOffLeague.Contract.RegisterRace(&_KickOffLeague.TransactOpts, slotId, raceId)
}

// RegisterRace is a paid mutator transaction binding the contract method 0x1e621ebe.
//
// Solidity: function registerRace(uint8 slotId, bytes32 raceId) returns()
func (_KickOffLeague *KickOffLeagueTransactorSession) RegisterRace(slotId uint8, raceId [32]byte) (*types.Transaction, error) {
	return _KickOffLeague.Contract.RegisterRace(&_KickOffLeague.TransactOpts, slotId, raceId)
}

// RemoveReward is a paid mutator transaction binding the contract method 0x70e45679.
//
// Solidity: function removeReward(bytes32 raceId, uint256 winnerIndex) returns()
func (_KickOffLeague *KickOffLeagueTransactor) RemoveReward(opts *bind.TransactOpts, raceId [32]byte, winnerIndex *big.Int) (*types.Transaction, error) {
	return _KickOffLeague.contract.Transact(opts, "removeReward", raceId, winnerIndex)
}

// RemoveReward is a paid mutator transaction binding the contract method 0x70e45679.
//
// Solidity: function removeReward(bytes32 raceId, uint256 winnerIndex) returns()
func (_KickOffLeague *KickOffLeagueSession) RemoveReward(raceId [32]byte, winnerIndex *big.Int) (*types.Transaction, error) {
	return _KickOffLeague.Contract.RemoveReward(&_KickOffLeague.TransactOpts, raceId, winnerIndex)
}

// RemoveReward is a paid mutator transaction binding the contract method 0x70e45679.
//
// Solidity: function removeReward(bytes32 raceId, uint256 winnerIndex) returns()
func (_KickOffLeague *KickOffLeagueTransactorSession) RemoveReward(raceId [32]byte, winnerIndex *big.Int) (*types.Transaction, error) {
	return _KickOffLeague.Contract.RemoveReward(&_KickOffLeague.TransactOpts, raceId, winnerIndex)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_KickOffLeague *KickOffLeagueTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KickOffLeague.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_KickOffLeague *KickOffLeagueSession) RenounceOwnership() (*types.Transaction, error) {
	return _KickOffLeague.Contract.RenounceOwnership(&_KickOffLeague.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_KickOffLeague *KickOffLeagueTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _KickOffLeague.Contract.RenounceOwnership(&_KickOffLeague.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_KickOffLeague *KickOffLeagueTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _KickOffLeague.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_KickOffLeague *KickOffLeagueSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _KickOffLeague.Contract.RenounceRole(&_KickOffLeague.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_KickOffLeague *KickOffLeagueTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _KickOffLeague.Contract.RenounceRole(&_KickOffLeague.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_KickOffLeague *KickOffLeagueTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _KickOffLeague.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_KickOffLeague *KickOffLeagueSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _KickOffLeague.Contract.RevokeRole(&_KickOffLeague.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_KickOffLeague *KickOffLeagueTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _KickOffLeague.Contract.RevokeRole(&_KickOffLeague.TransactOpts, role, account)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_KickOffLeague *KickOffLeagueTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _KickOffLeague.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_KickOffLeague *KickOffLeagueSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _KickOffLeague.Contract.TransferOwnership(&_KickOffLeague.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_KickOffLeague *KickOffLeagueTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _KickOffLeague.Contract.TransferOwnership(&_KickOffLeague.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_KickOffLeague *KickOffLeagueTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KickOffLeague.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_KickOffLeague *KickOffLeagueSession) Unpause() (*types.Transaction, error) {
	return _KickOffLeague.Contract.Unpause(&_KickOffLeague.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_KickOffLeague *KickOffLeagueTransactorSession) Unpause() (*types.Transaction, error) {
	return _KickOffLeague.Contract.Unpause(&_KickOffLeague.TransactOpts)
}

// UpdateRaceResult is a paid mutator transaction binding the contract method 0xdd0b3778.
//
// Solidity: function updateRaceResult(bytes32 raceId, bytes27 result) returns()
func (_KickOffLeague *KickOffLeagueTransactor) UpdateRaceResult(opts *bind.TransactOpts, raceId [32]byte, result [27]byte) (*types.Transaction, error) {
	return _KickOffLeague.contract.Transact(opts, "updateRaceResult", raceId, result)
}

// UpdateRaceResult is a paid mutator transaction binding the contract method 0xdd0b3778.
//
// Solidity: function updateRaceResult(bytes32 raceId, bytes27 result) returns()
func (_KickOffLeague *KickOffLeagueSession) UpdateRaceResult(raceId [32]byte, result [27]byte) (*types.Transaction, error) {
	return _KickOffLeague.Contract.UpdateRaceResult(&_KickOffLeague.TransactOpts, raceId, result)
}

// UpdateRaceResult is a paid mutator transaction binding the contract method 0xdd0b3778.
//
// Solidity: function updateRaceResult(bytes32 raceId, bytes27 result) returns()
func (_KickOffLeague *KickOffLeagueTransactorSession) UpdateRaceResult(raceId [32]byte, result [27]byte) (*types.Transaction, error) {
	return _KickOffLeague.Contract.UpdateRaceResult(&_KickOffLeague.TransactOpts, raceId, result)
}

// KickOffLeagueOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the KickOffLeague contract.
type KickOffLeagueOwnershipTransferredIterator struct {
	Event *KickOffLeagueOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KickOffLeagueOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KickOffLeagueOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KickOffLeagueOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KickOffLeagueOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KickOffLeagueOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KickOffLeagueOwnershipTransferred represents a OwnershipTransferred event raised by the KickOffLeague contract.
type KickOffLeagueOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_KickOffLeague *KickOffLeagueFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*KickOffLeagueOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _KickOffLeague.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &KickOffLeagueOwnershipTransferredIterator{contract: _KickOffLeague.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_KickOffLeague *KickOffLeagueFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *KickOffLeagueOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _KickOffLeague.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KickOffLeagueOwnershipTransferred)
				if err := _KickOffLeague.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_KickOffLeague *KickOffLeagueFilterer) ParseOwnershipTransferred(log types.Log) (*KickOffLeagueOwnershipTransferred, error) {
	event := new(KickOffLeagueOwnershipTransferred)
	if err := _KickOffLeague.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KickOffLeaguePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the KickOffLeague contract.
type KickOffLeaguePausedIterator struct {
	Event *KickOffLeaguePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KickOffLeaguePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KickOffLeaguePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KickOffLeaguePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KickOffLeaguePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KickOffLeaguePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KickOffLeaguePaused represents a Paused event raised by the KickOffLeague contract.
type KickOffLeaguePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_KickOffLeague *KickOffLeagueFilterer) FilterPaused(opts *bind.FilterOpts) (*KickOffLeaguePausedIterator, error) {

	logs, sub, err := _KickOffLeague.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &KickOffLeaguePausedIterator{contract: _KickOffLeague.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_KickOffLeague *KickOffLeagueFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *KickOffLeaguePaused) (event.Subscription, error) {

	logs, sub, err := _KickOffLeague.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KickOffLeaguePaused)
				if err := _KickOffLeague.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_KickOffLeague *KickOffLeagueFilterer) ParsePaused(log types.Log) (*KickOffLeaguePaused, error) {
	event := new(KickOffLeaguePaused)
	if err := _KickOffLeague.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KickOffLeagueRaceCancelledIterator is returned from FilterRaceCancelled and is used to iterate over the raw logs and unpacked data for RaceCancelled events raised by the KickOffLeague contract.
type KickOffLeagueRaceCancelledIterator struct {
	Event *KickOffLeagueRaceCancelled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KickOffLeagueRaceCancelledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KickOffLeagueRaceCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KickOffLeagueRaceCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KickOffLeagueRaceCancelledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KickOffLeagueRaceCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KickOffLeagueRaceCancelled represents a RaceCancelled event raised by the KickOffLeague contract.
type KickOffLeagueRaceCancelled struct {
	Id  [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRaceCancelled is a free log retrieval operation binding the contract event 0x3f3669b11af9b00fb2a95f8ded36a79a2e1d5374efbc5ec6b2b5b96ceaf9ac6a.
//
// Solidity: event RaceCancelled(bytes32 id)
func (_KickOffLeague *KickOffLeagueFilterer) FilterRaceCancelled(opts *bind.FilterOpts) (*KickOffLeagueRaceCancelledIterator, error) {

	logs, sub, err := _KickOffLeague.contract.FilterLogs(opts, "RaceCancelled")
	if err != nil {
		return nil, err
	}
	return &KickOffLeagueRaceCancelledIterator{contract: _KickOffLeague.contract, event: "RaceCancelled", logs: logs, sub: sub}, nil
}

// WatchRaceCancelled is a free log subscription operation binding the contract event 0x3f3669b11af9b00fb2a95f8ded36a79a2e1d5374efbc5ec6b2b5b96ceaf9ac6a.
//
// Solidity: event RaceCancelled(bytes32 id)
func (_KickOffLeague *KickOffLeagueFilterer) WatchRaceCancelled(opts *bind.WatchOpts, sink chan<- *KickOffLeagueRaceCancelled) (event.Subscription, error) {

	logs, sub, err := _KickOffLeague.contract.WatchLogs(opts, "RaceCancelled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KickOffLeagueRaceCancelled)
				if err := _KickOffLeague.contract.UnpackLog(event, "RaceCancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRaceCancelled is a log parse operation binding the contract event 0x3f3669b11af9b00fb2a95f8ded36a79a2e1d5374efbc5ec6b2b5b96ceaf9ac6a.
//
// Solidity: event RaceCancelled(bytes32 id)
func (_KickOffLeague *KickOffLeagueFilterer) ParseRaceCancelled(log types.Log) (*KickOffLeagueRaceCancelled, error) {
	event := new(KickOffLeagueRaceCancelled)
	if err := _KickOffLeague.contract.UnpackLog(event, "RaceCancelled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KickOffLeagueRaceCreatedIterator is returned from FilterRaceCreated and is used to iterate over the raw logs and unpacked data for RaceCreated events raised by the KickOffLeague contract.
type KickOffLeagueRaceCreatedIterator struct {
	Event *KickOffLeagueRaceCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KickOffLeagueRaceCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KickOffLeagueRaceCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KickOffLeagueRaceCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KickOffLeagueRaceCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KickOffLeagueRaceCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KickOffLeagueRaceCreated represents a RaceCreated event raised by the KickOffLeague contract.
type KickOffLeagueRaceCreated struct {
	NoSlot  uint8
	RaceNo  uint8
	StartAt uint32
	Id      [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRaceCreated is a free log retrieval operation binding the contract event 0x58e30581b52e563d6f294b197724e473591cf7668760f3bae9a2678502011536.
//
// Solidity: event RaceCreated(uint8 noSlot, uint8 raceNo, uint32 startAt, bytes32 id)
func (_KickOffLeague *KickOffLeagueFilterer) FilterRaceCreated(opts *bind.FilterOpts) (*KickOffLeagueRaceCreatedIterator, error) {

	logs, sub, err := _KickOffLeague.contract.FilterLogs(opts, "RaceCreated")
	if err != nil {
		return nil, err
	}
	return &KickOffLeagueRaceCreatedIterator{contract: _KickOffLeague.contract, event: "RaceCreated", logs: logs, sub: sub}, nil
}

// WatchRaceCreated is a free log subscription operation binding the contract event 0x58e30581b52e563d6f294b197724e473591cf7668760f3bae9a2678502011536.
//
// Solidity: event RaceCreated(uint8 noSlot, uint8 raceNo, uint32 startAt, bytes32 id)
func (_KickOffLeague *KickOffLeagueFilterer) WatchRaceCreated(opts *bind.WatchOpts, sink chan<- *KickOffLeagueRaceCreated) (event.Subscription, error) {

	logs, sub, err := _KickOffLeague.contract.WatchLogs(opts, "RaceCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KickOffLeagueRaceCreated)
				if err := _KickOffLeague.contract.UnpackLog(event, "RaceCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRaceCreated is a log parse operation binding the contract event 0x58e30581b52e563d6f294b197724e473591cf7668760f3bae9a2678502011536.
//
// Solidity: event RaceCreated(uint8 noSlot, uint8 raceNo, uint32 startAt, bytes32 id)
func (_KickOffLeague *KickOffLeagueFilterer) ParseRaceCreated(log types.Log) (*KickOffLeagueRaceCreated, error) {
	event := new(KickOffLeagueRaceCreated)
	if err := _KickOffLeague.contract.UnpackLog(event, "RaceCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KickOffLeagueRaceResultUpdatedIterator is returned from FilterRaceResultUpdated and is used to iterate over the raw logs and unpacked data for RaceResultUpdated events raised by the KickOffLeague contract.
type KickOffLeagueRaceResultUpdatedIterator struct {
	Event *KickOffLeagueRaceResultUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KickOffLeagueRaceResultUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KickOffLeagueRaceResultUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KickOffLeagueRaceResultUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KickOffLeagueRaceResultUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KickOffLeagueRaceResultUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KickOffLeagueRaceResultUpdated represents a RaceResultUpdated event raised by the KickOffLeague contract.
type KickOffLeagueRaceResultUpdated struct {
	Id     [32]byte
	Result [27]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRaceResultUpdated is a free log retrieval operation binding the contract event 0x2ab6bf279c23ac56ddfab0e48cd46e6576b30742d689be7cabf12d8f279c7870.
//
// Solidity: event RaceResultUpdated(bytes32 id, bytes27 result)
func (_KickOffLeague *KickOffLeagueFilterer) FilterRaceResultUpdated(opts *bind.FilterOpts) (*KickOffLeagueRaceResultUpdatedIterator, error) {

	logs, sub, err := _KickOffLeague.contract.FilterLogs(opts, "RaceResultUpdated")
	if err != nil {
		return nil, err
	}
	return &KickOffLeagueRaceResultUpdatedIterator{contract: _KickOffLeague.contract, event: "RaceResultUpdated", logs: logs, sub: sub}, nil
}

// WatchRaceResultUpdated is a free log subscription operation binding the contract event 0x2ab6bf279c23ac56ddfab0e48cd46e6576b30742d689be7cabf12d8f279c7870.
//
// Solidity: event RaceResultUpdated(bytes32 id, bytes27 result)
func (_KickOffLeague *KickOffLeagueFilterer) WatchRaceResultUpdated(opts *bind.WatchOpts, sink chan<- *KickOffLeagueRaceResultUpdated) (event.Subscription, error) {

	logs, sub, err := _KickOffLeague.contract.WatchLogs(opts, "RaceResultUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KickOffLeagueRaceResultUpdated)
				if err := _KickOffLeague.contract.UnpackLog(event, "RaceResultUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRaceResultUpdated is a log parse operation binding the contract event 0x2ab6bf279c23ac56ddfab0e48cd46e6576b30742d689be7cabf12d8f279c7870.
//
// Solidity: event RaceResultUpdated(bytes32 id, bytes27 result)
func (_KickOffLeague *KickOffLeagueFilterer) ParseRaceResultUpdated(log types.Log) (*KickOffLeagueRaceResultUpdated, error) {
	event := new(KickOffLeagueRaceResultUpdated)
	if err := _KickOffLeague.contract.UnpackLog(event, "RaceResultUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KickOffLeagueRegisteredIterator is returned from FilterRegistered and is used to iterate over the raw logs and unpacked data for Registered events raised by the KickOffLeague contract.
type KickOffLeagueRegisteredIterator struct {
	Event *KickOffLeagueRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KickOffLeagueRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KickOffLeagueRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KickOffLeagueRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KickOffLeagueRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KickOffLeagueRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KickOffLeagueRegistered represents a Registered event raised by the KickOffLeague contract.
type KickOffLeagueRegistered struct {
	SlotId      uint8
	Participant common.Address
	RaceId      [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRegistered is a free log retrieval operation binding the contract event 0xad76e1cb5a0536a10bd2c282409cd1301bc63cff1eeed6b269642f1c24eaaa8f.
//
// Solidity: event Registered(uint8 slotId, address participant, bytes32 raceId)
func (_KickOffLeague *KickOffLeagueFilterer) FilterRegistered(opts *bind.FilterOpts) (*KickOffLeagueRegisteredIterator, error) {

	logs, sub, err := _KickOffLeague.contract.FilterLogs(opts, "Registered")
	if err != nil {
		return nil, err
	}
	return &KickOffLeagueRegisteredIterator{contract: _KickOffLeague.contract, event: "Registered", logs: logs, sub: sub}, nil
}

// WatchRegistered is a free log subscription operation binding the contract event 0xad76e1cb5a0536a10bd2c282409cd1301bc63cff1eeed6b269642f1c24eaaa8f.
//
// Solidity: event Registered(uint8 slotId, address participant, bytes32 raceId)
func (_KickOffLeague *KickOffLeagueFilterer) WatchRegistered(opts *bind.WatchOpts, sink chan<- *KickOffLeagueRegistered) (event.Subscription, error) {

	logs, sub, err := _KickOffLeague.contract.WatchLogs(opts, "Registered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KickOffLeagueRegistered)
				if err := _KickOffLeague.contract.UnpackLog(event, "Registered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistered is a log parse operation binding the contract event 0xad76e1cb5a0536a10bd2c282409cd1301bc63cff1eeed6b269642f1c24eaaa8f.
//
// Solidity: event Registered(uint8 slotId, address participant, bytes32 raceId)
func (_KickOffLeague *KickOffLeagueFilterer) ParseRegistered(log types.Log) (*KickOffLeagueRegistered, error) {
	event := new(KickOffLeagueRegistered)
	if err := _KickOffLeague.contract.UnpackLog(event, "Registered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KickOffLeagueRewardAddedIterator is returned from FilterRewardAdded and is used to iterate over the raw logs and unpacked data for RewardAdded events raised by the KickOffLeague contract.
type KickOffLeagueRewardAddedIterator struct {
	Event *KickOffLeagueRewardAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KickOffLeagueRewardAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KickOffLeagueRewardAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KickOffLeagueRewardAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KickOffLeagueRewardAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KickOffLeagueRewardAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KickOffLeagueRewardAdded represents a RewardAdded event raised by the KickOffLeague contract.
type KickOffLeagueRewardAdded struct {
	RaceId      [32]byte
	NftRewardId *big.Int
	WinnerIndex *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRewardAdded is a free log retrieval operation binding the contract event 0xa28d22473b1a2f01a0708abe09b0bf3b7e1b0f30b0f759e2948b55c8e6fdd6e3.
//
// Solidity: event RewardAdded(bytes32 raceId, uint256 nftRewardId, uint256 winnerIndex)
func (_KickOffLeague *KickOffLeagueFilterer) FilterRewardAdded(opts *bind.FilterOpts) (*KickOffLeagueRewardAddedIterator, error) {

	logs, sub, err := _KickOffLeague.contract.FilterLogs(opts, "RewardAdded")
	if err != nil {
		return nil, err
	}
	return &KickOffLeagueRewardAddedIterator{contract: _KickOffLeague.contract, event: "RewardAdded", logs: logs, sub: sub}, nil
}

// WatchRewardAdded is a free log subscription operation binding the contract event 0xa28d22473b1a2f01a0708abe09b0bf3b7e1b0f30b0f759e2948b55c8e6fdd6e3.
//
// Solidity: event RewardAdded(bytes32 raceId, uint256 nftRewardId, uint256 winnerIndex)
func (_KickOffLeague *KickOffLeagueFilterer) WatchRewardAdded(opts *bind.WatchOpts, sink chan<- *KickOffLeagueRewardAdded) (event.Subscription, error) {

	logs, sub, err := _KickOffLeague.contract.WatchLogs(opts, "RewardAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KickOffLeagueRewardAdded)
				if err := _KickOffLeague.contract.UnpackLog(event, "RewardAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardAdded is a log parse operation binding the contract event 0xa28d22473b1a2f01a0708abe09b0bf3b7e1b0f30b0f759e2948b55c8e6fdd6e3.
//
// Solidity: event RewardAdded(bytes32 raceId, uint256 nftRewardId, uint256 winnerIndex)
func (_KickOffLeague *KickOffLeagueFilterer) ParseRewardAdded(log types.Log) (*KickOffLeagueRewardAdded, error) {
	event := new(KickOffLeagueRewardAdded)
	if err := _KickOffLeague.contract.UnpackLog(event, "RewardAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KickOffLeagueRewardReceivedIterator is returned from FilterRewardReceived and is used to iterate over the raw logs and unpacked data for RewardReceived events raised by the KickOffLeague contract.
type KickOffLeagueRewardReceivedIterator struct {
	Event *KickOffLeagueRewardReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KickOffLeagueRewardReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KickOffLeagueRewardReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KickOffLeagueRewardReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KickOffLeagueRewardReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KickOffLeagueRewardReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KickOffLeagueRewardReceived represents a RewardReceived event raised by the KickOffLeague contract.
type KickOffLeagueRewardReceived struct {
	SlotId      uint8
	RaceId      [32]byte
	NftRewardId *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRewardReceived is a free log retrieval operation binding the contract event 0x3b670b8422a85cdcd1698f6a9a9321b2d1dffbd3ffeafcba3be10eeb80096310.
//
// Solidity: event RewardReceived(uint8 slotId, bytes32 raceId, uint256 nftRewardId)
func (_KickOffLeague *KickOffLeagueFilterer) FilterRewardReceived(opts *bind.FilterOpts) (*KickOffLeagueRewardReceivedIterator, error) {

	logs, sub, err := _KickOffLeague.contract.FilterLogs(opts, "RewardReceived")
	if err != nil {
		return nil, err
	}
	return &KickOffLeagueRewardReceivedIterator{contract: _KickOffLeague.contract, event: "RewardReceived", logs: logs, sub: sub}, nil
}

// WatchRewardReceived is a free log subscription operation binding the contract event 0x3b670b8422a85cdcd1698f6a9a9321b2d1dffbd3ffeafcba3be10eeb80096310.
//
// Solidity: event RewardReceived(uint8 slotId, bytes32 raceId, uint256 nftRewardId)
func (_KickOffLeague *KickOffLeagueFilterer) WatchRewardReceived(opts *bind.WatchOpts, sink chan<- *KickOffLeagueRewardReceived) (event.Subscription, error) {

	logs, sub, err := _KickOffLeague.contract.WatchLogs(opts, "RewardReceived")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KickOffLeagueRewardReceived)
				if err := _KickOffLeague.contract.UnpackLog(event, "RewardReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardReceived is a log parse operation binding the contract event 0x3b670b8422a85cdcd1698f6a9a9321b2d1dffbd3ffeafcba3be10eeb80096310.
//
// Solidity: event RewardReceived(uint8 slotId, bytes32 raceId, uint256 nftRewardId)
func (_KickOffLeague *KickOffLeagueFilterer) ParseRewardReceived(log types.Log) (*KickOffLeagueRewardReceived, error) {
	event := new(KickOffLeagueRewardReceived)
	if err := _KickOffLeague.contract.UnpackLog(event, "RewardReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KickOffLeagueRewardRemovedIterator is returned from FilterRewardRemoved and is used to iterate over the raw logs and unpacked data for RewardRemoved events raised by the KickOffLeague contract.
type KickOffLeagueRewardRemovedIterator struct {
	Event *KickOffLeagueRewardRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KickOffLeagueRewardRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KickOffLeagueRewardRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KickOffLeagueRewardRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KickOffLeagueRewardRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KickOffLeagueRewardRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KickOffLeagueRewardRemoved represents a RewardRemoved event raised by the KickOffLeague contract.
type KickOffLeagueRewardRemoved struct {
	RaceId      [32]byte
	NftRewardId *big.Int
	WinnerIndex *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRewardRemoved is a free log retrieval operation binding the contract event 0xefba7d4f0912cb3bf75c07898c0969e76416cc35a7046ba3c04902f3f3f607f3.
//
// Solidity: event RewardRemoved(bytes32 raceId, uint256 nftRewardId, uint256 winnerIndex)
func (_KickOffLeague *KickOffLeagueFilterer) FilterRewardRemoved(opts *bind.FilterOpts) (*KickOffLeagueRewardRemovedIterator, error) {

	logs, sub, err := _KickOffLeague.contract.FilterLogs(opts, "RewardRemoved")
	if err != nil {
		return nil, err
	}
	return &KickOffLeagueRewardRemovedIterator{contract: _KickOffLeague.contract, event: "RewardRemoved", logs: logs, sub: sub}, nil
}

// WatchRewardRemoved is a free log subscription operation binding the contract event 0xefba7d4f0912cb3bf75c07898c0969e76416cc35a7046ba3c04902f3f3f607f3.
//
// Solidity: event RewardRemoved(bytes32 raceId, uint256 nftRewardId, uint256 winnerIndex)
func (_KickOffLeague *KickOffLeagueFilterer) WatchRewardRemoved(opts *bind.WatchOpts, sink chan<- *KickOffLeagueRewardRemoved) (event.Subscription, error) {

	logs, sub, err := _KickOffLeague.contract.WatchLogs(opts, "RewardRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KickOffLeagueRewardRemoved)
				if err := _KickOffLeague.contract.UnpackLog(event, "RewardRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardRemoved is a log parse operation binding the contract event 0xefba7d4f0912cb3bf75c07898c0969e76416cc35a7046ba3c04902f3f3f607f3.
//
// Solidity: event RewardRemoved(bytes32 raceId, uint256 nftRewardId, uint256 winnerIndex)
func (_KickOffLeague *KickOffLeagueFilterer) ParseRewardRemoved(log types.Log) (*KickOffLeagueRewardRemoved, error) {
	event := new(KickOffLeagueRewardRemoved)
	if err := _KickOffLeague.contract.UnpackLog(event, "RewardRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KickOffLeagueRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the KickOffLeague contract.
type KickOffLeagueRoleAdminChangedIterator struct {
	Event *KickOffLeagueRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KickOffLeagueRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KickOffLeagueRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KickOffLeagueRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KickOffLeagueRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KickOffLeagueRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KickOffLeagueRoleAdminChanged represents a RoleAdminChanged event raised by the KickOffLeague contract.
type KickOffLeagueRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_KickOffLeague *KickOffLeagueFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*KickOffLeagueRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _KickOffLeague.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &KickOffLeagueRoleAdminChangedIterator{contract: _KickOffLeague.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_KickOffLeague *KickOffLeagueFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *KickOffLeagueRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _KickOffLeague.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KickOffLeagueRoleAdminChanged)
				if err := _KickOffLeague.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_KickOffLeague *KickOffLeagueFilterer) ParseRoleAdminChanged(log types.Log) (*KickOffLeagueRoleAdminChanged, error) {
	event := new(KickOffLeagueRoleAdminChanged)
	if err := _KickOffLeague.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KickOffLeagueRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the KickOffLeague contract.
type KickOffLeagueRoleGrantedIterator struct {
	Event *KickOffLeagueRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KickOffLeagueRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KickOffLeagueRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KickOffLeagueRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KickOffLeagueRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KickOffLeagueRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KickOffLeagueRoleGranted represents a RoleGranted event raised by the KickOffLeague contract.
type KickOffLeagueRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_KickOffLeague *KickOffLeagueFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*KickOffLeagueRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _KickOffLeague.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &KickOffLeagueRoleGrantedIterator{contract: _KickOffLeague.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_KickOffLeague *KickOffLeagueFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *KickOffLeagueRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _KickOffLeague.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KickOffLeagueRoleGranted)
				if err := _KickOffLeague.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_KickOffLeague *KickOffLeagueFilterer) ParseRoleGranted(log types.Log) (*KickOffLeagueRoleGranted, error) {
	event := new(KickOffLeagueRoleGranted)
	if err := _KickOffLeague.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KickOffLeagueRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the KickOffLeague contract.
type KickOffLeagueRoleRevokedIterator struct {
	Event *KickOffLeagueRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KickOffLeagueRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KickOffLeagueRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KickOffLeagueRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KickOffLeagueRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KickOffLeagueRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KickOffLeagueRoleRevoked represents a RoleRevoked event raised by the KickOffLeague contract.
type KickOffLeagueRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_KickOffLeague *KickOffLeagueFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*KickOffLeagueRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _KickOffLeague.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &KickOffLeagueRoleRevokedIterator{contract: _KickOffLeague.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_KickOffLeague *KickOffLeagueFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *KickOffLeagueRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _KickOffLeague.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KickOffLeagueRoleRevoked)
				if err := _KickOffLeague.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_KickOffLeague *KickOffLeagueFilterer) ParseRoleRevoked(log types.Log) (*KickOffLeagueRoleRevoked, error) {
	event := new(KickOffLeagueRoleRevoked)
	if err := _KickOffLeague.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KickOffLeagueUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the KickOffLeague contract.
type KickOffLeagueUnpausedIterator struct {
	Event *KickOffLeagueUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KickOffLeagueUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KickOffLeagueUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KickOffLeagueUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KickOffLeagueUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KickOffLeagueUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KickOffLeagueUnpaused represents a Unpaused event raised by the KickOffLeague contract.
type KickOffLeagueUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_KickOffLeague *KickOffLeagueFilterer) FilterUnpaused(opts *bind.FilterOpts) (*KickOffLeagueUnpausedIterator, error) {

	logs, sub, err := _KickOffLeague.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &KickOffLeagueUnpausedIterator{contract: _KickOffLeague.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_KickOffLeague *KickOffLeagueFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *KickOffLeagueUnpaused) (event.Subscription, error) {

	logs, sub, err := _KickOffLeague.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KickOffLeagueUnpaused)
				if err := _KickOffLeague.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_KickOffLeague *KickOffLeagueFilterer) ParseUnpaused(log types.Log) (*KickOffLeagueUnpaused, error) {
	event := new(KickOffLeagueUnpaused)
	if err := _KickOffLeague.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
