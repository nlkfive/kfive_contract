// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package KFIVE

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// KFIVEMetaData contains all meta data concerning the KFIVE contract.
var KFIVEMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"offchain\",\"type\":\"bytes32\"}],\"name\":\"__issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"offchain\",\"type\":\"bytes32\"}],\"name\":\"__redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"offchain\",\"type\":\"bytes32\"}],\"name\":\"__transferByAdmin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxIssuingTokenPerTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalIssuingToken\",\"type\":\"uint256\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxIssuingTokenPerTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalIssuingToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingIssuingToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"offchain\",\"type\":\"bytes32\"}],\"name\":\"transferByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"offchain\",\"type\":\"bytes32\"}],\"name\":\"issue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"offchain\",\"type\":\"bytes32\"}],\"name\":\"issueByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"offchain\",\"type\":\"bytes32\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040518060400160405280600581526020017f4b464956450000000000000000000000000000000000000000000000000000008152506040518060400160405280600581526020017f4b46495645000000000000000000000000000000000000000000000000000000815250600a620000a0620000946200018360201b60201c565b6200018b60201b60201c565b8260069080519060200190620000b8929190620004bf565b508160059080519060200190620000d1929190620004bf565b5080600460006101000a81548160ff021916908360ff1602179055505050506000600760006101000a81548160ff02191690831515021790555033600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200017d33620001616200024f60201b60201c565b620001716200024f60201b60201c565b6200025e60201b60201c565b62000849565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600066265e8af3930000905090565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620002f1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002e8906200069b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562000364576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200035b9062000635565b60405180910390fd5b80821115620003aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003a19062000679565b60405180910390fd5b620003ba6200024f60201b60201c565b811115620003ff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003f69062000657565b60405180910390fd5b6200040962000550565b600181600001901515908115158152505082816020018181525050818160400181815250508181606001818152505080600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160010155604082015181600201556060820151816003015590505050505050565b828054620004cd90620006ce565b90600052602060002090601f016020900481019282620004f157600085556200053d565b82601f106200050c57805160ff19168380011785556200053d565b828001600101855582156200053d579182015b828111156200053c5782518255916020019190600101906200051f565b5b5090506200054c91906200057a565b5090565b60405180608001604052806000151581526020016000815260200160008152602001600081525090565b5b80821115620005955760008160009055506001016200057b565b5090565b6000620005a8600e83620006bd565b9150620005b58262000733565b602082019050919050565b6000620005cf603c83620006bd565b9150620005dc826200075c565b604082019050919050565b6000620005f6604983620006bd565b91506200060382620007ab565b606082019050919050565b60006200061d600f83620006bd565b91506200062a8262000820565b602082019050919050565b60006020820190508181036000830152620006508162000599565b9050919050565b600060208201905081810360008301526200067281620005c0565b9050919050565b600060208201905081810360008301526200069481620005e7565b9050919050565b60006020820190508181036000830152620006b6816200060e565b9050919050565b600082825260208201905092915050565b60006002820490506001821680620006e757607f821691505b60208210811415620006fe57620006fd62000704565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f61646472657373206973206e696c000000000000000000000000000000000000600082015250565b7f6d6178546f74616c49737375696e67546f6b656e206d757374206265206c657360008201527f73207468616e206f7220657175616c20746f206361702076616c756500000000602082015250565b7f6d617849737375696e67546f6b656e50657254696d65206d757374206265206c60008201527f657373207468616e206f7220657175616c20746f206d6178546f74616c49737360208201527f75696e67546f6b656e0000000000000000000000000000000000000000000000604082015250565b7f6e6f742073757065722061646d696e0000000000000000000000000000000000600082015250565b61373580620008596000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80638456cb591161010f578063d10601ec116100a2578063ea3f068d11610071578063ea3f068d14610595578063f2fde38b146105b1578063f3bdc228146105cd578063f9ba884f146105e9576101e5565b8063d10601ec146104fd578063dd62ed3e14610519578063e47d606014610549578063e4997dc514610579576101e5565b8063992c3e4b116100de578063992c3e4b14610451578063a0712d681461046d578063a457c2d71461049d578063a9059cbb146104cd576101e5565b80638456cb59146103ed578063893d20e8146103f75780638da5cb5b1461041557806395d89b4114610433576101e5565b806339509351116101875780635c975abb116101565780635c975abb1461036257806363a846f81461038057806370a08231146103b3578063715018a6146103e3576101e5565b806339509351146102dc5780633f4ba83a1461030c57806346f2ed2e1461031657806359bf1abe14610332576101e5565b80631785f53c116101c35780631785f53c1461025457806318160ddd1461027057806323b872dd1461028e578063313ce567146102be576101e5565b806306fdde03146101ea578063095ea7b3146102085780630ecb93c014610238575b600080fd5b6101f2610605565b6040516101ff9190612c9b565b60405180910390f35b610222600480360381019061021d91906127bc565b610697565b60405161022f9190612c20565b60405180910390f35b610252600480360381019061024d91906126a5565b6106b5565b005b61026e600480360381019061026991906126a5565b6107c3565b005b610278610921565b6040516102859190612f1d565b60405180910390f35b6102a860048036038101906102a3919061270a565b61092b565b6040516102b59190612c20565b60405180910390f35b6102c66109e0565b6040516102d39190612f38565b60405180910390f35b6102f660048036038101906102f191906127bc565b6109f7565b6040516103039190612c20565b60405180910390f35b610314610aaa565b005b610330600480360381019061032b9190612847565b610b30565b005b61034c600480360381019061034791906126a5565b610d7b565b6040516103599190612c20565b60405180910390f35b61036a610dd1565b6040516103779190612c20565b60405180910390f35b61039a600480360381019061039591906126a5565b610de8565b6040516103aa9493929190612c3b565b60405180910390f35b6103cd60048036038101906103c891906126a5565b610e25565b6040516103da9190612f1d565b60405180910390f35b6103eb610e6e565b005b6103f5610ef6565b005b6103ff610f7c565b60405161040c9190612bdc565b60405180910390f35b61041d610f8b565b60405161042a9190612bdc565b60405180910390f35b61043b610fb4565b6040516104489190612c9b565b60405180910390f35b61046b600480360381019061046691906127f8565b611046565b005b61048760048036038101906104829190612896565b611108565b6040516104949190612c20565b60405180910390f35b6104b760048036038101906104b291906127bc565b6111a0565b6040516104c49190612c20565b60405180910390f35b6104e760048036038101906104e291906127bc565b61126d565b6040516104f49190612c20565b60405180910390f35b610517600480360381019061051291906127f8565b611320565b005b610533600480360381019061052e91906126ce565b611522565b6040516105409190612f1d565b60405180910390f35b610563600480360381019061055e91906126a5565b6115a9565b6040516105709190612c20565b60405180910390f35b610593600480360381019061058e91906126a5565b6115c9565b005b6105af60048036038101906105aa91906127f8565b6116d7565b005b6105cb60048036038101906105c691906126a5565b611763565b005b6105e760048036038101906105e291906126a5565b61185b565b005b61060360048036038101906105fe9190612759565b6119b7565b005b6060600680546106149061308b565b80601f01602080910402602001604051908101604052809291908181526020018280546106409061308b565b801561068d5780601f106106625761010080835404028352916020019161068d565b820191906000526020600020905b81548152906001019060200180831161067057829003601f168201915b5050505050905090565b60006106ab6106a4611a7b565b8484611a83565b6001905092915050565b6106bd611a7b565b73ffffffffffffffffffffffffffffffffffffffff166106db610f8b565b73ffffffffffffffffffffffffffffffffffffffff1614610731576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072890612dfd565b60405180910390fd5b6001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc816040516107b89190612bdc565b60405180910390a150565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610853576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084a90612ebd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ba90612cbd565b60405180910390fd5b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555050565b6000600354905090565b6000610935610dd1565b15610975576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096c90612dbd565b60405180910390fd5b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156109cc57600080fd5b6109d7848484611c4e565b90509392505050565b6000600460009054906101000a900460ff16905090565b6000610aa0610a04611a7b565b84610a9b8560026000610a15611a7b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d2790919063ffffffff16565b611a83565b6001905092915050565b610ab2611a7b565b73ffffffffffffffffffffffffffffffffffffffff16610ad0610f8b565b73ffffffffffffffffffffffffffffffffffffffff1614610b26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1d90612dfd565b60405180910390fd5b610b2e611d3d565b565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb790612ebd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2790612cbd565b60405180910390fd5b80821115610c73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6a90612e9d565b60405180910390fd5b610c7b611ddf565b811115610cbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb490612e5d565b60405180910390fd5b610cc561263c565b600181600001901515908115158152505082816020018181525050818160400181815250508181606001818152505080600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160010155604082015181600201556060820151816003015590505050505050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600760009054906101000a900460ff16905090565b600a6020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020154908060030154905084565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610e76611a7b565b73ffffffffffffffffffffffffffffffffffffffff16610e94610f8b565b73ffffffffffffffffffffffffffffffffffffffff1614610eea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee190612dfd565b60405180910390fd5b610ef46000611dee565b565b610efe611a7b565b73ffffffffffffffffffffffffffffffffffffffff16610f1c610f8b565b73ffffffffffffffffffffffffffffffffffffffff1614610f72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6990612dfd565b60405180910390fd5b610f7a611eb2565b565b6000610f86610f8b565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060058054610fc39061308b565b80601f0160208091040260200160405190810160405280929190818152602001828054610fef9061308b565b801561103c5780601f106110115761010080835404028352916020019161103c565b820191906000526020600020905b81548152906001019060200180831161101f57829003601f168201915b5050505050905090565b61104e611a7b565b73ffffffffffffffffffffffffffffffffffffffff1661106c610f8b565b73ffffffffffffffffffffffffffffffffffffffff16146110c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b990612dfd565b60405180910390fd5b6110cc8383611f55565b7fb0de879351469d2741406aafc9ba1f44eb957cf44ee3391e59a7a9097050c927816040516110fb9190612c80565b60405180910390a1505050565b6000611112611a7b565b73ffffffffffffffffffffffffffffffffffffffff16611130610f8b565b73ffffffffffffffffffffffffffffffffffffffff1614611186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117d90612dfd565b60405180910390fd5b611197611191611a7b565b836120f9565b60019050919050565b60006112636111ad611a7b565b8461125e856040518060600160405280602581526020016136b960259139600260006111d7611a7b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122839092919063ffffffff16565b611a83565b6001905092915050565b6000611277610dd1565b156112b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ae90612dbd565b60405180910390fd5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561130e57600080fd5b61131883836122d8565b905092915050565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166113af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a690612edd565b60405180910390fd5b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154821115611434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142b90612d9d565b60405180910390fd5b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301548211156114b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b090612e1d565b60405180910390fd5b81600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600082825461150b9190612fc5565b9250508190555061151d8383836122f6565b505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60086020528060005260406000206000915054906101000a900460ff1681565b6115d1611a7b565b73ffffffffffffffffffffffffffffffffffffffff166115ef610f8b565b73ffffffffffffffffffffffffffffffffffffffff1614611645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163c90612dfd565b60405180910390fd5b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c816040516116cc9190612bdc565b60405180910390a150565b6116df611a7b565b73ffffffffffffffffffffffffffffffffffffffff166116fd610f8b565b73ffffffffffffffffffffffffffffffffffffffff1614611753576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174a90612dfd565b60405180910390fd5b61175e8383836122f6565b505050565b61176b611a7b565b73ffffffffffffffffffffffffffffffffffffffff16611789610f8b565b73ffffffffffffffffffffffffffffffffffffffff16146117df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d690612dfd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561184f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184690612d3d565b60405180910390fd5b61185881611dee565b50565b611863611a7b565b73ffffffffffffffffffffffffffffffffffffffff16611881610f8b565b73ffffffffffffffffffffffffffffffffffffffff16146118d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ce90612dfd565b60405180910390fd5b600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195a90612d7d565b60405180910390fd5b600061196e82610e25565b905061197a8282611f55565b7f61e6e66b0d6339b2980aecc6ccc0039736791f0ccde9ed512e789a7fbdd698c682826040516119ab929190612bf7565b60405180910390a15050565b6119bf611a7b565b73ffffffffffffffffffffffffffffffffffffffff166119dd610f8b565b73ffffffffffffffffffffffffffffffffffffffff1614611a33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2a90612dfd565b60405180910390fd5b611a3e848484612398565b7f3b36ee6b35325f38e95938557be92853c842b7a9a19fd7ac4931a6d24db5268281604051611a6d9190612c80565b60405180910390a150505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611af3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aea90612d1d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5a90612efd565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611c419190612f1d565b60405180910390a3505050565b6000611c5b848484612398565b611d1c84611c67611a7b565b611d178560405180606001604052806028815260200161366b60289139600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000611ccd611a7b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122839092919063ffffffff16565b611a83565b600190509392505050565b60008183611d359190612f6f565b905092915050565b611d45610dd1565b611d84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7b90612cdd565b60405180910390fd5b6000600760006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611dc8611a7b565b604051611dd59190612bdc565b60405180910390a1565b600066265e8af3930000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611eba610dd1565b15611efa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef190612dbd565b60405180910390fd5b6001600760006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611f3e611a7b565b604051611f4b9190612bdc565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611fc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbc90612e7d565b60405180910390fd5b612031816040518060600160405280602281526020016136de60229139600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122839092919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120898160035461262690919063ffffffff16565b600381905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516120ed9190612f1d565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612169576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216090612ddd565b60405180910390fd5b61217e81600354611d2790919063ffffffff16565b6003819055506121d681600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d2790919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516122779190612f1d565b60405180910390a35050565b60008383111582906122cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122c29190612c9b565b60405180910390fd5b5082840390509392505050565b60006122ec6122e5611a7b565b8484612398565b6001905092915050565b6122fe611ddf565b82612307610921565b6123119190612f6f565b1115612352576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234990612d5d565b60405180910390fd5b61235c83836120f9565b7f182a88d3fbfcb38ffaddf26e6d63ecd93b4348141de1eb744c43c4fbb1ccfb228160405161238b9190612c80565b60405180910390a1505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612408576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ff90612cfd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612478576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246f90612e3d565b60405180910390fd5b6124e48160405180606001604052806026815260200161369360269139600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122839092919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061257981600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d2790919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516126199190612f1d565b60405180910390a3505050565b600081836126349190612fc5565b905092915050565b60405180608001604052806000151581526020016000815260200160008152602001600081525090565b60008135905061267581613625565b92915050565b60008135905061268a8161363c565b92915050565b60008135905061269f81613653565b92915050565b6000602082840312156126b757600080fd5b60006126c584828501612666565b91505092915050565b600080604083850312156126e157600080fd5b60006126ef85828601612666565b925050602061270085828601612666565b9150509250929050565b60008060006060848603121561271f57600080fd5b600061272d86828701612666565b935050602061273e86828701612666565b925050604061274f86828701612690565b9150509250925092565b6000806000806080858703121561276f57600080fd5b600061277d87828801612666565b945050602061278e87828801612666565b935050604061279f87828801612690565b92505060606127b08782880161267b565b91505092959194509250565b600080604083850312156127cf57600080fd5b60006127dd85828601612666565b92505060206127ee85828601612690565b9150509250929050565b60008060006060848603121561280d57600080fd5b600061281b86828701612666565b935050602061282c86828701612690565b925050604061283d8682870161267b565b9150509250925092565b60008060006060848603121561285c57600080fd5b600061286a86828701612666565b935050602061287b86828701612690565b925050604061288c86828701612690565b9150509250925092565b6000602082840312156128a857600080fd5b60006128b684828501612690565b91505092915050565b6128c881612ff9565b82525050565b6128d78161300b565b82525050565b6128e681613017565b82525050565b60006128f782612f53565b6129018185612f5e565b9350612911818560208601613058565b61291a8161311b565b840191505092915050565b6000612932600e83612f5e565b915061293d8261312c565b602082019050919050565b6000612955601483612f5e565b915061296082613155565b602082019050919050565b6000612978602583612f5e565b91506129838261317e565b604082019050919050565b600061299b602483612f5e565b91506129a6826131cd565b604082019050919050565b60006129be602683612f5e565b91506129c98261321c565b604082019050919050565b60006129e1603e83612f5e565b91506129ec8261326b565b604082019050919050565b6000612a04602383612f5e565b9150612a0f826132ba565b604082019050919050565b6000612a27603883612f5e565b9150612a3282613309565b604082019050919050565b6000612a4a601083612f5e565b9150612a5582613358565b602082019050919050565b6000612a6d601f83612f5e565b9150612a7882613381565b602082019050919050565b6000612a90602083612f5e565b9150612a9b826133aa565b602082019050919050565b6000612ab3603b83612f5e565b9150612abe826133d3565b604082019050919050565b6000612ad6602383612f5e565b9150612ae182613422565b604082019050919050565b6000612af9603c83612f5e565b9150612b0482613471565b604082019050919050565b6000612b1c602183612f5e565b9150612b27826134c0565b604082019050919050565b6000612b3f604983612f5e565b9150612b4a8261350f565b606082019050919050565b6000612b62600f83612f5e565b9150612b6d82613584565b602082019050919050565b6000612b85600983612f5e565b9150612b90826135ad565b602082019050919050565b6000612ba8602283612f5e565b9150612bb3826135d6565b604082019050919050565b612bc781613041565b82525050565b612bd68161304b565b82525050565b6000602082019050612bf160008301846128bf565b92915050565b6000604082019050612c0c60008301856128bf565b612c196020830184612bbe565b9392505050565b6000602082019050612c3560008301846128ce565b92915050565b6000608082019050612c5060008301876128ce565b612c5d6020830186612bbe565b612c6a6040830185612bbe565b612c776060830184612bbe565b95945050505050565b6000602082019050612c9560008301846128dd565b92915050565b60006020820190508181036000830152612cb581846128ec565b905092915050565b60006020820190508181036000830152612cd681612925565b9050919050565b60006020820190508181036000830152612cf681612948565b9050919050565b60006020820190508181036000830152612d168161296b565b9050919050565b60006020820190508181036000830152612d368161298e565b9050919050565b60006020820190508181036000830152612d56816129b1565b9050919050565b60006020820190508181036000830152612d76816129d4565b9050919050565b60006020820190508181036000830152612d96816129f7565b9050919050565b60006020820190508181036000830152612db681612a1a565b9050919050565b60006020820190508181036000830152612dd681612a3d565b9050919050565b60006020820190508181036000830152612df681612a60565b9050919050565b60006020820190508181036000830152612e1681612a83565b9050919050565b60006020820190508181036000830152612e3681612aa6565b9050919050565b60006020820190508181036000830152612e5681612ac9565b9050919050565b60006020820190508181036000830152612e7681612aec565b9050919050565b60006020820190508181036000830152612e9681612b0f565b9050919050565b60006020820190508181036000830152612eb681612b32565b9050919050565b60006020820190508181036000830152612ed681612b55565b9050919050565b60006020820190508181036000830152612ef681612b78565b9050919050565b60006020820190508181036000830152612f1681612b9b565b9050919050565b6000602082019050612f326000830184612bbe565b92915050565b6000602082019050612f4d6000830184612bcd565b92915050565b600081519050919050565b600082825260208201905092915050565b6000612f7a82613041565b9150612f8583613041565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612fba57612fb96130bd565b5b828201905092915050565b6000612fd082613041565b9150612fdb83613041565b925082821015612fee57612fed6130bd565b5b828203905092915050565b600061300482613021565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561307657808201518184015260208101905061305b565b83811115613085576000848401525b50505050565b600060028204905060018216806130a357607f821691505b602082108114156130b7576130b66130ec565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f61646472657373206973206e696c000000000000000000000000000000000000600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f42455032303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f42455032303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f6d696e7465642076616c7565202b20746f74616c20737570706c79206d75737460008201527f20626520736d616c6c6572206f7220657175616c20746f6b656e206361700000602082015250565b7f7468652061646472657373206973206e6f7420696e2074686520626c61636b6c60008201527f6973740000000000000000000000000000000000000000000000000000000000602082015250565b7f6d696e7465642076616c7565206d75737420626520736d616c6c6572206f722060008201527f657175616c20746f2061646d696e206d61782069737375650000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f42455032303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f6d696e7465642076616c7565206d75737420626520736d616c6c6572206f722060008201527f657175616c20746f2072656d61696e2069737375652076616c75650000000000602082015250565b7f42455032303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f6d6178546f74616c49737375696e67546f6b656e206d757374206265206c657360008201527f73207468616e206f7220657175616c20746f206361702076616c756500000000602082015250565b7f42455032303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f6d617849737375696e67546f6b656e50657254696d65206d757374206265206c60008201527f657373207468616e206f7220657175616c20746f206d6178546f74616c49737360208201527f75696e67546f6b656e0000000000000000000000000000000000000000000000604082015250565b7f6e6f742073757065722061646d696e0000000000000000000000000000000000600082015250565b7f6e6f742061646d696e0000000000000000000000000000000000000000000000600082015250565b7f42455032303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b61362e81612ff9565b811461363957600080fd5b50565b61364581613017565b811461365057600080fd5b50565b61365c81613041565b811461366757600080fd5b5056fe42455032303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636542455032303a207472616e7366657220616d6f756e7420657863656564732062616c616e636542455032303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f42455032303a206275726e20616d6f756e7420657863656564732062616c616e6365a2646970667358221220970fbf1126ccd9b15c24795dded5699c2aee5b8e9c8bc23ea061842a8dc8801c64736f6c63430008040033",
}

// KFIVEABI is the input ABI used to generate the binding from.
// Deprecated: Use KFIVEMetaData.ABI instead.
var KFIVEABI = KFIVEMetaData.ABI

// KFIVEBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use KFIVEMetaData.Bin instead.
var KFIVEBin = KFIVEMetaData.Bin

// DeployKFIVE deploys a new Ethereum contract, binding an instance of KFIVE to it.
func DeployKFIVE(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *KFIVE, error) {
	parsed, err := KFIVEMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(KFIVEBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &KFIVE{KFIVECaller: KFIVECaller{contract: contract}, KFIVETransactor: KFIVETransactor{contract: contract}, KFIVEFilterer: KFIVEFilterer{contract: contract}}, nil
}

// KFIVE is an auto generated Go binding around an Ethereum contract.
type KFIVE struct {
	KFIVECaller     // Read-only binding to the contract
	KFIVETransactor // Write-only binding to the contract
	KFIVEFilterer   // Log filterer for contract events
}

// KFIVECaller is an auto generated read-only Go binding around an Ethereum contract.
type KFIVECaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KFIVETransactor is an auto generated write-only Go binding around an Ethereum contract.
type KFIVETransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KFIVEFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KFIVEFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KFIVESession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KFIVESession struct {
	Contract     *KFIVE            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KFIVECallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KFIVECallerSession struct {
	Contract *KFIVECaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// KFIVETransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KFIVETransactorSession struct {
	Contract     *KFIVETransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KFIVERaw is an auto generated low-level Go binding around an Ethereum contract.
type KFIVERaw struct {
	Contract *KFIVE // Generic contract binding to access the raw methods on
}

// KFIVECallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KFIVECallerRaw struct {
	Contract *KFIVECaller // Generic read-only contract binding to access the raw methods on
}

// KFIVETransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KFIVETransactorRaw struct {
	Contract *KFIVETransactor // Generic write-only contract binding to access the raw methods on
}

// NewKFIVE creates a new instance of KFIVE, bound to a specific deployed contract.
func NewKFIVE(address common.Address, backend bind.ContractBackend) (*KFIVE, error) {
	contract, err := bindKFIVE(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &KFIVE{KFIVECaller: KFIVECaller{contract: contract}, KFIVETransactor: KFIVETransactor{contract: contract}, KFIVEFilterer: KFIVEFilterer{contract: contract}}, nil
}

// NewKFIVECaller creates a new read-only instance of KFIVE, bound to a specific deployed contract.
func NewKFIVECaller(address common.Address, caller bind.ContractCaller) (*KFIVECaller, error) {
	contract, err := bindKFIVE(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KFIVECaller{contract: contract}, nil
}

// NewKFIVETransactor creates a new write-only instance of KFIVE, bound to a specific deployed contract.
func NewKFIVETransactor(address common.Address, transactor bind.ContractTransactor) (*KFIVETransactor, error) {
	contract, err := bindKFIVE(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KFIVETransactor{contract: contract}, nil
}

// NewKFIVEFilterer creates a new log filterer instance of KFIVE, bound to a specific deployed contract.
func NewKFIVEFilterer(address common.Address, filterer bind.ContractFilterer) (*KFIVEFilterer, error) {
	contract, err := bindKFIVE(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KFIVEFilterer{contract: contract}, nil
}

// bindKFIVE binds a generic wrapper to an already deployed contract.
func bindKFIVE(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(KFIVEABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KFIVE *KFIVERaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KFIVE.Contract.KFIVECaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KFIVE *KFIVERaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KFIVE.Contract.KFIVETransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KFIVE *KFIVERaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KFIVE.Contract.KFIVETransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KFIVE *KFIVECallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KFIVE.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KFIVE *KFIVETransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KFIVE.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KFIVE *KFIVETransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KFIVE.Contract.contract.Transact(opts, method, params...)
}

// Admin is a free data retrieval call binding the contract method 0x63a846f8.
//
// Solidity: function admin(address ) view returns(bool status, uint256 maxIssuingTokenPerTime, uint256 maxTotalIssuingToken, uint256 remainingIssuingToken)
func (_KFIVE *KFIVECaller) Admin(opts *bind.CallOpts, arg0 common.Address) (struct {
	Status                 bool
	MaxIssuingTokenPerTime *big.Int
	MaxTotalIssuingToken   *big.Int
	RemainingIssuingToken  *big.Int
}, error) {
	var out []interface{}
	err := _KFIVE.contract.Call(opts, &out, "admin", arg0)

	outstruct := new(struct {
		Status                 bool
		MaxIssuingTokenPerTime *big.Int
		MaxTotalIssuingToken   *big.Int
		RemainingIssuingToken  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Status = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.MaxIssuingTokenPerTime = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.MaxTotalIssuingToken = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.RemainingIssuingToken = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Admin is a free data retrieval call binding the contract method 0x63a846f8.
//
// Solidity: function admin(address ) view returns(bool status, uint256 maxIssuingTokenPerTime, uint256 maxTotalIssuingToken, uint256 remainingIssuingToken)
func (_KFIVE *KFIVESession) Admin(arg0 common.Address) (struct {
	Status                 bool
	MaxIssuingTokenPerTime *big.Int
	MaxTotalIssuingToken   *big.Int
	RemainingIssuingToken  *big.Int
}, error) {
	return _KFIVE.Contract.Admin(&_KFIVE.CallOpts, arg0)
}

// Admin is a free data retrieval call binding the contract method 0x63a846f8.
//
// Solidity: function admin(address ) view returns(bool status, uint256 maxIssuingTokenPerTime, uint256 maxTotalIssuingToken, uint256 remainingIssuingToken)
func (_KFIVE *KFIVECallerSession) Admin(arg0 common.Address) (struct {
	Status                 bool
	MaxIssuingTokenPerTime *big.Int
	MaxTotalIssuingToken   *big.Int
	RemainingIssuingToken  *big.Int
}, error) {
	return _KFIVE.Contract.Admin(&_KFIVE.CallOpts, arg0)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_KFIVE *KFIVECaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _KFIVE.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_KFIVE *KFIVESession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _KFIVE.Contract.Allowance(&_KFIVE.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_KFIVE *KFIVECallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _KFIVE.Contract.Allowance(&_KFIVE.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_KFIVE *KFIVECaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _KFIVE.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_KFIVE *KFIVESession) BalanceOf(account common.Address) (*big.Int, error) {
	return _KFIVE.Contract.BalanceOf(&_KFIVE.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_KFIVE *KFIVECallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _KFIVE.Contract.BalanceOf(&_KFIVE.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_KFIVE *KFIVECaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _KFIVE.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_KFIVE *KFIVESession) Decimals() (uint8, error) {
	return _KFIVE.Contract.Decimals(&_KFIVE.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_KFIVE *KFIVECallerSession) Decimals() (uint8, error) {
	return _KFIVE.Contract.Decimals(&_KFIVE.CallOpts)
}

// GetBlackListStatus is a free data retrieval call binding the contract method 0x59bf1abe.
//
// Solidity: function getBlackListStatus(address _maker) view returns(bool)
func (_KFIVE *KFIVECaller) GetBlackListStatus(opts *bind.CallOpts, _maker common.Address) (bool, error) {
	var out []interface{}
	err := _KFIVE.contract.Call(opts, &out, "getBlackListStatus", _maker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetBlackListStatus is a free data retrieval call binding the contract method 0x59bf1abe.
//
// Solidity: function getBlackListStatus(address _maker) view returns(bool)
func (_KFIVE *KFIVESession) GetBlackListStatus(_maker common.Address) (bool, error) {
	return _KFIVE.Contract.GetBlackListStatus(&_KFIVE.CallOpts, _maker)
}

// GetBlackListStatus is a free data retrieval call binding the contract method 0x59bf1abe.
//
// Solidity: function getBlackListStatus(address _maker) view returns(bool)
func (_KFIVE *KFIVECallerSession) GetBlackListStatus(_maker common.Address) (bool, error) {
	return _KFIVE.Contract.GetBlackListStatus(&_KFIVE.CallOpts, _maker)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_KFIVE *KFIVECaller) GetOwner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _KFIVE.contract.Call(opts, &out, "getOwner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_KFIVE *KFIVESession) GetOwner() (common.Address, error) {
	return _KFIVE.Contract.GetOwner(&_KFIVE.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_KFIVE *KFIVECallerSession) GetOwner() (common.Address, error) {
	return _KFIVE.Contract.GetOwner(&_KFIVE.CallOpts)
}

// IsBlackListed is a free data retrieval call binding the contract method 0xe47d6060.
//
// Solidity: function isBlackListed(address ) view returns(bool)
func (_KFIVE *KFIVECaller) IsBlackListed(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _KFIVE.contract.Call(opts, &out, "isBlackListed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBlackListed is a free data retrieval call binding the contract method 0xe47d6060.
//
// Solidity: function isBlackListed(address ) view returns(bool)
func (_KFIVE *KFIVESession) IsBlackListed(arg0 common.Address) (bool, error) {
	return _KFIVE.Contract.IsBlackListed(&_KFIVE.CallOpts, arg0)
}

// IsBlackListed is a free data retrieval call binding the contract method 0xe47d6060.
//
// Solidity: function isBlackListed(address ) view returns(bool)
func (_KFIVE *KFIVECallerSession) IsBlackListed(arg0 common.Address) (bool, error) {
	return _KFIVE.Contract.IsBlackListed(&_KFIVE.CallOpts, arg0)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_KFIVE *KFIVECaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _KFIVE.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_KFIVE *KFIVESession) Name() (string, error) {
	return _KFIVE.Contract.Name(&_KFIVE.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_KFIVE *KFIVECallerSession) Name() (string, error) {
	return _KFIVE.Contract.Name(&_KFIVE.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_KFIVE *KFIVECaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _KFIVE.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_KFIVE *KFIVESession) Owner() (common.Address, error) {
	return _KFIVE.Contract.Owner(&_KFIVE.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_KFIVE *KFIVECallerSession) Owner() (common.Address, error) {
	return _KFIVE.Contract.Owner(&_KFIVE.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_KFIVE *KFIVECaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _KFIVE.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_KFIVE *KFIVESession) Paused() (bool, error) {
	return _KFIVE.Contract.Paused(&_KFIVE.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_KFIVE *KFIVECallerSession) Paused() (bool, error) {
	return _KFIVE.Contract.Paused(&_KFIVE.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_KFIVE *KFIVECaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _KFIVE.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_KFIVE *KFIVESession) Symbol() (string, error) {
	return _KFIVE.Contract.Symbol(&_KFIVE.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_KFIVE *KFIVECallerSession) Symbol() (string, error) {
	return _KFIVE.Contract.Symbol(&_KFIVE.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_KFIVE *KFIVECaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _KFIVE.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_KFIVE *KFIVESession) TotalSupply() (*big.Int, error) {
	return _KFIVE.Contract.TotalSupply(&_KFIVE.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_KFIVE *KFIVECallerSession) TotalSupply() (*big.Int, error) {
	return _KFIVE.Contract.TotalSupply(&_KFIVE.CallOpts)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x46f2ed2e.
//
// Solidity: function addAdmin(address a, uint256 maxIssuingTokenPerTime, uint256 maxTotalIssuingToken) returns()
func (_KFIVE *KFIVETransactor) AddAdmin(opts *bind.TransactOpts, a common.Address, maxIssuingTokenPerTime *big.Int, maxTotalIssuingToken *big.Int) (*types.Transaction, error) {
	return _KFIVE.contract.Transact(opts, "addAdmin", a, maxIssuingTokenPerTime, maxTotalIssuingToken)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x46f2ed2e.
//
// Solidity: function addAdmin(address a, uint256 maxIssuingTokenPerTime, uint256 maxTotalIssuingToken) returns()
func (_KFIVE *KFIVESession) AddAdmin(a common.Address, maxIssuingTokenPerTime *big.Int, maxTotalIssuingToken *big.Int) (*types.Transaction, error) {
	return _KFIVE.Contract.AddAdmin(&_KFIVE.TransactOpts, a, maxIssuingTokenPerTime, maxTotalIssuingToken)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x46f2ed2e.
//
// Solidity: function addAdmin(address a, uint256 maxIssuingTokenPerTime, uint256 maxTotalIssuingToken) returns()
func (_KFIVE *KFIVETransactorSession) AddAdmin(a common.Address, maxIssuingTokenPerTime *big.Int, maxTotalIssuingToken *big.Int) (*types.Transaction, error) {
	return _KFIVE.Contract.AddAdmin(&_KFIVE.TransactOpts, a, maxIssuingTokenPerTime, maxTotalIssuingToken)
}

// AddBlackList is a paid mutator transaction binding the contract method 0x0ecb93c0.
//
// Solidity: function addBlackList(address _evilUser) returns()
func (_KFIVE *KFIVETransactor) AddBlackList(opts *bind.TransactOpts, _evilUser common.Address) (*types.Transaction, error) {
	return _KFIVE.contract.Transact(opts, "addBlackList", _evilUser)
}

// AddBlackList is a paid mutator transaction binding the contract method 0x0ecb93c0.
//
// Solidity: function addBlackList(address _evilUser) returns()
func (_KFIVE *KFIVESession) AddBlackList(_evilUser common.Address) (*types.Transaction, error) {
	return _KFIVE.Contract.AddBlackList(&_KFIVE.TransactOpts, _evilUser)
}

// AddBlackList is a paid mutator transaction binding the contract method 0x0ecb93c0.
//
// Solidity: function addBlackList(address _evilUser) returns()
func (_KFIVE *KFIVETransactorSession) AddBlackList(_evilUser common.Address) (*types.Transaction, error) {
	return _KFIVE.Contract.AddBlackList(&_KFIVE.TransactOpts, _evilUser)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_KFIVE *KFIVETransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _KFIVE.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_KFIVE *KFIVESession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _KFIVE.Contract.Approve(&_KFIVE.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_KFIVE *KFIVETransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _KFIVE.Contract.Approve(&_KFIVE.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_KFIVE *KFIVETransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _KFIVE.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_KFIVE *KFIVESession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _KFIVE.Contract.DecreaseAllowance(&_KFIVE.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_KFIVE *KFIVETransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _KFIVE.Contract.DecreaseAllowance(&_KFIVE.TransactOpts, spender, subtractedValue)
}

// DestroyBlackFunds is a paid mutator transaction binding the contract method 0xf3bdc228.
//
// Solidity: function destroyBlackFunds(address _blackListedUser) returns()
func (_KFIVE *KFIVETransactor) DestroyBlackFunds(opts *bind.TransactOpts, _blackListedUser common.Address) (*types.Transaction, error) {
	return _KFIVE.contract.Transact(opts, "destroyBlackFunds", _blackListedUser)
}

// DestroyBlackFunds is a paid mutator transaction binding the contract method 0xf3bdc228.
//
// Solidity: function destroyBlackFunds(address _blackListedUser) returns()
func (_KFIVE *KFIVESession) DestroyBlackFunds(_blackListedUser common.Address) (*types.Transaction, error) {
	return _KFIVE.Contract.DestroyBlackFunds(&_KFIVE.TransactOpts, _blackListedUser)
}

// DestroyBlackFunds is a paid mutator transaction binding the contract method 0xf3bdc228.
//
// Solidity: function destroyBlackFunds(address _blackListedUser) returns()
func (_KFIVE *KFIVETransactorSession) DestroyBlackFunds(_blackListedUser common.Address) (*types.Transaction, error) {
	return _KFIVE.Contract.DestroyBlackFunds(&_KFIVE.TransactOpts, _blackListedUser)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_KFIVE *KFIVETransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _KFIVE.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_KFIVE *KFIVESession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _KFIVE.Contract.IncreaseAllowance(&_KFIVE.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_KFIVE *KFIVETransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _KFIVE.Contract.IncreaseAllowance(&_KFIVE.TransactOpts, spender, addedValue)
}

// Issue is a paid mutator transaction binding the contract method 0xea3f068d.
//
// Solidity: function issue(address issuer, uint256 value, bytes32 offchain) returns()
func (_KFIVE *KFIVETransactor) Issue(opts *bind.TransactOpts, issuer common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _KFIVE.contract.Transact(opts, "issue", issuer, value, offchain)
}

// Issue is a paid mutator transaction binding the contract method 0xea3f068d.
//
// Solidity: function issue(address issuer, uint256 value, bytes32 offchain) returns()
func (_KFIVE *KFIVESession) Issue(issuer common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _KFIVE.Contract.Issue(&_KFIVE.TransactOpts, issuer, value, offchain)
}

// Issue is a paid mutator transaction binding the contract method 0xea3f068d.
//
// Solidity: function issue(address issuer, uint256 value, bytes32 offchain) returns()
func (_KFIVE *KFIVETransactorSession) Issue(issuer common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _KFIVE.Contract.Issue(&_KFIVE.TransactOpts, issuer, value, offchain)
}

// IssueByAdmin is a paid mutator transaction binding the contract method 0xd10601ec.
//
// Solidity: function issueByAdmin(address issuer, uint256 value, bytes32 offchain) returns()
func (_KFIVE *KFIVETransactor) IssueByAdmin(opts *bind.TransactOpts, issuer common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _KFIVE.contract.Transact(opts, "issueByAdmin", issuer, value, offchain)
}

// IssueByAdmin is a paid mutator transaction binding the contract method 0xd10601ec.
//
// Solidity: function issueByAdmin(address issuer, uint256 value, bytes32 offchain) returns()
func (_KFIVE *KFIVESession) IssueByAdmin(issuer common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _KFIVE.Contract.IssueByAdmin(&_KFIVE.TransactOpts, issuer, value, offchain)
}

// IssueByAdmin is a paid mutator transaction binding the contract method 0xd10601ec.
//
// Solidity: function issueByAdmin(address issuer, uint256 value, bytes32 offchain) returns()
func (_KFIVE *KFIVETransactorSession) IssueByAdmin(issuer common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _KFIVE.Contract.IssueByAdmin(&_KFIVE.TransactOpts, issuer, value, offchain)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount) returns(bool)
func (_KFIVE *KFIVETransactor) Mint(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _KFIVE.contract.Transact(opts, "mint", amount)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount) returns(bool)
func (_KFIVE *KFIVESession) Mint(amount *big.Int) (*types.Transaction, error) {
	return _KFIVE.Contract.Mint(&_KFIVE.TransactOpts, amount)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount) returns(bool)
func (_KFIVE *KFIVETransactorSession) Mint(amount *big.Int) (*types.Transaction, error) {
	return _KFIVE.Contract.Mint(&_KFIVE.TransactOpts, amount)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_KFIVE *KFIVETransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KFIVE.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_KFIVE *KFIVESession) Pause() (*types.Transaction, error) {
	return _KFIVE.Contract.Pause(&_KFIVE.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_KFIVE *KFIVETransactorSession) Pause() (*types.Transaction, error) {
	return _KFIVE.Contract.Pause(&_KFIVE.TransactOpts)
}

// Redeem is a paid mutator transaction binding the contract method 0x992c3e4b.
//
// Solidity: function redeem(address redeemer, uint256 value, bytes32 offchain) returns()
func (_KFIVE *KFIVETransactor) Redeem(opts *bind.TransactOpts, redeemer common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _KFIVE.contract.Transact(opts, "redeem", redeemer, value, offchain)
}

// Redeem is a paid mutator transaction binding the contract method 0x992c3e4b.
//
// Solidity: function redeem(address redeemer, uint256 value, bytes32 offchain) returns()
func (_KFIVE *KFIVESession) Redeem(redeemer common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _KFIVE.Contract.Redeem(&_KFIVE.TransactOpts, redeemer, value, offchain)
}

// Redeem is a paid mutator transaction binding the contract method 0x992c3e4b.
//
// Solidity: function redeem(address redeemer, uint256 value, bytes32 offchain) returns()
func (_KFIVE *KFIVETransactorSession) Redeem(redeemer common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _KFIVE.Contract.Redeem(&_KFIVE.TransactOpts, redeemer, value, offchain)
}

// RemoveAdmin is a paid mutator transaction binding the contract method 0x1785f53c.
//
// Solidity: function removeAdmin(address a) returns()
func (_KFIVE *KFIVETransactor) RemoveAdmin(opts *bind.TransactOpts, a common.Address) (*types.Transaction, error) {
	return _KFIVE.contract.Transact(opts, "removeAdmin", a)
}

// RemoveAdmin is a paid mutator transaction binding the contract method 0x1785f53c.
//
// Solidity: function removeAdmin(address a) returns()
func (_KFIVE *KFIVESession) RemoveAdmin(a common.Address) (*types.Transaction, error) {
	return _KFIVE.Contract.RemoveAdmin(&_KFIVE.TransactOpts, a)
}

// RemoveAdmin is a paid mutator transaction binding the contract method 0x1785f53c.
//
// Solidity: function removeAdmin(address a) returns()
func (_KFIVE *KFIVETransactorSession) RemoveAdmin(a common.Address) (*types.Transaction, error) {
	return _KFIVE.Contract.RemoveAdmin(&_KFIVE.TransactOpts, a)
}

// RemoveBlackList is a paid mutator transaction binding the contract method 0xe4997dc5.
//
// Solidity: function removeBlackList(address _clearedUser) returns()
func (_KFIVE *KFIVETransactor) RemoveBlackList(opts *bind.TransactOpts, _clearedUser common.Address) (*types.Transaction, error) {
	return _KFIVE.contract.Transact(opts, "removeBlackList", _clearedUser)
}

// RemoveBlackList is a paid mutator transaction binding the contract method 0xe4997dc5.
//
// Solidity: function removeBlackList(address _clearedUser) returns()
func (_KFIVE *KFIVESession) RemoveBlackList(_clearedUser common.Address) (*types.Transaction, error) {
	return _KFIVE.Contract.RemoveBlackList(&_KFIVE.TransactOpts, _clearedUser)
}

// RemoveBlackList is a paid mutator transaction binding the contract method 0xe4997dc5.
//
// Solidity: function removeBlackList(address _clearedUser) returns()
func (_KFIVE *KFIVETransactorSession) RemoveBlackList(_clearedUser common.Address) (*types.Transaction, error) {
	return _KFIVE.Contract.RemoveBlackList(&_KFIVE.TransactOpts, _clearedUser)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_KFIVE *KFIVETransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KFIVE.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_KFIVE *KFIVESession) RenounceOwnership() (*types.Transaction, error) {
	return _KFIVE.Contract.RenounceOwnership(&_KFIVE.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_KFIVE *KFIVETransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _KFIVE.Contract.RenounceOwnership(&_KFIVE.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _value) returns(bool)
func (_KFIVE *KFIVETransactor) Transfer(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _KFIVE.contract.Transact(opts, "transfer", _to, _value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _value) returns(bool)
func (_KFIVE *KFIVESession) Transfer(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _KFIVE.Contract.Transfer(&_KFIVE.TransactOpts, _to, _value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _value) returns(bool)
func (_KFIVE *KFIVETransactorSession) Transfer(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _KFIVE.Contract.Transfer(&_KFIVE.TransactOpts, _to, _value)
}

// TransferByAdmin is a paid mutator transaction binding the contract method 0xf9ba884f.
//
// Solidity: function transferByAdmin(address from, address to, uint256 value, bytes32 offchain) returns()
func (_KFIVE *KFIVETransactor) TransferByAdmin(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _KFIVE.contract.Transact(opts, "transferByAdmin", from, to, value, offchain)
}

// TransferByAdmin is a paid mutator transaction binding the contract method 0xf9ba884f.
//
// Solidity: function transferByAdmin(address from, address to, uint256 value, bytes32 offchain) returns()
func (_KFIVE *KFIVESession) TransferByAdmin(from common.Address, to common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _KFIVE.Contract.TransferByAdmin(&_KFIVE.TransactOpts, from, to, value, offchain)
}

// TransferByAdmin is a paid mutator transaction binding the contract method 0xf9ba884f.
//
// Solidity: function transferByAdmin(address from, address to, uint256 value, bytes32 offchain) returns()
func (_KFIVE *KFIVETransactorSession) TransferByAdmin(from common.Address, to common.Address, value *big.Int, offchain [32]byte) (*types.Transaction, error) {
	return _KFIVE.Contract.TransferByAdmin(&_KFIVE.TransactOpts, from, to, value, offchain)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _value) returns(bool)
func (_KFIVE *KFIVETransactor) TransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _KFIVE.contract.Transact(opts, "transferFrom", _from, _to, _value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _value) returns(bool)
func (_KFIVE *KFIVESession) TransferFrom(_from common.Address, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _KFIVE.Contract.TransferFrom(&_KFIVE.TransactOpts, _from, _to, _value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _value) returns(bool)
func (_KFIVE *KFIVETransactorSession) TransferFrom(_from common.Address, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _KFIVE.Contract.TransferFrom(&_KFIVE.TransactOpts, _from, _to, _value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_KFIVE *KFIVETransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _KFIVE.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_KFIVE *KFIVESession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _KFIVE.Contract.TransferOwnership(&_KFIVE.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_KFIVE *KFIVETransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _KFIVE.Contract.TransferOwnership(&_KFIVE.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_KFIVE *KFIVETransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KFIVE.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_KFIVE *KFIVESession) Unpause() (*types.Transaction, error) {
	return _KFIVE.Contract.Unpause(&_KFIVE.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_KFIVE *KFIVETransactorSession) Unpause() (*types.Transaction, error) {
	return _KFIVE.Contract.Unpause(&_KFIVE.TransactOpts)
}

// KFIVEAddedBlackListIterator is returned from FilterAddedBlackList and is used to iterate over the raw logs and unpacked data for AddedBlackList events raised by the KFIVE contract.
type KFIVEAddedBlackListIterator struct {
	Event *KFIVEAddedBlackList // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KFIVEAddedBlackListIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KFIVEAddedBlackList)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KFIVEAddedBlackList)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KFIVEAddedBlackListIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KFIVEAddedBlackListIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KFIVEAddedBlackList represents a AddedBlackList event raised by the KFIVE contract.
type KFIVEAddedBlackList struct {
	User common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAddedBlackList is a free log retrieval operation binding the contract event 0x42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc.
//
// Solidity: event AddedBlackList(address _user)
func (_KFIVE *KFIVEFilterer) FilterAddedBlackList(opts *bind.FilterOpts) (*KFIVEAddedBlackListIterator, error) {

	logs, sub, err := _KFIVE.contract.FilterLogs(opts, "AddedBlackList")
	if err != nil {
		return nil, err
	}
	return &KFIVEAddedBlackListIterator{contract: _KFIVE.contract, event: "AddedBlackList", logs: logs, sub: sub}, nil
}

// WatchAddedBlackList is a free log subscription operation binding the contract event 0x42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc.
//
// Solidity: event AddedBlackList(address _user)
func (_KFIVE *KFIVEFilterer) WatchAddedBlackList(opts *bind.WatchOpts, sink chan<- *KFIVEAddedBlackList) (event.Subscription, error) {

	logs, sub, err := _KFIVE.contract.WatchLogs(opts, "AddedBlackList")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KFIVEAddedBlackList)
				if err := _KFIVE.contract.UnpackLog(event, "AddedBlackList", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddedBlackList is a log parse operation binding the contract event 0x42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc.
//
// Solidity: event AddedBlackList(address _user)
func (_KFIVE *KFIVEFilterer) ParseAddedBlackList(log types.Log) (*KFIVEAddedBlackList, error) {
	event := new(KFIVEAddedBlackList)
	if err := _KFIVE.contract.UnpackLog(event, "AddedBlackList", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KFIVEApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the KFIVE contract.
type KFIVEApprovalIterator struct {
	Event *KFIVEApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KFIVEApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KFIVEApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KFIVEApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KFIVEApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KFIVEApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KFIVEApproval represents a Approval event raised by the KFIVE contract.
type KFIVEApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_KFIVE *KFIVEFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*KFIVEApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _KFIVE.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &KFIVEApprovalIterator{contract: _KFIVE.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_KFIVE *KFIVEFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *KFIVEApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _KFIVE.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KFIVEApproval)
				if err := _KFIVE.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_KFIVE *KFIVEFilterer) ParseApproval(log types.Log) (*KFIVEApproval, error) {
	event := new(KFIVEApproval)
	if err := _KFIVE.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KFIVEDestroyedBlackFundsIterator is returned from FilterDestroyedBlackFunds and is used to iterate over the raw logs and unpacked data for DestroyedBlackFunds events raised by the KFIVE contract.
type KFIVEDestroyedBlackFundsIterator struct {
	Event *KFIVEDestroyedBlackFunds // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KFIVEDestroyedBlackFundsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KFIVEDestroyedBlackFunds)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KFIVEDestroyedBlackFunds)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KFIVEDestroyedBlackFundsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KFIVEDestroyedBlackFundsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KFIVEDestroyedBlackFunds represents a DestroyedBlackFunds event raised by the KFIVE contract.
type KFIVEDestroyedBlackFunds struct {
	BlackListedUser common.Address
	Balance         *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDestroyedBlackFunds is a free log retrieval operation binding the contract event 0x61e6e66b0d6339b2980aecc6ccc0039736791f0ccde9ed512e789a7fbdd698c6.
//
// Solidity: event DestroyedBlackFunds(address _blackListedUser, uint256 _balance)
func (_KFIVE *KFIVEFilterer) FilterDestroyedBlackFunds(opts *bind.FilterOpts) (*KFIVEDestroyedBlackFundsIterator, error) {

	logs, sub, err := _KFIVE.contract.FilterLogs(opts, "DestroyedBlackFunds")
	if err != nil {
		return nil, err
	}
	return &KFIVEDestroyedBlackFundsIterator{contract: _KFIVE.contract, event: "DestroyedBlackFunds", logs: logs, sub: sub}, nil
}

// WatchDestroyedBlackFunds is a free log subscription operation binding the contract event 0x61e6e66b0d6339b2980aecc6ccc0039736791f0ccde9ed512e789a7fbdd698c6.
//
// Solidity: event DestroyedBlackFunds(address _blackListedUser, uint256 _balance)
func (_KFIVE *KFIVEFilterer) WatchDestroyedBlackFunds(opts *bind.WatchOpts, sink chan<- *KFIVEDestroyedBlackFunds) (event.Subscription, error) {

	logs, sub, err := _KFIVE.contract.WatchLogs(opts, "DestroyedBlackFunds")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KFIVEDestroyedBlackFunds)
				if err := _KFIVE.contract.UnpackLog(event, "DestroyedBlackFunds", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDestroyedBlackFunds is a log parse operation binding the contract event 0x61e6e66b0d6339b2980aecc6ccc0039736791f0ccde9ed512e789a7fbdd698c6.
//
// Solidity: event DestroyedBlackFunds(address _blackListedUser, uint256 _balance)
func (_KFIVE *KFIVEFilterer) ParseDestroyedBlackFunds(log types.Log) (*KFIVEDestroyedBlackFunds, error) {
	event := new(KFIVEDestroyedBlackFunds)
	if err := _KFIVE.contract.UnpackLog(event, "DestroyedBlackFunds", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KFIVEOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the KFIVE contract.
type KFIVEOwnershipTransferredIterator struct {
	Event *KFIVEOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KFIVEOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KFIVEOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KFIVEOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KFIVEOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KFIVEOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KFIVEOwnershipTransferred represents a OwnershipTransferred event raised by the KFIVE contract.
type KFIVEOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_KFIVE *KFIVEFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*KFIVEOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _KFIVE.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &KFIVEOwnershipTransferredIterator{contract: _KFIVE.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_KFIVE *KFIVEFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *KFIVEOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _KFIVE.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KFIVEOwnershipTransferred)
				if err := _KFIVE.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_KFIVE *KFIVEFilterer) ParseOwnershipTransferred(log types.Log) (*KFIVEOwnershipTransferred, error) {
	event := new(KFIVEOwnershipTransferred)
	if err := _KFIVE.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KFIVEPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the KFIVE contract.
type KFIVEPausedIterator struct {
	Event *KFIVEPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KFIVEPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KFIVEPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KFIVEPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KFIVEPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KFIVEPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KFIVEPaused represents a Paused event raised by the KFIVE contract.
type KFIVEPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_KFIVE *KFIVEFilterer) FilterPaused(opts *bind.FilterOpts) (*KFIVEPausedIterator, error) {

	logs, sub, err := _KFIVE.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &KFIVEPausedIterator{contract: _KFIVE.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_KFIVE *KFIVEFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *KFIVEPaused) (event.Subscription, error) {

	logs, sub, err := _KFIVE.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KFIVEPaused)
				if err := _KFIVE.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_KFIVE *KFIVEFilterer) ParsePaused(log types.Log) (*KFIVEPaused, error) {
	event := new(KFIVEPaused)
	if err := _KFIVE.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KFIVERemovedBlackListIterator is returned from FilterRemovedBlackList and is used to iterate over the raw logs and unpacked data for RemovedBlackList events raised by the KFIVE contract.
type KFIVERemovedBlackListIterator struct {
	Event *KFIVERemovedBlackList // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KFIVERemovedBlackListIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KFIVERemovedBlackList)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KFIVERemovedBlackList)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KFIVERemovedBlackListIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KFIVERemovedBlackListIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KFIVERemovedBlackList represents a RemovedBlackList event raised by the KFIVE contract.
type KFIVERemovedBlackList struct {
	User common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRemovedBlackList is a free log retrieval operation binding the contract event 0xd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c.
//
// Solidity: event RemovedBlackList(address _user)
func (_KFIVE *KFIVEFilterer) FilterRemovedBlackList(opts *bind.FilterOpts) (*KFIVERemovedBlackListIterator, error) {

	logs, sub, err := _KFIVE.contract.FilterLogs(opts, "RemovedBlackList")
	if err != nil {
		return nil, err
	}
	return &KFIVERemovedBlackListIterator{contract: _KFIVE.contract, event: "RemovedBlackList", logs: logs, sub: sub}, nil
}

// WatchRemovedBlackList is a free log subscription operation binding the contract event 0xd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c.
//
// Solidity: event RemovedBlackList(address _user)
func (_KFIVE *KFIVEFilterer) WatchRemovedBlackList(opts *bind.WatchOpts, sink chan<- *KFIVERemovedBlackList) (event.Subscription, error) {

	logs, sub, err := _KFIVE.contract.WatchLogs(opts, "RemovedBlackList")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KFIVERemovedBlackList)
				if err := _KFIVE.contract.UnpackLog(event, "RemovedBlackList", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemovedBlackList is a log parse operation binding the contract event 0xd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c.
//
// Solidity: event RemovedBlackList(address _user)
func (_KFIVE *KFIVEFilterer) ParseRemovedBlackList(log types.Log) (*KFIVERemovedBlackList, error) {
	event := new(KFIVERemovedBlackList)
	if err := _KFIVE.contract.UnpackLog(event, "RemovedBlackList", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KFIVETransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the KFIVE contract.
type KFIVETransferIterator struct {
	Event *KFIVETransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KFIVETransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KFIVETransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KFIVETransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KFIVETransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KFIVETransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KFIVETransfer represents a Transfer event raised by the KFIVE contract.
type KFIVETransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_KFIVE *KFIVEFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*KFIVETransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _KFIVE.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &KFIVETransferIterator{contract: _KFIVE.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_KFIVE *KFIVEFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *KFIVETransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _KFIVE.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KFIVETransfer)
				if err := _KFIVE.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_KFIVE *KFIVEFilterer) ParseTransfer(log types.Log) (*KFIVETransfer, error) {
	event := new(KFIVETransfer)
	if err := _KFIVE.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KFIVEUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the KFIVE contract.
type KFIVEUnpausedIterator struct {
	Event *KFIVEUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KFIVEUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KFIVEUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KFIVEUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KFIVEUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KFIVEUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KFIVEUnpaused represents a Unpaused event raised by the KFIVE contract.
type KFIVEUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_KFIVE *KFIVEFilterer) FilterUnpaused(opts *bind.FilterOpts) (*KFIVEUnpausedIterator, error) {

	logs, sub, err := _KFIVE.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &KFIVEUnpausedIterator{contract: _KFIVE.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_KFIVE *KFIVEFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *KFIVEUnpaused) (event.Subscription, error) {

	logs, sub, err := _KFIVE.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KFIVEUnpaused)
				if err := _KFIVE.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_KFIVE *KFIVEFilterer) ParseUnpaused(log types.Log) (*KFIVEUnpaused, error) {
	event := new(KFIVEUnpaused)
	if err := _KFIVE.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KFIVEIssueIterator is returned from FilterIssue and is used to iterate over the raw logs and unpacked data for Issue events raised by the KFIVE contract.
type KFIVEIssueIterator struct {
	Event *KFIVEIssue // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KFIVEIssueIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KFIVEIssue)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KFIVEIssue)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KFIVEIssueIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KFIVEIssueIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KFIVEIssue represents a Issue event raised by the KFIVE contract.
type KFIVEIssue struct {
	Offchain [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterIssue is a free log retrieval operation binding the contract event 0x182a88d3fbfcb38ffaddf26e6d63ecd93b4348141de1eb744c43c4fbb1ccfb22.
//
// Solidity: event __issue(bytes32 offchain)
func (_KFIVE *KFIVEFilterer) FilterIssue(opts *bind.FilterOpts) (*KFIVEIssueIterator, error) {

	logs, sub, err := _KFIVE.contract.FilterLogs(opts, "__issue")
	if err != nil {
		return nil, err
	}
	return &KFIVEIssueIterator{contract: _KFIVE.contract, event: "__issue", logs: logs, sub: sub}, nil
}

// WatchIssue is a free log subscription operation binding the contract event 0x182a88d3fbfcb38ffaddf26e6d63ecd93b4348141de1eb744c43c4fbb1ccfb22.
//
// Solidity: event __issue(bytes32 offchain)
func (_KFIVE *KFIVEFilterer) WatchIssue(opts *bind.WatchOpts, sink chan<- *KFIVEIssue) (event.Subscription, error) {

	logs, sub, err := _KFIVE.contract.WatchLogs(opts, "__issue")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KFIVEIssue)
				if err := _KFIVE.contract.UnpackLog(event, "__issue", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIssue is a log parse operation binding the contract event 0x182a88d3fbfcb38ffaddf26e6d63ecd93b4348141de1eb744c43c4fbb1ccfb22.
//
// Solidity: event __issue(bytes32 offchain)
func (_KFIVE *KFIVEFilterer) ParseIssue(log types.Log) (*KFIVEIssue, error) {
	event := new(KFIVEIssue)
	if err := _KFIVE.contract.UnpackLog(event, "__issue", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KFIVERedeemIterator is returned from FilterRedeem and is used to iterate over the raw logs and unpacked data for Redeem events raised by the KFIVE contract.
type KFIVERedeemIterator struct {
	Event *KFIVERedeem // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KFIVERedeemIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KFIVERedeem)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KFIVERedeem)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KFIVERedeemIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KFIVERedeemIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KFIVERedeem represents a Redeem event raised by the KFIVE contract.
type KFIVERedeem struct {
	Offchain [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRedeem is a free log retrieval operation binding the contract event 0xb0de879351469d2741406aafc9ba1f44eb957cf44ee3391e59a7a9097050c927.
//
// Solidity: event __redeem(bytes32 offchain)
func (_KFIVE *KFIVEFilterer) FilterRedeem(opts *bind.FilterOpts) (*KFIVERedeemIterator, error) {

	logs, sub, err := _KFIVE.contract.FilterLogs(opts, "__redeem")
	if err != nil {
		return nil, err
	}
	return &KFIVERedeemIterator{contract: _KFIVE.contract, event: "__redeem", logs: logs, sub: sub}, nil
}

// WatchRedeem is a free log subscription operation binding the contract event 0xb0de879351469d2741406aafc9ba1f44eb957cf44ee3391e59a7a9097050c927.
//
// Solidity: event __redeem(bytes32 offchain)
func (_KFIVE *KFIVEFilterer) WatchRedeem(opts *bind.WatchOpts, sink chan<- *KFIVERedeem) (event.Subscription, error) {

	logs, sub, err := _KFIVE.contract.WatchLogs(opts, "__redeem")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KFIVERedeem)
				if err := _KFIVE.contract.UnpackLog(event, "__redeem", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeem is a log parse operation binding the contract event 0xb0de879351469d2741406aafc9ba1f44eb957cf44ee3391e59a7a9097050c927.
//
// Solidity: event __redeem(bytes32 offchain)
func (_KFIVE *KFIVEFilterer) ParseRedeem(log types.Log) (*KFIVERedeem, error) {
	event := new(KFIVERedeem)
	if err := _KFIVE.contract.UnpackLog(event, "__redeem", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KFIVETransferByAdminIterator is returned from FilterTransferByAdmin and is used to iterate over the raw logs and unpacked data for TransferByAdmin events raised by the KFIVE contract.
type KFIVETransferByAdminIterator struct {
	Event *KFIVETransferByAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KFIVETransferByAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KFIVETransferByAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KFIVETransferByAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KFIVETransferByAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KFIVETransferByAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KFIVETransferByAdmin represents a TransferByAdmin event raised by the KFIVE contract.
type KFIVETransferByAdmin struct {
	Offchain [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferByAdmin is a free log retrieval operation binding the contract event 0x3b36ee6b35325f38e95938557be92853c842b7a9a19fd7ac4931a6d24db52682.
//
// Solidity: event __transferByAdmin(bytes32 offchain)
func (_KFIVE *KFIVEFilterer) FilterTransferByAdmin(opts *bind.FilterOpts) (*KFIVETransferByAdminIterator, error) {

	logs, sub, err := _KFIVE.contract.FilterLogs(opts, "__transferByAdmin")
	if err != nil {
		return nil, err
	}
	return &KFIVETransferByAdminIterator{contract: _KFIVE.contract, event: "__transferByAdmin", logs: logs, sub: sub}, nil
}

// WatchTransferByAdmin is a free log subscription operation binding the contract event 0x3b36ee6b35325f38e95938557be92853c842b7a9a19fd7ac4931a6d24db52682.
//
// Solidity: event __transferByAdmin(bytes32 offchain)
func (_KFIVE *KFIVEFilterer) WatchTransferByAdmin(opts *bind.WatchOpts, sink chan<- *KFIVETransferByAdmin) (event.Subscription, error) {

	logs, sub, err := _KFIVE.contract.WatchLogs(opts, "__transferByAdmin")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KFIVETransferByAdmin)
				if err := _KFIVE.contract.UnpackLog(event, "__transferByAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferByAdmin is a log parse operation binding the contract event 0x3b36ee6b35325f38e95938557be92853c842b7a9a19fd7ac4931a6d24db52682.
//
// Solidity: event __transferByAdmin(bytes32 offchain)
func (_KFIVE *KFIVEFilterer) ParseTransferByAdmin(log types.Log) (*KFIVETransferByAdmin, error) {
	event := new(KFIVETransferByAdmin)
	if err := _KFIVE.contract.UnpackLog(event, "__transferByAdmin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
